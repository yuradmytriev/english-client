(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{783:function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(163),o=n.n(r),a=n(52);function i(t,e,n,r,o,a,i){try{var l=t[a](i),c=l.value}catch(t){return void n(t)}l.done?e(c):Promise.resolve(c).then(r,o)}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c="Can't upload image",u=function(t){return"".concat(a.a,"/words/").concat(t)},d=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r,a,d;return e=t,n=null,r=[{key:"update",value:function(t){var e=t.wordId,n=t.body;fetch(u(e),{body:n,method:"PUT"}).then((function(t){return t.json()})).then((function(t){return t.id&&o.a.success("Image updated successfully"),t})).catch((function(){o.a.error(c)}))}},{key:"updateJSON",value:function(t){var e=t.wordId,n=t.wordProps,r=JSON.stringify(n);return fetch(u(e),{body:r,method:"PUT",headers:{"Content-Type":"application/json"}}).then((function(t){return t.json()})).then((function(t){return t})).catch((function(){o.a.error(c)}))}},{key:"delete",value:(a=regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(u(e),{method:"DELETE"});case 2:return n=t.sent,t.abrupt("return",n.json());case 4:case"end":return t.stop()}}),t)})),d=function(){var t=this,e=arguments;return new Promise((function(n,r){var o=a.apply(t,e);function l(t){i(o,n,r,l,c,"next",t)}function c(t){i(o,n,r,l,c,"throw",t)}l(void 0)}))},function(t){return d.apply(this,arguments)})}],n&&l(e.prototype,n),r&&l(e,r),t}()},784:function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return o}));var r="0 3px 6px 0 rgba(0,0,0,0.12), 0 0 1px 0 rgba(0,0,0,0.12)",o="4px"},790:function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(0),o=n.n(r),a=n(24),i=n.n(a),l=n(17),c=Object(l.a)(i.a).withConfig({displayName:"styles__Icon",componentId:"sc-1ins3vw-0"})(["margin:0 10px;"]),u=function(t){var e=t.word;return o.a.createElement(c,{theme:"twoTone",type:"sound",onClick:function(){window.responsiveVoice.speak(e)}})}},865:function(t,e,n){"use strict";n.r(e),n.d(e,"Word",(function(){return me}));var r=n(0),o=n.n(r),a=n(809),i=n.n(a);function l(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return c(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var u=function(t){var e=l(Object(r.useState)(0),2),n=e[0],o=e[1],a=n>0,i=n<t.length-1;return[n,function(){a&&o(n-1)},function(){i&&o(n+1)},a,i]},d=n(24),s=n.n(d),f=n(17),p=Object(f.a)(s.a).withConfig({displayName:"styles__Arrow",componentId:"z7mpun-0"})(["font-size:35px;color:",";z-index:1;position:fixed;top:48%;"],(function(t){return t.disabled?"#d6d6d6":"grey"})),m=Object(f.a)(p).withConfig({displayName:"styles__ArrowLeft",componentId:"z7mpun-1"})(["left:1rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"})),y=Object(f.a)(p).withConfig({displayName:"styles__ArrowRight",componentId:"z7mpun-2"})(["right:7rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"}));function h(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return v(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var b=function(t){var e=t.children,n=t.dots,a=Object(r.useRef)(),l=h(u(e),5),c=(l[0],l[1]),d=l[2],s=l[3],f=l[4],p=(null==e?void 0:e.length)>1;return o.a.createElement(o.a.Fragment,null,p&&o.a.createElement(m,{disabled:!s,type:"left",onClick:function(){var t;null==a||null===(t=a.current)||void 0===t||t.prev(),c()}}),o.a.createElement(i.a,{dots:n,infinite:!1,ref:a},e),p&&o.a.createElement(y,{disabled:!f,type:"right",onClick:function(){var t;null==a||null===(t=a.current)||void 0===t||t.next(),d()}}))},g=n(788),w=n.n(g),x=n(231),E=n.n(x),I=n(52);function S(t,e,n,r,o,a,i){try{var l=t[a](i),c=l.value}catch(t){return void n(t)}l.done?e(c):Promise.resolve(c).then(r,o)}var j=function(){var t,e=(t=regeneratorRuntime.mark((function t(e,n){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("".concat(I.a,"/word/").concat(e,"/").concat(n));case 3:return r=t.sent,t.abrupt("return",r.json());case 7:return t.prev=7,t.t0=t.catch(0),t.abrupt("return",t.t0);case 10:case"end":return t.stop()}}),t,null,[[0,7]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(t){S(a,r,o,i,l,"next",t)}function l(t){S(a,r,o,i,l,"throw",t)}i(void 0)}))});return function(t,n){return e.apply(this,arguments)}}(),O=f.a.span.withConfig({displayName:"styles__Color",componentId:"zf12ky-0"})(["width:20px;height:20px;background:",";display:inline-block;border-radius:50%;"],(function(t){return t.color}));function A(t,e,n,r,o,a,i){try{var l=t[a](i),c=l.value}catch(t){return void n(t)}l.done?e(c):Promise.resolve(c).then(r,o)}function _(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return C(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return C(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var k=function(t){var e=t.word,n=t.showTitle,a=_(Object(r.useState)(null),2),i=a[0],l=a[1];return Object(r.useEffect)((function(){var t;(t=regeneratorRuntime.mark((function t(){var n,r,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,j("frequency",e);case 2:n=t.sent,r=E()(n,"frequency.zipf",null),a=r,o=[{color:"#880000",title:"very rare"},{color:"#ff0202",title:"rare"},{color:"#f97777",title:"seldom"},{color:"#abc0f3",title:"sometimes"},{color:"#6693ff",title:"regular"},{color:"#054eff",title:"often"},{color:"#002b94",title:"frequently"}][Math.ceil(a)-1],l(o);case 6:case"end":return t.stop()}var a}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(t){A(a,r,o,i,l,"next",t)}function l(t){A(a,r,o,i,l,"throw",t)}i(void 0)}))})()}),[]),i?o.a.createElement(o.a.Fragment,null,o.a.createElement(w.a,{title:n?o.a.createElement("span",null,i.title):null},o.a.createElement(O,{color:i.color}))):null},N=n(38),q=n(273),M=function(){var t=Object(N.b)();return{toggleEditMode:function(){t({type:q.a})},isEditMode:Object(N.c)((function(t){return t.editMode}))}},P=n(19);function T(t,e,n,r,o,a,i){try{var l=t[a](i),c=l.value}catch(t){return void n(t)}l.done?e(c):Promise.resolve(c).then(r,o)}function z(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return W(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return W(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function W(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var U=function(){var t=Object(P.g)().wordName,e=z(Object(r.useState)(null),2),n=e[0],o=e[1];return Object(r.useEffect)((function(){var e;(e=regeneratorRuntime.mark((function e(){var n,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=9;break}return n="".concat(I.a,"/word/find/").concat(t),e.next=4,fetch(n);case 4:return r=e.sent,e.next=7,r.json();case 7:a=e.sent,o(a);case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(t){T(a,r,o,i,l,"next",t)}function l(t){T(a,r,o,i,l,"throw",t)}i(void 0)}))})()}),[t]),{word:n}},R=n(791),J=n.n(R),$=n(148),F=n(792),B=n.n(F),L=B.a.Paragraph,V=f.a.div.withConfig({displayName:"styles__HighlightedPhrase",componentId:"sc-1isfhnk-0"})(["font-size:18px;font-style:italic;& span{background:#edff00;padding:2px 5px;line-height:1;border-radius:2px;}"]),D=(Object(f.a)(L).withConfig({displayName:"styles__Text",componentId:"sc-1isfhnk-1"})(["margin-bottom:0 !important;display:inline-block;"]),function(t){var e=t.word,n=t.phrase;return o.a.createElement(V,{dangerouslySetInnerHTML:{__html:null==n?void 0:n.replace(e,"<span>".concat(e,"</span>"))}})}),H=f.a.div.withConfig({displayName:"styles__VideoContainer",componentId:"xcq6il-0"})(["display:inline-block;"]),G=f.a.div.withConfig({displayName:"styles__VideoWrapper",componentId:"xcq6il-1"})(["display:flex;align-content:center;align-items:center;"]),K=f.a.div.withConfig({displayName:"styles__VideoBackground",componentId:"xcq6il-2"})(["background:#e8e8e8;padding:20px 5px 20px 5px;text-align:center;border-radius:3px;margin-top:30px;"]),Q=Object(f.a)(s.a).withConfig({displayName:"styles__Arrow",componentId:"xcq6il-3"})(["font-size:35px;color:",";"],(function(t){return t.disabled?"grey":"#d6d6d6"})),X=f.a.video.withConfig({displayName:"styles__Video",componentId:"xcq6il-4"})(["border-radius:5px;width:100% !important;height:auto !important;margin-bottom:10px;min-width:430px;@media (max-width:480px){min-width:100%;}"]);function Y(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Z(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Z(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var tt=function(t){var e,n=t.word,a=Y(Object(r.useState)([]),2),i=a[0],l=a[1],c=Y(u(i),5),d=c[0],s=c[1],f=c[2],p=c[3],m=c[4];if(Object(r.useEffect)((function(){var t="https://www.playphrase.me/api/v1/phrases/search?q=".concat(n);Object($.a)(t).then((function(t){return l(null==t?void 0:t.phrases),t})).catch((function(t){return t}))}),[]),J()(i))return null;var y=i[d]["video-url"],h=null===(e=i[d])||void 0===e?void 0:e.text;return o.a.createElement(K,null,o.a.createElement("div",null,o.a.createElement(G,null,o.a.createElement(Q,{type:"left",onClick:s,disabled:p}),o.a.createElement(H,null,o.a.createElement(X,{src:y,controls:!0})),o.a.createElement(Q,{type:"right",onClick:f,disabled:m})),o.a.createElement(D,{phrase:h,word:n})))},et=n(835),nt=n.n(et),rt=n(783),ot=n(107),at=function(t,e,n){return t?e:n},it=n(289),lt=n(834),ct=n.n(lt),ut=n(218);function dt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return st(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return st(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function st(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ft="Can't fetch a word from Rapid API",pt=n(67),mt=n.n(pt),yt=B.a.Paragraph,ht=Object(f.a)(mt.a).withConfig({displayName:"styles__MoreSynonymsButton",componentId:"pvlrks-0"})(["margin:10px 0;display:block;"]),vt=f.a.div.withConfig({displayName:"styles__WordLabel",componentId:"pvlrks-1"})(["position:relative;margin-top:20px;font-style:italic;&:before{content:'",": ';font-size:13px;position:absolute;top:-20px;color:#335fff;}"],(function(t){return t.title})),bt=Object(f.a)(yt).withConfig({displayName:"styles__Text",componentId:"pvlrks-2"})(["margin-bottom:0 !important;display:inline-block;"]);function gt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return wt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return wt(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var xt=nt.a.CheckableTag,Et=function(t){var e=t.words;return J()(e)?null:o.a.createElement("div",null,e.map((function(t){return o.a.createElement(xt,{checked:!0,key:t},t)})))},It=function(t){var e=t.id,n=t.type,a=t.word,i=t.originalWord,l=t.isEditMode,c=Object(ot.a)(),u=c.visible,d=c.toggleVisible,s=gt(function(t){var e=t.word,n=t.type,o=t.originalWord,a=dt(Object(r.useState)([]),2),i=a[0],l=a[1];return Object(r.useEffect)((function(){var t=ct()(n);j(t,e||o).then((function(t){return t.synonyms&&l(t.synonyms),t})).catch((function(t){ut.a.error("".concat(ft,": ").concat(t))}))}),[]),[i]}({type:n,word:a,originalWord:i}),1)[0];if(!a)return null;var f=Boolean(null==s?void 0:s.length);return o.a.createElement("div",null,o.a.createElement(vt,{title:Object(it.a)(n)},at(l,o.a.createElement(bt,{contentEditable:!0,onInput:function(t){var n={synonym:t.target.textContent};rt.a.updateJSON({wordId:e,wordProps:n})}},a),o.a.createElement("span",null,a))),f&&o.a.createElement(ht,{type:"primary",onClick:function(){return d((function(t){return!t}))}},"See more"),u&&f&&o.a.createElement(Et,{words:s}))},St=n(784),jt=(B.a.Paragraph,f.a.div.withConfig({displayName:"styles__WordWrapper",componentId:"sc-1v5etqc-0"})(["margin:0 auto;margin-bottom:5rem;max-width:550px;width:100%;background:#fff;padding:20px;border-radius:",";box-shadow:",";"],St.a,St.b)),Ot=f.a.div.withConfig({displayName:"styles__Image",componentId:"sc-1v5etqc-1"})(["width:100%;background:url(",") center no-repeat;max-width:300px;height:200px;border-radius:5px;margin:0 auto;display:block;margin-bottom:10px;background-size:contain;"],(function(t){return t.src})),At=f.a.div.withConfig({displayName:"styles__WordProperty",componentId:"sc-1v5etqc-2"})(["margin-bottom:15px;font-size:17px;background:#f5f5f5;padding:2px 5px;"]),_t=f.a.div.withConfig({displayName:"styles__WordLabel",componentId:"sc-1v5etqc-3"})(["position:relative;margin-top:20px;font-style:italic;&:before{content:'",": ';font-size:12px;position:absolute;top:-20px;color:#335fff;}"],(function(t){return t.title})),Ct=Object(f.a)(At).withConfig({displayName:"styles__MainWordProperty",componentId:"sc-1v5etqc-4"})(["display:flex;justify-content:center;align-items:center;text-transform:capitalize;font-weight:500;font-size:25px;margin-bottom:0;background:#fff;"]),kt=Object(f.a)(At).withConfig({displayName:"styles__TranslateProperty",componentId:"sc-1v5etqc-5"})(["display:flex;justify-content:center;text-transform:capitalize;font-size:20px;color:grey;background:#fff;"]),Nt=f.a.div.withConfig({displayName:"styles__WordPage",componentId:"sc-1v5etqc-6"})(["display:flex;"]),qt=f.a.div.withConfig({displayName:"styles__ImageWithFrequency",componentId:"sc-1v5etqc-7"})(["position:relative;margin:0 auto;max-width:300px;"]),Mt=f.a.div.withConfig({displayName:"styles__FrequencyWrapper",componentId:"sc-1v5etqc-8"})(["width:20px;height:20px;background:#abc0f3;display:inline-block;border-radius:50%;position:absolute;top:5px;right:5px;"]),Pt=f.a.div.withConfig({displayName:"styles__MoreExamplesWrapper",componentId:"sc-1v5etqc-9"})(["margin-top:5px;"]),Tt=f.a.div.withConfig({displayName:"styles__Text",componentId:"sc-1v5etqc-10"})(["margin-bottom:0 !important;display:inline-block;"]),zt=f.a.div.withConfig({displayName:"styles__WordPronunciationWrapper",componentId:"sc-1v5etqc-11"})(["position:absolute;bottom:2px;padding:5px;padding-bottom:2px;border-bottom-left-radius:0;border-bottom-right-radius:3px;border-top-right-radius:0;right:2px;font-size:17px;"]),Wt=f.a.label.withConfig({displayName:"styles__ImageUpdate",componentId:"sc-1v5etqc-12"})(["position:absolute;top:0;background:#00000080;width:300px;height:200px;display:flex;align-items:center;justify-content:center;color:#fff;cursor:pointer;"]),Ut=f.a.input.withConfig({displayName:"styles__Input",componentId:"sc-1v5etqc-13"})(["display:none;"]),Rt=Object(f.a)(s.a).withConfig({displayName:"styles__Arrow",componentId:"sc-1v5etqc-14"})(["font-size:35px;color:",";z-index:1;position:fixed;top:48%;"],(function(t){return t.disabled?"#d6d6d6":"grey"})),Jt=(Object(f.a)(Rt).withConfig({displayName:"styles__ArrowLeft",componentId:"sc-1v5etqc-15"})(["left:1rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"})),Object(f.a)(Rt).withConfig({displayName:"styles__ArrowRight",componentId:"sc-1v5etqc-16"})(["right:7rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"})),function(t){var e=t.id,n=t.word,r=t.synonym,a=M().isEditMode;return r&&o.a.createElement(At,null,o.a.createElement(It,{id:e,word:r,type:"synonym",originalWord:n,isEditMode:a}))}),$t=function(t){var e=t.id,n=t.context,r=t.word,a=M().isEditMode;return o.a.createElement(At,null,o.a.createElement(_t,{title:"Context"},at(a,o.a.createElement(Tt,{contentEditable:!0,onInput:function(t){var n={context:t.target.textContent};rt.a.updateJSON({wordId:e,wordProps:n})}},n),o.a.createElement(D,{phrase:n,word:r}))))},Ft=n(804),Bt=n.n(Ft),Lt=n(803),Vt=n.n(Lt),Dt=Object(f.a)(Vt.a).withConfig({displayName:"styles__Alert",componentId:"sc-1ntum59-0"})(["margin-bottom:15px;"]);function Ht(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Gt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Gt(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Kt=function(t){var e=t.examples;return r.Children.toArray(e.filter((function(t,e){return e<5})).map((function(t){return o.a.createElement(Dt,{type:"info",message:o.a.createElement("div",null,t)})})))},Qt=function(t){var e=t.word,n=Ht(Object(r.useState)(null),2),a=n[0],i=n[1];return Object(r.useEffect)((function(){j("examples",e).then((function(t){return t.examples&&i(t.examples),t})).catch((function(t){return t}))}),[]),at(Boolean(null==a?void 0:a.length),o.a.createElement(Bt.a,{icon:null,placement:"bottom",title:o.a.createElement(Kt,{examples:a})},o.a.createElement(mt.a,{type:"primary"},"Show more examples")),null)},Xt=function(t){var e=t.id,n=t.word,r=t.example,a=M().isEditMode;return o.a.createElement(At,null,o.a.createElement(_t,{title:"Example"},at(a,o.a.createElement(Tt,{contentEditable:!0,onInput:function(t){var n={example:t.target.textContent};rt.a.updateJSON({wordId:e,wordProps:n})}},r),o.a.createElement(D,{phrase:r,word:n}))),o.a.createElement(Pt,null,o.a.createElement(Qt,{word:n})))},Yt=function(t){var e=t.id,n=t.translate,r=M().isEditMode;return o.a.createElement(kt,null,at(r,o.a.createElement(Tt,{contentEditable:!0,onInput:function(t){var n={translate:t.target.textContent};rt.a.updateJSON({wordId:e,wordProps:n})}},n),o.a.createElement("span",null,n)))},Zt=f.a.div.withConfig({displayName:"styles__ButtonWrapper",componentId:"sc-6zz5q1-0"})(["position:fixed;right:15px;bottom:20px;@media (max-width:480px){display:none;}"]),te=function(){var t=M().toggleEditMode;return o.a.createElement(Zt,{type:"button",onClick:t},o.a.createElement(mt.a,{type:"primary"},"Edit"))};function ee(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return ne(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ne(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ne(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var re=function(t){var e=t.definitions;return r.Children.toArray(e.filter((function(t,e){return e<5})).map((function(t){return o.a.createElement(Vt.a,{type:"info",message:o.a.createElement("div",null,t.definition)})})))},oe=function(t){var e=t.word,n=ee(Object(r.useState)(null),2),a=n[0],i=n[1];return Object(r.useEffect)((function(){j("definitions",e).then((function(t){return t.definitions&&i(t.definitions),t})).catch((function(t){return t}))}),[]),at(Boolean(null==a?void 0:a.length),o.a.createElement(Bt.a,{icon:null,placement:"bottom",title:o.a.createElement(re,{definitions:a})},o.a.createElement(mt.a,{type:"primary"},"Show more definitions")),null)},ae=function(t){var e=t.id,n=t.word,r=t.definition,a=M().isEditMode;return o.a.createElement(At,null,o.a.createElement(_t,{title:"Definition"},at(a,o.a.createElement(Tt,{contentEditable:!0,onInput:function(t){var n={definition:t.target.textContent};rt.a.updateJSON({wordId:e,wordProps:n})}},r),o.a.createElement("span",null,r))),o.a.createElement(Pt,null,o.a.createElement(oe,{word:n})))},ie=n(163),le=n.n(ie);function ce(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=t[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return ue(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ue(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ue(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var de="Can't upload file",se=function(t){var e=t.id;return o.a.createElement(o.a.Fragment,null,o.a.createElement(Ut,{type:"file",id:"imageSrc",name:"imageSrc",onChange:function(t){var n,r=new FormData,o=null==t||null===(n=t.target)||void 0===n?void 0:n.files;if(o&&o.length){var a=ce(o,1)[0];r.append("imageSrc",a),rt.a.update({wordId:e,body:r})}else le.a.error(de)}}),o.a.createElement(Wt,{htmlFor:"imageSrc"},o.a.createElement("span",null,"Update image")))},fe=function(t){var e=t.id,n=t.word,r=M().isEditMode;return o.a.createElement(Ct,null,at(r,o.a.createElement(Tt,{contentEditable:!0,onInput:function(t){var n={word:t.target.textContent};rt.a.updateJSON({wordId:e,wordProps:n})}},n),o.a.createElement("span",null,n)))},pe=n(790),me=function(){var t=M().isEditMode,e=U().word;return e?o.a.createElement(o.a.Fragment,null,o.a.createElement(b,{dots:!1},e.map((function(e){var n=e.id,r=e.word,a=e.translate,i=e.definition,l=e.context,c=e.example,u=e.synonym,d=e.imageSrc;return o.a.createElement("div",{key:n},o.a.createElement(Nt,null,o.a.createElement(jt,null,o.a.createElement(qt,null,o.a.createElement(Ot,{src:d,alt:r}),t&&o.a.createElement(se,{id:n}),o.a.createElement(Mt,null,o.a.createElement(k,{showTitle:!0,word:r})),o.a.createElement(zt,null,o.a.createElement(pe.a,{word:r}))),r&&o.a.createElement(fe,{id:n,word:r}),a&&o.a.createElement(Yt,{id:n,translate:a}),l&&o.a.createElement($t,{id:n,word:r,context:l}),i&&o.a.createElement(ae,{id:n,definition:i,word:r}),c&&o.a.createElement(Xt,{id:n,example:c,word:r}),u&&o.a.createElement(Jt,{id:n,word:r,synonym:u}),o.a.createElement(tt,{word:r}))))}))),o.a.createElement(te,null)):null};e.default=me}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,