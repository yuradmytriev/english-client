(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{783:function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r=n(163),a=n.n(r),o=n(52);function i(e,t,n,r,a,o,i){try{var c=e[o](i),l=c.value}catch(e){return void n(e)}c.done?t(l):Promise.resolve(l).then(r,a)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l="Can't upload image",u=function(e){return"".concat(o.a,"/words/").concat(e)},s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r,o,s;return t=e,n=null,r=[{key:"update",value:function(e){var t=e.wordId,n=e.body;fetch(u(t),{body:n,method:"PUT"}).then((function(e){return e.json()})).then((function(e){return e.id&&a.a.success("Image updated successfully"),e})).catch((function(){a.a.error(l)}))}},{key:"updateJSON",value:function(e){var t=e.wordId,n=e.wordProps,r=JSON.stringify(n);return fetch(u(t),{body:r,method:"PUT",headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){return e})).catch((function(){a.a.error(l)}))}},{key:"delete",value:(o=regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(u(t),{method:"DELETE"});case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})),s=function(){var e=this,t=arguments;return new Promise((function(n,r){var a=o.apply(e,t);function c(e){i(a,n,r,c,l,"next",e)}function l(e){i(a,n,r,c,l,"throw",e)}c(void 0)}))},function(e){return s.apply(this,arguments)})}],n&&c(t.prototype,n),r&&c(t,r),e}()},784:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}));var r="0 3px 6px 0 rgba(0,0,0,0.12), 0 0 1px 0 rgba(0,0,0,0.12)",a="4px"},789:function(e,t,n){var r=n(226),a=n(796);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},796:function(e,t,n){(t=n(227)(!1)).push([e.i,".item-enter {\n    opacity: 0;\n}\n.item-enter-active {\n    opacity: 1;\n    transition: opacity 400ms ease-in;\n}\n.item-exit {\n    opacity: 1;\n}\n.item-exit-active {\n    opacity: 0;\n    transition: opacity 400ms ease-in;\n}\n",""]),e.exports=t},860:function(e,t){},866:function(e,t,n){"use strict";n.r(t),n.d(t,"Words",(function(){return Je}));var r=n(795),a=n.n(r),o=n(0),i=n.n(o),c=n(863),l=n(839),u=n(868),s=n(869),d=n(791),f=n.n(d),p=n(852),m=n.n(p),y=n(123),h=function(e){var t=e.id,n=e.children,r=e.categoryId;return i.a.createElement("div",{draggable:!0,onDragStart:function(e){return e.dataTransfer?(e.dataTransfer.setData("id",t),r&&e.dataTransfer.setData("categoryId",String(r)),null):null}},n)},v=n(317),g=n(24),w=n.n(g),b=n(783),E=n(38),x=n(273),I=function(){var e=Object(E.b)();return{fetchWordsOffset:function(t){e(Object(x.b)(t))},wordsOffset:Object(E.c)((function(e){return e.wordsOffset}))}},O=n(840),j=n.n(O),W=n(17),C=n(784),S=j.a.Meta,_=W.a.div.withConfig({displayName:"styles__CardBody",componentId:"sc-1paq1cz-0"})(["display:flex;justify-content:space-between;"]),A=W.a.div.withConfig({displayName:"styles__CardImage",componentId:"sc-1paq1cz-1"})(["border-radius:5px;width:150px;height:100px;display:block;background:url(",") center no-repeat;background-size:contain;"],(function(e){return e.img})),k=Object(W.a)(S).withConfig({displayName:"styles__Meta",componentId:"sc-1paq1cz-2"})(["border-radius:5px;width:200px;& .ant-card-meta-title{font-size:20px;margin-bottom:0 !important;}& .ant-card-meta-description{font-size:18px;}"]),N=Object(W.a)(j.a).withConfig({displayName:"styles__WordCard",componentId:"sc-1paq1cz-3"})(["box-shadow:",";border:none !important;& .ant-card-body{height:170px;}"],C.b),z=W.a.div.withConfig({displayName:"styles__IconWrapper",componentId:"sc-1paq1cz-4"})(["color:red;font-size:18px;display:inline-block;cursor:pointer;"]),D=W.a.div.withConfig({displayName:"styles__DeleteWrapper",componentId:"sc-1paq1cz-5"})(["color:#ff3c3c;cursor:pointer;transition:0.5s;&:hover{color:#cc0000;transform:scale(1.1);}& span{margin-left:5px;}"]),P=Object(W.a)(D).withConfig({displayName:"styles__MemorizedWrapper",componentId:"sc-1paq1cz-6"})(["color:#5f5fff;margin-top:10px;&:hover{color:#00009e;}"]),L=Object(W.a)(D).withConfig({displayName:"styles__ForgotWrapper",componentId:"sc-1paq1cz-7"})(["color:#e8a000;margin-top:10px;&:hover{color:#b57d00;}"]);function M(e,t,n,r,a,o,i){try{var c=e[o](i),l=c.value}catch(e){return void n(e)}c.done?t(l):Promise.resolve(l).then(r,a)}function T(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){M(o,r,a,i,c,"next",e)}function c(e){M(o,r,a,i,c,"throw",e)}i(void 0)}))}}var R=function(e){var t=e.id,n=I().fetchWordsOffset,r=function(){var e=T(regeneratorRuntime.mark((function e(r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r.stopPropagation(),e.next=3,b.a.delete(t);case 3:e.sent&&n(0);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return i.a.createElement(D,{onClick:r},i.a.createElement(w.a,{type:"delete"}),i.a.createElement("span",null,"Delete"))},F=function(e){var t=e.id,n=I().fetchWordsOffset,r=function(){var e=T(regeneratorRuntime.mark((function e(r){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r.stopPropagation(),a={learned:!0},e.next=4,b.a.updateJSON({wordId:t,wordProps:a});case 4:e.sent.id&&n(0);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return i.a.createElement(P,{onClick:r},i.a.createElement(w.a,{type:"bulb"}),i.a.createElement("span",null,"Memorized"))},U=function(e){var t=e.id,n=I().fetchWordsOffset,r=function(){var e=T(regeneratorRuntime.mark((function e(r){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r.stopPropagation(),a={learned:!1},e.next=4,b.a.updateJSON({wordId:t,wordProps:a});case 4:e.sent.id&&n(0);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return i.a.createElement(L,{onClick:r},i.a.createElement(w.a,{type:"reload"}),i.a.createElement("span",null,"Forgot"))},q=function(e){var t=e.wordInfo.id;return i.a.createElement(i.a.Fragment,null,i.a.createElement(R,{id:t}),i.a.createElement(F,{id:t}),i.a.createElement(U,{id:t}))},J=function(e){var t=e.word,n=e.learned;return i.a.createElement("div",null,t," ",n&&i.a.createElement(w.a,{style:{color:"#18d218"},type:"check"}))},B=function(e){var t=e.wordInfo,n=Object(v.a)().showWordsInfo,r=t.id,a=t.word,o=t.translate,c=t.imageSrc,l=t.learned,u=t.category,s="word/".concat(a);return i.a.createElement(h,{key:r,id:String(r),categoryId:null==u?void 0:u.id},i.a.createElement(y.b,{to:s},i.a.createElement(N,null,i.a.createElement(_,null,i.a.createElement("div",null,i.a.createElement(k,{title:i.a.createElement(J,{word:a,learned:l}),description:n?o:null}),i.a.createElement(z,null,i.a.createElement(m.a,{trigger:"click",placement:"bottom",content:i.a.createElement(q,{wordInfo:t})},i.a.createElement("div",null,". . .")))),n&&i.a.createElement(A,{img:c,alt:a})))))},$=W.a.div.withConfig({displayName:"styles__DropContainer",componentId:"mcgme-0"})(["padding:10px;"]),G=function(e){var t=e.children,n=e.onDropEnd;return i.a.createElement($,{onDrop:function(e){var t=e.dataTransfer.getData("id"),r=e.dataTransfer.getData("categoryId");n(t,r)},onDragOver:function(e){e.preventDefault()}},t)},V=W.a.div.withConfig({displayName:"styles__WordContainer",componentId:"h1pwr5-0"})(["margin-bottom:1rem;box-shadow:",";"],(function(e){return e.areSeveralWords?"0 1px 1px rgba(0, 0, 0, 0.15), 0 10px 0px -5px #fff,0 10px 1px -4px rgba(0, 0, 0, 0.15), 0 20px 0 -10px #fff,0 20px 1px -9px rgba(0, 0, 0, 0.15);":"none"})),H=function(e){var t=e.children,n=e.areSeveralWords;return i.a.createElement(V,{areSeveralWords:n},t)},K=n(853),Q=n.n(K),X=n(235),Y=(n(789),n(794)),Z=n.n(Y),ee=Object(W.a)(Z.a).withConfig({displayName:"styles__WordsWrapper",componentId:"nliyug-0"})(["display:flex;flex-wrap:wrap;"]),te=W.a.div.withConfig({displayName:"styles__CategoriesLayout",componentId:"nliyug-1"})(["display:flex;flex-wrap:wrap;margin:5px;"]),ne=W.a.div.withConfig({displayName:"styles__CategoryWrapper",componentId:"nliyug-2"})(["max-width:367px;margin:8px;& > .ant-collapse{box-shadow:",";}"],C.b),re=Q.a.Panel,ae=function(e){return e.words.map((function(e){return i.a.createElement(a.a,{key:e.id,xs:24,sm:24,md:24,lg:24,xl:24},i.a.createElement(H,{areSeveralWords:!1},i.a.createElement(B,{wordInfo:e})))}))},oe=function(e){var t=e.id,n=Object(X.a)().deleteCategory;return i.a.createElement(w.a,{type:"close",onClick:function(e){e.stopPropagation(),n(t)}})},ie=function(){var e=Object(X.a)(),t=e.categories,n=e.fetchCategories,r=e.linkCategories;Object(o.useEffect)((function(){n()}),[]);return t.length?i.a.createElement(te,null,i.a.createElement(s.a,{style:{width:"100%"}},t.map((function(e){var t=e.id,n=e.name,a=e.words;return i.a.createElement(u.a,{key:t,timeout:250,classNames:"item"},i.a.createElement(ne,{key:t},i.a.createElement(Q.a,{bordered:!1,expandIconPosition:"left"},i.a.createElement(re,{key:t,header:n,extra:i.a.createElement(oe,{id:t})},i.a.createElement(G,{onDropEnd:function(e){return function(e){var t=e.wordId,n=e.categoryId;r(t,n)}({wordId:String(e),categoryId:String(t)})}},i.a.createElement(ee,{gutter:12},!!a.length&&i.a.createElement(ae,{words:a})))))))})))):null},ce=n(148);function le(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ue(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var se=function(e){var t=le(Object(o.useState)(0),2),n=t[0],r=t[1];return Object(o.useEffect)((function(){Object(ce.a)(e).then(r)})),[n]},de=n(52),fe=n(857),pe=n.n(fe),me="ALL",ye="LEARNED",he="UNLEARNED";function ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ge=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"getFilter",value:function(){return window.localStorage.getItem("filter")}},{key:"setFilter",value:function(e){window.localStorage.setItem("filter",e)}}],(n=null)&&ve(t.prototype,n),r&&ve(t,r),e}(),we=W.a.div.withConfig({displayName:"styles__FilterWordsWrapper",componentId:"sc-1jtwhtj-0"})(["margin-bottom:10px;margin-top:10px;margin-left:10px;"]),be=me,Ee=ye,xe=he,Ie=function(e){var t=e.showMemoizedWords,n=e.showUnlearnedWords,r=e.showAllWords,a=ge.getFilter()||be;return i.a.createElement(we,null,i.a.createElement(pe.a.Group,{buttonStyle:"solid",onChange:function(e){var a,o=null==e||null===(a=e.target)||void 0===a?void 0:a.value;({ALL:r,LEARNED:t,UNLEARNED:n})[o]()},defaultValue:a},i.a.createElement(pe.a.Button,{value:be},"All"),i.a.createElement(pe.a.Button,{value:Ee},"Memoized"),i.a.createElement(pe.a.Button,{value:xe},"Unlearned")))};function Oe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return je(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return je(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function je(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var We=me,Ce=ye,Se=he,_e=function(e,t){switch(t.type){case We:return t.data;case Ce:return t.data.filter((function(e){return e.learned}));case Se:return t.data.filter((function(e){return!e.learned}));default:throw e}},Ae=function(e){var t=Oe(Object(o.useReducer)(_e,e),2),n=t[0],r=t[1];!function(e,t){Object(o.useEffect)((function(){var n=ge.getFilter();e(n?{type:n,data:t}:{type:We,data:t})}),[t.length])}(r,e);return{filteredWords:n,showMemoizedWords:function(e){ge.setFilter(Ce),r({type:Ce,data:e})},showUnlearnedWords:function(e){ge.setFilter(Se),r({type:Se,data:e})},showAllWords:function(e){ge.setFilter(We),r({type:We,data:e})},setWords:function(e){var t=ge.getFilter();t&&r({type:t,data:e})}}},ke=(n(860),W.a.div.withConfig({displayName:"styles__LearnedWords",componentId:"sc-91z9mo-0"})(["color:#001529;font-size:16px;"])),Ne=Object(o.memo)((function(e){var t=e.words;return i.a.createElement(ke,null,"Words: ".concat(t))})),ze=W.a.span.withConfig({displayName:"styles__LearnedWords",componentId:"sc-1m2f0jl-0"})(["color:#001529;font-size:16px;"]);function De(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Pe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Pe(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Le=function(){var e=De(se("".concat(de.a,"/words/count/learned")),1)[0];return i.a.createElement(ze,null,"Learned Words: ".concat(e))},Me=Object(W.a)(Z.a).withConfig({displayName:"styles__WordWrapper",componentId:"sc-1wa8yzp-0"})(["display:flex;flex-wrap:wrap;"]),Te=W.a.div.withConfig({displayName:"styles__LearnedWordsLayout",componentId:"sc-1wa8yzp-1"})(["display:flex;justify-content:space-between;"]),Re=W.a.div.withConfig({displayName:"styles__WordsCountContainer",componentId:"sc-1wa8yzp-2"})(["margin-top:5px;margin-right:10px;@media (max-width:480px){display:none;}"]);function Fe(e,t,n,r,a,o,i){try{var c=e[o](i),l=c.value}catch(e){return void n(e)}c.done?t(l):Promise.resolve(l).then(r,a)}function Ue(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return qe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return qe(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Je=Object(o.memo)((function(){var e=Object(X.a)(),t=e.categories,n=e.unlinkCategories,r=Ue(se("".concat(de.a,"/words/count")),1)[0],d=I(),p=d.wordsOffset,m=d.fetchWordsOffset,y=p.filter((function(e){return!e.category})),h=Ae(p),v=h.setWords,g=h.filteredWords,w=h.showAllWords,b=h.showMemoizedWords,E=h.showUnlearnedWords;!function(e){var t=Ue(Object(o.useState)(0),2),n=t[0],r=t[1],a=I().fetchWordsOffset;Object(o.useEffect)((function(){e.length<10&&(a(n),setTimeout((function(){return r(n+1)}),100))}),[n])}(g),Object(c.a)((function(){m(0),v(y)}),[p,t]);var x=function(){var e,t=(e=regeneratorRuntime.mark((function e(t,r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!r){e.next=3;break}return e.next=3,n(t,r);case 3:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Fe(o,r,a,i,c,"next",e)}function c(e){Fe(o,r,a,i,c,"throw",e)}i(void 0)}))});return function(e,n){return t.apply(this,arguments)}}();return i.a.createElement(i.a.Fragment,null,i.a.createElement(Te,null,i.a.createElement(Ie,{showAllWords:function(){return w(y)},showMemoizedWords:function(){return b(y)},showUnlearnedWords:function(){return E(y)}}),i.a.createElement(Re,null,!f()(p)&&i.a.createElement(Ne,{words:r}),!f()(p)&&i.a.createElement(Le,null))),i.a.createElement(ie,null),i.a.createElement(G,{onDropEnd:function(e,t){return x(e,t)}},i.a.createElement(Me,{gutter:12},i.a.createElement(s.a,{style:{width:"100%"}},i.a.createElement(l.a,{dataLength:p.length,next:function(){m(Math.ceil(p.length/20))},hasMore:p.length!==r,loader:i.a.createElement("h4",null,"Loading...")},!f()(p)&&g.map((function(e){return i.a.createElement(u.a,{key:e.id,timeout:500,classNames:"item"},i.a.createElement(a.a,{key:e.id,xs:24,sm:24,md:8,lg:8,xl:6},i.a.createElement(H,{areSeveralWords:!1},i.a.createElement(B,{wordInfo:e}))))})))))))}));t.default=Je}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,