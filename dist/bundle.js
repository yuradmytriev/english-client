!function(e){function t(t){for(var r,i,c=t[0],u=t[1],l=t[2],f=0,d=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&d.push(o[i][0]),o[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(s&&s(t);d.length;)d.shift()();return a.push.apply(a,l||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],r=!0,c=1;c<n.length;c++){var u=n[c];0!==o[u]&&(r=!1)}r&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},o={2:0},a=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.e=function(e){var t=[],n=o[e];if(0!==n)if(n)t.push(n[2]);else{var r=new Promise((function(t,r){n=o[e]=[t,r]}));t.push(n[2]=r);var a,c=document.createElement("script");c.charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.src=function(e){return i.p+""+e+".bundle.js"}(e);var u=new Error;a=function(t){c.onerror=c.onload=null,clearTimeout(l);var n=o[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\n("+r+": "+a+")",u.name="ChunkLoadError",u.type=r,u.request=a,n[1](u)}o[e]=void 0}};var l=setTimeout((function(){a({type:"timeout",target:c})}),12e4);c.onerror=c.onload=a,document.head.appendChild(c)}return Promise.all(t)},i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i.oe=function(e){throw console.error(e),e};var c=window.webpackJsonp=window.webpackJsonp||[],u=c.push.bind(c);c.push=t,c=c.slice();for(var l=0;l<c.length;l++)t(c[l]);var s=u;a.push([347,3]),n()}({107:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return d}));var r=n(0);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=function(){var e=o(Object(r.useState)(!1),2),t=e[0],n=e[1];return{visible:t,openModal:function(){return n(!0)},closeModal:function(){return n(!1)},toggleVisible:n}},c=n(321),u=n.n(c),l=n(218),s="Voice reader successfully downloaded!",f="Cannot download voice reader",d=function(){Object(r.useEffect)((function(){var e=u()("https://code.responsivevoice.org/responsivevoice.js?key=8me9wqCF",{returnPromise:!0});window.responsiveVoice||e.then((function(e){return l.a.success(s),e})).catch((function(){l.a.error(f)}))}),[])}},148:function(e,t,n){"use strict";function r(e,t,n,r,o,a,i){try{var c=e[a](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}n.d(t,"a",(function(){return o}));var o=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(t);case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(o,a){var i=e.apply(t,n);function c(e){r(i,o,a,c,u,"next",e)}function u(e){r(i,o,a,c,u,"throw",e)}c(void 0)}))});return function(e){return t.apply(this,arguments)}}()},156:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r="TOGGLE_WORDS_INFO"},157:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return a}));var r=n(94),o=function(e){return{type:r.a,words:e}},a=function(){return{type:r.b}}},218:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r={success:function(e){console.info(e)},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){console.error(e)}))}},235:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(38),o=n(77),a=function(){var e=Object(r.b)();return{categories:Object(r.c)((function(e){return e.categories})),deleteCategory:function(t){e(Object(o.b)(t))},linkCategories:function(t,n){e(Object(o.d)({id:t,categoryId:n}))},createCategory:function(t){e(Object(o.a)(t))},fetchCategories:function(){e(Object(o.e)())},unlinkCategories:function(t,n){e(Object(o.f)({id:t,categoryId:n}))}}}},272:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r="".concat("WORD:","TOGGLE_EDIT_MODE")},273:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return a}));var r=n(95),o=function(e){return{type:r.a,words:e}},a=function(e){return{type:r.b,offset:e}}},288:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(e){var t=e.toLowerCase();return t.charAt(0).toUpperCase()+t.slice(1)}},289:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(38),o=n(157),a=function(){var e=Object(r.b)();return{fetchWords:function(){e(Object(o.b)())},words:Object(r.c)((function(e){return e.words}))}}},30:function(e,t,n){"use strict";n.d(t,"c",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"d",(function(){return i})),n.d(t,"f",(function(){return c})),n.d(t,"e",(function(){return u}));var r="".concat("CATEGORIES:","GET"),o="".concat("CATEGORIES:","DELETE"),a="".concat("CATEGORIES:","CREATE"),i="".concat("CATEGORIES:","LINK"),c="".concat("CATEGORIES:","UNLINK"),u="".concat("CATEGORIES:","REQUEST")},317:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(38),o=n(156),a=function(){var e=Object(r.b)();return{toggleWordsInfo:function(){e({type:o.a})},showWordsInfo:Object(r.c)((function(e){return e.showWordsInfo}))}}},347:function(e,t,n){n(348),n(351),e.exports=n(779)},52:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r="https://english-m.herokuapp.com"},558:function(e,t,n){var r=n(226),o=n(559);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},559:function(e,t,n){(t=n(227)(!1)).push([e.i,".ant-popover-message-title {\n  padding-left: 0;\n}\n\n.ant-popover-buttons {\n  display: none;\n}\n\n.ant-popover-message-title div {\n  margin-bottom: 15px;\n}\n\n.ant-popover-message-title div:last-child {\n  margin-bottom: 0;\n}\n\nbody {\n  background-color: #c5eaff;\n}\n\n#root {\n  min-height: 100%;\n}\n\n\n\n\n",""]),e.exports=t},702:function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=702},77:function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"f",(function(){return a})),n.d(t,"d",(function(){return i})),n.d(t,"e",(function(){return c})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return l}));var r=n(30),o=function(e){return{type:r.c,categories:e}},a=function(e){return{type:r.f,payload:e}},i=function(e){return{type:r.d,payload:e}},c=function(){return{type:r.e}},u=function(e){return{type:r.a,name:e}},l=function(e){return{type:r.b,id:e}}},779:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(12),i=n.n(a),c=(n(556),n(558),n(38)),u=n(328),l=n(76),s={words:[],categories:[],wordsOffset:[],editMode:!1,showWordsInfo:!0},f=n(272),d=function(e,t){switch(t.type){case f.a:return!e;default:return e}},p=n(30),m=function(e,t){var n=t.type,r=t.categories;switch(n){case p.c:return r;default:return e}},y=n(156),b=function(e,t){switch(t.type){case y.a:return!e;default:return e}},h=n(15),g=n(52),v=n(157),w=n(94),x=regeneratorRuntime.mark(E),O=regeneratorRuntime.mark(j);function E(){var e,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Object(h.b)((function(){return fetch("".concat(g.a,"/words"))}));case 2:return e=n.sent,n.next=5,e.json();case 5:return t=n.sent,n.next=8,Object(h.c)(Object(v.a)(t));case 8:case"end":return n.stop()}}),x)}function j(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(h.d)(w.b,E);case 2:case"end":return e.stop()}}),O)}function S(e){return function(e){if(Array.isArray(e))return C(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return C(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var k=[],I=function(e,t){var n=t.type,r=t.words;switch(n){case w.a:return[].concat(k,S(r));default:return e}},A=n(273),_=n(95),T=regeneratorRuntime.mark(P),R=regeneratorRuntime.mark(N);function P(e){var t,n,r;return regeneratorRuntime.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return t=e.offset,o.next=3,Object(h.b)((function(){return fetch("".concat(g.a,"/words/offset/").concat(t))}));case 3:return n=o.sent,o.next=6,n.json();case 6:return r=o.sent,o.next=9,Object(h.c)(Object(A.a)(r.data));case 9:case"end":return o.stop()}}),T)}function N(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(h.d)(_.b,P);case 2:case"end":return e.stop()}}),R)}var W=n(320),M=n.n(W);function F(e){return function(e){if(Array.isArray(e))return D(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return D(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return D(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var L=function(e,t){var n=t.type,r=t.words;switch(n){case _.a:return M()([].concat(F(r),F(e)),(function(e){return e.id})).sort((function(e,t){return t.id-e.id}));default:return e}},U="".concat("WORDS:","ADD_NEW"),z=regeneratorRuntime.mark(G),q=regeneratorRuntime.mark(V);function G(e){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,!1;case 2:case"end":return e.stop()}}),z)}function V(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(h.d)(U,G);case 2:case"end":return e.stop()}}),q)}var $=n(148);function H(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function J(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?H(Object(n),!0).forEach((function(t){Q(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):H(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var K="".concat(g.a,"/categories"),X=function(e){return"".concat(g.a,"/words/category/").concat(e)},Y={method:"post",headers:{"Content-Type":"application/json;charset=utf-8"}},Z=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"fetch",value:function(){return Object($.a)(K)}},{key:"create",value:function(e){return fetch(K,J(J({},Y),{},{body:JSON.stringify({name:e})}))}},{key:"delete",value:function(e){return fetch("".concat(K,"/").concat(e),{method:"delete"})}},{key:"linkWordToCategory",value:function(e,t){return fetch(X(t),J(J({},Y),{},{body:JSON.stringify({id:e})}))}},{key:"unlinkWordFromCategory",value:function(e,t){return fetch(X(t),J(J({},Y),{},{method:"delete",body:JSON.stringify({id:e})}))}}],(n=null)&&B(t.prototype,n),r&&B(t,r),e}(),ee=n(77),te=regeneratorRuntime.mark(ce),ne=regeneratorRuntime.mark(ue),re=regeneratorRuntime.mark(le),oe=regeneratorRuntime.mark(se),ae=regeneratorRuntime.mark(fe),ie=regeneratorRuntime.mark(de);function ce(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Object(h.b)((function(){return Z.fetch()}));case 2:return e=t.sent,t.next=5,Object(h.c)(Object(ee.c)(e));case 5:case"end":return t.stop()}}),te)}function ue(e){var t,n,r;return regeneratorRuntime.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return t=e.payload,n=t.id,r=t.categoryId,o.next=3,Object(h.b)((function(){return Z.unlinkWordFromCategory(n,r)}));case 3:return o.next=5,ce();case 5:case"end":return o.stop()}}),ne)}function le(e){var t,n,r;return regeneratorRuntime.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return t=e.payload,n=t.id,r=t.categoryId,o.next=3,Object(h.b)((function(){return Z.linkWordToCategory(n,r)}));case 3:return o.next=5,ce();case 5:case"end":return o.stop()}}),re)}function se(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.name,n.next=3,Object(h.b)((function(){return Z.create(t)}));case 3:return n.next=5,ce();case 5:case"end":return n.stop()}}),oe)}function fe(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.id,n.next=3,Object(h.b)((function(){return Z.delete(t)}));case 3:return n.next=5,ce();case 5:case"end":return n.stop()}}),ae)}function de(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(h.d)(p.d,le);case 2:return e.next=4,Object(h.d)(p.a,se);case 4:return e.next=6,Object(h.d)(p.b,fe);case 6:return e.next=8,Object(h.d)(p.e,ce);case 8:return e.next=10,Object(h.d)(p.f,ue);case 10:case"end":return e.stop()}}),ie)}var pe=regeneratorRuntime.mark(me);function me(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(h.a)([j(),N(),V(),de()]);case 2:case"end":return e.stop()}}),pe)}n(643).default();var ye=Object(u.a)(),be=[ye],he=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||l.c,ge=Object(l.d)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=e.words,n=e.wordsOffset,r=e.editMode,o=e.categories,a=e.showWordsInfo,i=arguments.length>1?arguments[1]:void 0;return{words:I(t,i),editMode:d(r,i),showWordsInfo:b(a,i),categories:m(o,i),wordsOffset:L(n,i)}}),s,he(l.a.apply(void 0,be)));ye.run(me);var ve=ge,we=n(107),xe=n(123),Oe=n(19),Ee=n(160),je=n.n(Ee),Se=n(67),Ce=n.n(Se),ke=n(24),Ie=n.n(ke),Ae=n(163),_e=n.n(Ae),Te=n(109),Re=n.n(Te),Pe=n(108),Ne=n.n(Pe),We=n(161),Me=n(288),Fe=n(289);function De(e){return function(e){if(Array.isArray(e))return ze(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Ue(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||Ue(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ue(e,t){if(e){if("string"==typeof e)return ze(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ze(e,t):void 0}}function ze(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var qe=n(17),Ge=qe.a.input.withConfig({displayName:"styles__Input",componentId:"dxzk82-0"})(["&{border:0;clip:rect(0,0,0,0);height:1px;overflow:hidden;padding:0;position:absolute !important;white-space:nowrap;width:1px;}& + label{position:relative;font-weight:400;white-space:nowrap;text-align:center;box-shadow:0 2px 0 rgba(0,0,0,0.015);cursor:pointer;transition:all 0.3s cubic-bezier(0.645,0.045,0.355,1);user-select:none;touch-action:manipulation;padding:8px 15px;font-size:14px;border-radius:4px;color:rgba(0,0,0,0.65);height:105px;width:100%;align-items:center;background-color:#fafafa;border:1px dashed #d9d9d9;margin-bottom:15px;display:flex;justify-content:center;align-items:center;flex-direction:column;color:#868181;}"]),Ve=Object(qe.a)(Ie.a).withConfig({displayName:"styles__PlusIcon",componentId:"dxzk82-1"})(["font-size:40px;"]);function $e(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return He(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return He(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function He(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Je=function(e){var t=e.setFieldValue;return o.a.createElement(o.a.Fragment,null,o.a.createElement(Ge,{type:"file",id:"imageSrc",name:"imageSrc",onChange:function(e){var n;if(null===(n=e.target)||void 0===n?void 0:n.files){var r=$e(e.target.files,1)[0];t("imageSrc",r)}}}),o.a.createElement("label",{htmlFor:"imageSrc"},o.a.createElement(Ve,{type:"plus"}),o.a.createElement("span",null,"Upload an image")))};function Qe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Be(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Be(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Be(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ke=function(e){var t=new FormData;return Object.entries(e).forEach((function(e){var n=Qe(e,2),r=n[0],o=n[1];o&&t.append(r,o)})),t},Xe=qe.a.div.withConfig({displayName:"styles__Container",componentId:"sc-1ydw8ru-0"})(["display:flex;padding:10px;align-items:center;cursor:pointer;z-index:1;bottom:15px;right:15px;border-radius:50%;background:#008dff;font-size:35px;width:50px;height:50px;justify-content:center;color:#fff;box-shadow:0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12);transition:0.5s;&:hover{transform:scale(1.1);background:#0481e6;}"]),Ye=qe.a.div.withConfig({displayName:"styles__InputWrapper",componentId:"sc-1ydw8ru-1"})(["margin-bottom:1rem;"]),Ze=qe.a.div.withConfig({displayName:"styles__ButtonWrapper",componentId:"sc-1ydw8ru-2"})(["display:flex;justify-content:flex-end;"]),et=Object(qe.a)(Ne.a).withConfig({displayName:"styles__FormModal",componentId:"sc-1ydw8ru-3"})(["& .ant-modal-body form:nth-child(2){margin-top:15px;}& .ant-modal-body > button{margin:0 auto;display:block;}"]);function tt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return nt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return nt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function rt(e,t,n,r,o,a,i){try{var c=e[a](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}function ot(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){rt(a,r,o,i,c,"next",e)}function c(e){rt(a,r,o,i,c,"throw",e)}i(void 0)}))}}function at(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var it=[{name:"word",type:"input"},{name:"translate",type:"input"},{name:"definition",type:"textarea"},{name:"context",type:"textarea"},{name:"example",type:"textarea"},{name:"synonym",type:"input"},{name:"antonym",type:"input"}],ct=Ne.a.confirm,ut=function(e){var t=e.type,n=at(e,["type"]),r=Re.a.TextArea;return{input:o.a.createElement(Re.a,n),textarea:o.a.createElement(r,n)}[t]||o.a.createElement(Re.a,n)},lt=function(){var e=ot(regeneratorRuntime.mark((function e(t,n){var r,o,a,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=Ke(t),e.next=3,fetch("".concat(g.a,"/words"),{method:"POST",body:r});case 3:o=e.sent,a=o.ok,i=o.statusText,a?(_e.a.success(i),n()):_e.a.error(i);case 7:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),st=function(){var e=ot(regeneratorRuntime.mark((function e(t){var n,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="".concat(g.a,"/word/find/").concat(t.word),e.next=3,fetch(n);case 3:return r=e.sent,e.abrupt("return",r.json());case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ft=function(e){var t="".concat(g.a,"/word/similar/").concat(e.word);return Object($.a)(t)},dt=function(){var e=tt(function(){var e=Le(Object(r.useState)([1]),2),t=e[0],n=e[1];return[t,function(){n((function(e){return[].concat(De(e),[e[e.length-1]+1])}))}]}(),2),t=e[0],n=e[1],a=Object(Fe.a)().fetchWords,i=Object(we.a)(),c=i.visible,u=i.openModal,l=i.closeModal,s=Object(We.a)(function(e,t){return{initialValues:{id:"",word:"",translate:"",definition:"",context:"",example:"",synonym:"",antonym:"",imageSrc:""},onSubmit:(n=ot(regeneratorRuntime.mark((function e(n){var r,o,a,i,c,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,st(n);case 2:return r=e.sent,e.next=5,ft(n);case 5:if(o=e.sent,!r.length){e.next=11;break}a=tt(r,1),i=a[0],ct({title:"This word is already exists - ".concat(i.word),content:"Are you sure that you want to add it?",onOk:function(){lt(n,t)}}),e.next=18;break;case 11:if(!o.length){e.next=16;break}c=tt(o,1),u=c[0],ct({title:"You have similar word - ".concat(u.word),content:"Are you sure that you want to add it?",onOk:function(){lt(n,t)}}),e.next=18;break;case 16:return e.next=18,lt(n,t);case 18:case"end":return e.stop()}}),e)}))),function(e){return n.apply(this,arguments)})};var n}(0,a)),f=s.handleSubmit,d=s.handleChange,p=s.setFieldValue;return o.a.createElement(o.a.Fragment,null,o.a.createElement(Xe,{onClick:u},o.a.createElement(Ie.a,{type:"plus"})),o.a.createElement(et,{centered:!0,title:"New word",footer:null,destroyOnClose:!0,visible:c,onCancel:l},t.map((function(e){return o.a.createElement(je.a,{key:e,onSubmit:f},it.map((function(e){var t=e.name,n=e.type;return o.a.createElement(Ye,{key:t},o.a.createElement(ut,{key:t,name:t,type:n,placeholder:Object(Me.a)(t),onChange:d}))})),o.a.createElement(Je,{setFieldValue:p}),o.a.createElement(Ze,null,o.a.createElement(Ce.a,{type:"primary",htmlType:"submit"},"Add word")))})),o.a.createElement(Ce.a,{onClick:function(){return n}},"Append new word")))},pt=n(317),mt=qe.a.div.withConfig({displayName:"styles__ToggleTranslate",componentId:"sc-1bbroxh-0"})(["font-size:34px;right:26px;cursor:pointer;@media (max-width:480px){font-size:34px;right:-20px;cursor:pointer;position:relative;}"]),yt=function(){var e=Object(pt.a)().toggleWordsInfo;return o.a.createElement(mt,{onClick:e},o.a.createElement(Ie.a,{theme:"twoTone",type:"file-unknown"}))},bt=n(235),ht=qe.a.div.withConfig({displayName:"styles__CreateCategoriesWrapper",componentId:"sc-2o2qak-0"})(["font-size:34px;cursor:pointer;@media (max-width:480px){display:none;}"]),gt=qe.a.div.withConfig({displayName:"styles__InputLayout",componentId:"sc-2o2qak-1"})(["margin-bottom:15px;"]),vt=function(){var e=Object(bt.a)().createCategory,t=Object(We.a)({initialValues:{name:""},onSubmit:function(t){e(t.name)}}),n=t.handleSubmit,r=t.handleChange,a=Object(we.a)(),i=a.visible,c=a.openModal,u=a.closeModal;return o.a.createElement(o.a.Fragment,null,o.a.createElement(ht,{onClick:c},o.a.createElement(Ie.a,{theme:"twoTone",type:"folder-add"})),o.a.createElement(Ne.a,{centered:!0,title:"New category",footer:null,destroyOnClose:!0,visible:i,onCancel:u},o.a.createElement(je.a,{onSubmit:n},o.a.createElement(gt,null,o.a.createElement(Re.a,{name:"name",onChange:r})),o.a.createElement(Ce.a,{type:"primary",htmlType:"submit",onClick:u},"Add category"))))},wt=qe.a.div.withConfig({displayName:"styles__MenuWrapper",componentId:"sc-1blaqrw-0"})(["background:#001529;width:100px;align-items:center;@media (max-width:480px){width:100%;bottom:0;position:fixed;display:flex;justify-content:space-between;height:60px;}"]),xt=qe.a.div.withConfig({displayName:"styles__MenuItem",componentId:"sc-1blaqrw-1"})(["width:100%;@media (max-width:480px){width:auto;height:100%;}& a{color:#ffffff;display:block;padding:10px;text-align:center;@media (max-width:480px){padding:10px 20px;text-align:center;height:100%;display:flex;align-items:center;}}"]),Ot=qe.a.div.withConfig({displayName:"styles__MenuLayout",componentId:"sc-1blaqrw-2"})(["display:flex;min-height:100vh;"]),Et=qe.a.div.withConfig({displayName:"styles__Content",componentId:"sc-1blaqrw-3"})(["width:calc(100% - 100px);@media (max-width:480px){width:100%;padding-bottom:50px;}"]),jt=qe.a.div.withConfig({displayName:"styles__Links",componentId:"sc-1blaqrw-4"})(["@media (max-width:480px){display:flex;height:100%;}"]),St=qe.a.div.withConfig({displayName:"styles__Actions",componentId:"sc-1blaqrw-5"})(["position:fixed;bottom:0;width:100px;display:flex;flex-direction:column;justify-content:center;align-items:center;@media (max-width:480px){position:static;flex-direction:row;height:1px;}"]),Ct=qe.a.div.withConfig({displayName:"styles__AddWordLayout",componentId:"sc-1blaqrw-6"})(["margin:10px 0 20px 0;@media (max-width:480px){display:none;}"]),kt={backgroundColor:"#1890ff"},It=function(e){var t=e.children;return o.a.createElement(Ot,null,o.a.createElement(Et,null,t),o.a.createElement(wt,null,o.a.createElement(jt,null,o.a.createElement(xt,null,o.a.createElement(xe.c,{activeStyle:kt,to:"/words"},"Words")),o.a.createElement(xt,null,o.a.createElement(xe.c,{activeStyle:kt,to:"/training"},"Training"))),o.a.createElement(St,null,o.a.createElement(vt,null),o.a.createElement(yt,null),o.a.createElement(Ct,null,o.a.createElement(dt,null)))))},At=o.a.lazy((function(){return Promise.all([n.e(0),n.e(4),n.e(8)]).then(n.bind(null,865))})),_t=o.a.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(5),n.e(7)]).then(n.bind(null,866))})),Tt=o.a.lazy((function(){return Promise.all([n.e(1),n.e(6)]).then(n.bind(null,867))})),Rt=function(){return o.a.createElement(xe.a,null,o.a.createElement(It,null,o.a.createElement(Oe.d,null,o.a.createElement(Oe.b,{path:"/words"},o.a.createElement(r.Suspense,{fallback:o.a.createElement("div",null,"Loading...")},o.a.createElement(_t,null))),o.a.createElement(Oe.b,{path:"/word/:wordName"},o.a.createElement(r.Suspense,{fallback:o.a.createElement("div",null,"Loading...")},o.a.createElement(At,null))),o.a.createElement(Oe.b,{path:"/training"},o.a.createElement(r.Suspense,{fallback:o.a.createElement("div",null,"Loading...")},o.a.createElement(Tt,null))),o.a.createElement(Oe.b,{path:"/"},o.a.createElement(Oe.a,{to:"/words"})))))},Pt=function(){return Object(we.b)(),o.a.createElement(c.a,{store:ve},o.a.createElement(Rt,null))},Nt=Pt;i.a.render(o.a.createElement(Nt,null),document.getElementById("root"))},94:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));var r="".concat("WORDS:","FETCH"),o="".concat("WORDS:","FETCH_REQUEST")},95:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));var r="".concat("WORDS:","FETCH_WITH_OFFSET"),o="".concat("WORDS:","FETCH_WITH_OFFSET_REQUEST")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,