(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{793:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canUseDOM=t.slidesOnLeft=t.slidesOnRight=t.siblingDirection=t.getTotalSlides=t.getPostClones=t.getPreClones=t.getTrackLeft=t.getTrackAnimateCSS=t.getTrackCSS=t.checkSpecKeys=t.getSlideCount=t.checkNavigable=t.getNavigableIndexes=t.swipeEnd=t.swipeMove=t.swipeStart=t.keyHandler=t.changeSlide=t.slideHandler=t.initializedState=t.extractObject=t.canGoNext=t.getSwipeDirection=t.getHeight=t.getWidth=t.lazySlidesOnRight=t.lazySlidesOnLeft=t.lazyEndIndex=t.lazyStartIndex=t.getRequiredLazySlides=t.getOnDemandLazySlides=void 0;var r=i(n(0)),o=i(n(12));function i(e){return e&&e.__esModule?e:{default:e}}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(n,!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(e){for(var t=[],n=u(e),r=f(e),o=n;o<r;o++)e.lazyLoadedList.indexOf(o)<0&&t.push(o);return t};t.getOnDemandLazySlides=s;t.getRequiredLazySlides=function(e){for(var t=[],n=u(e),r=f(e),o=n;o<r;o++)t.push(o);return t};var u=function(e){return e.currentSlide-p(e)};t.lazyStartIndex=u;var f=function(e){return e.currentSlide+d(e)};t.lazyEndIndex=f;var p=function(e){return e.centerMode?Math.floor(e.slidesToShow/2)+(parseInt(e.centerPadding)>0?1:0):0};t.lazySlidesOnLeft=p;var d=function(e){return e.centerMode?Math.floor((e.slidesToShow-1)/2)+1+(parseInt(e.centerPadding)>0?1:0):e.slidesToShow};t.lazySlidesOnRight=d;var y=function(e){return e&&e.offsetWidth||0};t.getWidth=y;var h=function(e){return e&&e.offsetHeight||0};t.getHeight=h;var v=function(e){var t,n,r,o,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=e.startX-e.curX,n=e.startY-e.curY,r=Math.atan2(n,t),(o=Math.round(180*r/Math.PI))<0&&(o=360-Math.abs(o)),o<=45&&o>=0||o<=360&&o>=315?"left":o>=135&&o<=225?"right":!0===i?o>=35&&o<=135?"up":"down":"vertical"};t.getSwipeDirection=v;var b=function(e){var t=!0;return e.infinite||(e.centerMode&&e.currentSlide>=e.slideCount-1||e.slideCount<=e.slidesToShow||e.currentSlide>=e.slideCount-e.slidesToShow)&&(t=!1),t};t.canGoNext=b;t.extractObject=function(e,t){var n={};return t.forEach((function(t){return n[t]=e[t]})),n};t.initializedState=function(e){var t,n=r.default.Children.count(e.children),i=Math.ceil(y(o.default.findDOMNode(e.listRef))),a=Math.ceil(y(o.default.findDOMNode(e.trackRef)));if(e.vertical)t=i;else{var l=e.centerMode&&2*parseInt(e.centerPadding);"string"==typeof e.centerPadding&&"%"===e.centerPadding.slice(-1)&&(l*=i/100),t=Math.ceil((i-l)/e.slidesToShow)}var c=o.default.findDOMNode(e.listRef)&&h(o.default.findDOMNode(e.listRef).querySelector('[data-index="0"]')),u=c*e.slidesToShow,f=void 0===e.currentSlide?e.initialSlide:e.currentSlide;e.rtl&&void 0===e.currentSlide&&(f=n-1-e.initialSlide);var p=e.lazyLoadedList||[],d=s({currentSlide:f,lazyLoadedList:p});p.concat(d);var v={slideCount:n,slideWidth:t,listWidth:i,trackWidth:a,currentSlide:f,slideHeight:c,listHeight:u,lazyLoadedList:p};return null===e.autoplaying&&e.autoplay&&(v.autoplaying="playing"),v};t.slideHandler=function(e){var t=e.waitForAnimate,n=e.animating,r=e.fade,o=e.infinite,i=e.index,a=e.slideCount,c=e.lazyLoadedList,u=e.lazyLoad,f=e.currentSlide,p=e.centerMode,d=e.slidesToScroll,y=e.slidesToShow,h=e.useCSS;if(t&&n)return{};var v,m,g,O=i,w={},E={};if(r){if(!o&&(i<0||i>=a))return{};i<0?O=i+a:i>=a&&(O=i-a),u&&c.indexOf(O)<0&&c.push(O),w={animating:!0,currentSlide:O,lazyLoadedList:c},E={animating:!1}}else v=O,O<0?(v=O+a,o?a%d!=0&&(v=a-a%d):v=0):!b(e)&&O>f?O=v=f:p&&O>=a?(O=o?a:a-1,v=o?0:a-1):O>=a&&(v=O-a,o?a%d!=0&&(v=0):v=a-y),m=k(l({},e,{slideIndex:O})),g=k(l({},e,{slideIndex:v})),o||(m===g&&(O=v),m=g),u&&c.concat(s(l({},e,{currentSlide:O}))),h?(w={animating:!0,currentSlide:v,trackStyle:P(l({},e,{left:m})),lazyLoadedList:c},E={animating:!1,currentSlide:v,trackStyle:S(l({},e,{left:g})),swipeLeft:null}):w={currentSlide:v,trackStyle:S(l({},e,{left:g})),lazyLoadedList:c};return{state:w,nextState:E}};t.changeSlide=function(e,t){var n,r,o,i,a=e.slidesToScroll,c=e.slidesToShow,s=e.slideCount,u=e.currentSlide,f=e.lazyLoad,p=e.infinite;if(n=s%a!=0?0:(s-u)%a,"previous"===t.message)i=u-(o=0===n?a:c-n),f&&!p&&(i=-1===(r=u-o)?s-1:r);else if("next"===t.message)i=u+(o=0===n?a:n),f&&!p&&(i=(u+a)%s+n);else if("dots"===t.message){if((i=t.index*t.slidesToScroll)===t.currentSlide)return null}else if("children"===t.message){if((i=t.index)===t.currentSlide)return null;if(p){var d=_(l({},e,{targetSlide:i}));i>t.currentSlide&&"left"===d?i-=s:i<t.currentSlide&&"right"===d&&(i+=s)}}else if("index"===t.message&&(i=Number(t.index))===t.currentSlide)return null;return i};t.keyHandler=function(e,t,n){return e.target.tagName.match("TEXTAREA|INPUT|SELECT")||!t?"":37===e.keyCode?n?"next":"previous":39===e.keyCode?n?"previous":"next":""};t.swipeStart=function(e,t,n){return"IMG"===e.target.tagName&&e.preventDefault(),!t||!n&&-1!==e.type.indexOf("mouse")?"":{dragging:!0,touchObject:{startX:e.touches?e.touches[0].pageX:e.clientX,startY:e.touches?e.touches[0].pageY:e.clientY,curX:e.touches?e.touches[0].pageX:e.clientX,curY:e.touches?e.touches[0].pageY:e.clientY}}};t.swipeMove=function(e,t){var n=t.scrolling,r=t.animating,o=t.vertical,i=t.swipeToSlide,a=t.verticalSwiping,c=t.rtl,s=t.currentSlide,u=t.edgeFriction,f=t.edgeDragged,p=t.onEdge,d=t.swiped,y=t.swiping,h=t.slideCount,m=t.slidesToScroll,g=t.infinite,O=t.touchObject,w=t.swipeEvent,P=t.listHeight,E=t.listWidth;if(!n){if(r)return e.preventDefault();o&&i&&a&&e.preventDefault();var C,j={},_=k(t);O.curX=e.touches?e.touches[0].pageX:e.clientX,O.curY=e.touches?e.touches[0].pageY:e.clientY,O.swipeLength=Math.round(Math.sqrt(Math.pow(O.curX-O.startX,2)));var T=Math.round(Math.sqrt(Math.pow(O.curY-O.startY,2)));if(!a&&!y&&T>10)return{scrolling:!0};a&&(O.swipeLength=T);var x=(c?-1:1)*(O.curX>O.startX?1:-1);a&&(x=O.curY>O.startY?1:-1);var M=Math.ceil(h/m),N=v(t.touchObject,a),R=O.swipeLength;return g||(0===s&&"right"===N||s+1>=M&&"left"===N||!b(t)&&"left"===N)&&(R=O.swipeLength*u,!1===f&&p&&(p(N),j.edgeDragged=!0)),!d&&w&&(w(N),j.swiped=!0),C=o?_+R*(P/E)*x:c?_-R*x:_+R*x,a&&(C=_+R*x),j=l({},j,{touchObject:O,swipeLeft:C,trackStyle:S(l({},t,{left:C}))}),Math.abs(O.curX-O.startX)<.8*Math.abs(O.curY-O.startY)?j:(O.swipeLength>10&&(j.swiping=!0,e.preventDefault()),j)}};t.swipeEnd=function(e,t){var n=t.dragging,r=t.swipe,o=t.touchObject,i=t.listWidth,a=t.touchThreshold,c=t.verticalSwiping,s=t.listHeight,u=t.currentSlide,f=t.swipeToSlide,p=t.scrolling,d=t.onSwipe;if(!n)return r&&e.preventDefault(),{};var y=c?s/a:i/a,h=v(o,c),b={dragging:!1,edgeDragged:!1,scrolling:!1,swiping:!1,swiped:!1,swipeLeft:null,touchObject:{}};if(p)return b;if(!o.swipeLength)return b;if(o.swipeLength>y){var m,w;switch(e.preventDefault(),d&&d(h),h){case"left":case"up":w=u+O(t),m=f?g(t,w):w,b.currentDirection=0;break;case"right":case"down":w=u-O(t),m=f?g(t,w):w,b.currentDirection=1;break;default:m=u}b.triggerSlideHandler=m}else{var S=k(t);b.trackStyle=P(l({},t,{left:S}))}return b};var m=function(e){for(var t=e.infinite?2*e.slideCount:e.slideCount,n=e.infinite?-1*e.slidesToShow:0,r=e.infinite?-1*e.slidesToShow:0,o=[];n<t;)o.push(n),n=r+e.slidesToScroll,r+=Math.min(e.slidesToScroll,e.slidesToShow);return o};t.getNavigableIndexes=m;var g=function(e,t){var n=m(e),r=0;if(t>n[n.length-1])t=n[n.length-1];else for(var o in n){if(t<n[o]){t=r;break}r=n[o]}return t};t.checkNavigable=g;var O=function(e){var t=e.centerMode?e.slideWidth*Math.floor(e.slidesToShow/2):0;if(e.swipeToSlide){var n,r=o.default.findDOMNode(e.listRef).querySelectorAll(".slick-slide");if(Array.from(r).every((function(r){if(e.vertical){if(r.offsetTop+h(r)/2>-1*e.swipeLeft)return n=r,!1}else if(r.offsetLeft-t+y(r)/2>-1*e.swipeLeft)return n=r,!1;return!0})),!n)return 0;var i=!0===e.rtl?e.slideCount-e.currentSlide:e.currentSlide;return Math.abs(n.dataset.index-i)||1}return e.slidesToScroll};t.getSlideCount=O;var w=function(e,t){return t.reduce((function(t,n){return t&&e.hasOwnProperty(n)}),!0)?null:console.error("Keys Missing:",e)};t.checkSpecKeys=w;var S=function(e){var t,n;w(e,["left","variableWidth","slideCount","slidesToShow","slideWidth"]);var r=e.slideCount+2*e.slidesToShow;e.vertical?n=r*e.slideHeight:t=j(e)*e.slideWidth;var o={opacity:1,transition:"",WebkitTransition:""};e.useTransform?o=l({},o,{WebkitTransform:e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",transform:e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",msTransform:e.vertical?"translateY("+e.left+"px)":"translateX("+e.left+"px)"}):e.vertical?o.top=e.left:o.left=e.left;return e.fade&&(o={opacity:1}),t&&(o.width=t),n&&(o.height=n),window&&!window.addEventListener&&window.attachEvent&&(e.vertical?o.marginTop=e.left+"px":o.marginLeft=e.left+"px"),o};t.getTrackCSS=S;var P=function(e){w(e,["left","variableWidth","slideCount","slidesToShow","slideWidth","speed","cssEase"]);var t=S(e);return e.useTransform?(t.WebkitTransition="-webkit-transform "+e.speed+"ms "+e.cssEase,t.transition="transform "+e.speed+"ms "+e.cssEase):e.vertical?t.transition="top "+e.speed+"ms "+e.cssEase:t.transition="left "+e.speed+"ms "+e.cssEase,t};t.getTrackAnimateCSS=P;var k=function(e){if(e.unslick)return 0;w(e,["slideIndex","trackRef","infinite","centerMode","slideCount","slidesToShow","slidesToScroll","slideWidth","listWidth","variableWidth","slideHeight"]);var t,n,r=e.slideIndex,i=e.trackRef,a=e.infinite,l=e.centerMode,c=e.slideCount,s=e.slidesToShow,u=e.slidesToScroll,f=e.slideWidth,p=e.listWidth,d=e.variableWidth,y=e.slideHeight,h=e.fade,v=e.vertical;if(h||1===e.slideCount)return 0;var b=0;if(a?(b=-E(e),c%u!=0&&r+u>c&&(b=-(r>c?s-(r-c):c%u)),l&&(b+=parseInt(s/2))):(c%u!=0&&r+u>c&&(b=s-c%u),l&&(b=parseInt(s/2))),t=v?r*y*-1+b*y:r*f*-1+b*f,!0===d){var m,g=o.default.findDOMNode(i);if(m=r+E(e),t=(n=g&&g.childNodes[m])?-1*n.offsetLeft:0,!0===l){m=a?r+E(e):r,n=g&&g.children[m],t=0;for(var O=0;O<m;O++)t-=g&&g.children[O]&&g.children[O].offsetWidth;t-=parseInt(e.centerPadding),t+=n&&(p-n.offsetWidth)/2}}return t};t.getTrackLeft=k;var E=function(e){return e.unslick||!e.infinite?0:e.variableWidth?e.slideCount:e.slidesToShow+(e.centerMode?1:0)};t.getPreClones=E;var C=function(e){return e.unslick||!e.infinite?0:e.slideCount};t.getPostClones=C;var j=function(e){return 1===e.slideCount?1:E(e)+e.slideCount+C(e)};t.getTotalSlides=j;var _=function(e){return e.targetSlide>e.currentSlide?e.targetSlide>e.currentSlide+T(e)?"left":"right":e.targetSlide<e.currentSlide-x(e)?"right":"left"};t.siblingDirection=_;var T=function(e){var t=e.slidesToShow,n=e.centerMode,r=e.rtl,o=e.centerPadding;if(n){var i=(t-1)/2+1;return parseInt(o)>0&&(i+=1),r&&t%2==0&&(i+=1),i}return r?0:t-1};t.slidesOnRight=T;var x=function(e){var t=e.slidesToShow,n=e.centerMode,r=e.rtl,o=e.centerPadding;if(n){var i=(t-1)/2+1;return parseInt(o)>0&&(i+=1),r||t%2!=0||(i+=1),i}return r?t-1:0};t.slidesOnLeft=x;t.canUseDOM=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}},797:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=l(n(806)),o=l(n(833)),i=l(n(839)),a=l(n(840));function l(e){return e&&e.__esModule?e:{default:e}}var c=r.default;c.Text=o.default,c.Title=i.default,c.Paragraph=a.default;var s=c;t.default=s},798:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==_(e)&&"function"!=typeof e)return{default:e};var t=k();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=P(n(20)),i=n(81),a=P(n(338)),l=P(n(349)),c=P(n(834)),s=P(n(97)),u=P(n(348)),f=n(32),p=n(345),d=P(n(127)),y=P(n(68)),h=P(n(836)),v=P(n(238)),b=P(n(808)),m=P(n(24)),g=P(n(794)),O=P(n(806)),w=P(n(837)),S=P(n(838));function P(e){return e&&e.__esModule?e:{default:e}}function k(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return k=function(){return e},e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function C(e){return function(e){if(Array.isArray(e))return j(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return j(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function T(){return(T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function x(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=D(e);if(t){var o=D(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return L(this,n)}}function L(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function D(e){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var I=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},z=(0,b.default)("webkitLineClamp"),W=(0,b.default)("textOverflow");var A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(b,e);var t,n,i,p=R(b);function b(){var e;return x(this,b),(e=p.apply(this,arguments)).state={edit:!1,copied:!1,ellipsisText:"",ellipsisContent:null,isEllipsis:!1,expanded:!1,clientRendered:!1},e.onExpandClick=function(){var t=e.getEllipsis().onExpand;e.setState({expanded:!0}),t&&t()},e.onEditClick=function(){e.triggerEdit(!0)},e.onEditChange=function(t){var n=e.getEditable().onChange;n&&n(t),e.triggerEdit(!1)},e.onEditCancel=function(){e.triggerEdit(!1)},e.onCopyClick=function(){var t=e.props,n=t.children,r=t.copyable,o=T({},"object"===_(r)?r:null);void 0===o.text&&(o.text=String(n)),(0,c.default)(o.text||""),e.setState({copied:!0},(function(){o.onCopy&&o.onCopy(),e.copyId=window.setTimeout((function(){e.setState({copied:!1})}),3e3)}))},e.setContentRef=function(t){e.content=t},e.setEditRef=function(t){e.editIcon=t},e.triggerEdit=function(t){var n=e.getEditable().onStart;t&&n&&n(),e.setState({edit:t},(function(){!t&&e.editIcon&&e.editIcon.focus()}))},e.resizeOnNextFrame=function(){v.default.cancel(e.rafId),e.rafId=(0,v.default)((function(){e.syncEllipsis()}))},e}return t=b,i=[{key:"getDerivedStateFromProps",value:function(e){var t=e.children,n=e.editable;return(0,y.default)(!n||"string"==typeof t,"Typography","When `editable` is enabled, the `children` should use string."),{}}}],(n=[{key:"componentDidMount",value:function(){this.setState({clientRendered:!0}),this.resizeOnNextFrame()}},{key:"componentDidUpdate",value:function(e){var t=this.props.children,n=this.getEllipsis(),r=this.getEllipsis(e);t===e.children&&n.rows===r.rows||this.resizeOnNextFrame()}},{key:"componentWillUnmount",value:function(){window.clearTimeout(this.copyId),v.default.cancel(this.rafId)}},{key:"getEditable",value:function(e){var t=this.state.edit,n=(e||this.props).editable;return n?T({editing:t},"object"===_(n)?n:null):{editing:t}}},{key:"getEllipsis",value:function(e){var t=(e||this.props).ellipsis;return t?T({rows:1,expandable:!1},"object"===_(t)?t:null):{}}},{key:"canUseCSSEllipsis",value:function(){var e=this.state.clientRendered,t=this.props,n=t.editable,r=t.copyable,o=this.getEllipsis(),i=o.rows,a=o.expandable;return!(n||r||a||!e)&&(1===i?W:z)}},{key:"syncEllipsis",value:function(){var e=this.state,t=e.ellipsisText,n=e.isEllipsis,r=e.expanded,o=this.getEllipsis().rows,i=this.props.children;if(o&&!(o<0)&&this.content&&!r&&!this.canUseCSSEllipsis()){(0,y.default)((0,a.default)(i).every((function(e){return"string"==typeof e})),"Typography","`ellipsis` should use string as children only.");var c=(0,S.default)((0,l.default)(this.content),o,i,this.renderOperations(!0),"..."),s=c.content,u=c.text,f=c.ellipsis;t===u&&n===f||this.setState({ellipsisText:u,ellipsisContent:s,isEllipsis:f})}}},{key:"renderExpand",value:function(e){var t=this.getEllipsis().expandable,n=this.props.prefixCls,o=this.state,i=o.expanded,a=o.isEllipsis;return t&&(e||!i&&a)?r.createElement("a",{key:"expand",className:"".concat(n,"-expand"),onClick:this.onExpandClick,"aria-label":this.expandStr},this.expandStr):null}},{key:"renderEdit",value:function(){var e=this.props,t=e.editable,n=e.prefixCls;if(t)return r.createElement(g.default,{key:"edit",title:this.editStr},r.createElement(h.default,{ref:this.setEditRef,className:"".concat(n,"-edit"),onClick:this.onEditClick,"aria-label":this.editStr},r.createElement(m.default,{role:"button",type:"edit"})))}},{key:"renderCopy",value:function(){var e=this.state.copied,t=this.props,n=t.copyable,i=t.prefixCls;if(n){var a=e?this.copiedStr:this.copyStr;return r.createElement(g.default,{key:"copy",title:a},r.createElement(h.default,{className:(0,o.default)("".concat(i,"-copy"),e&&"".concat(i,"-copy-success")),onClick:this.onCopyClick,"aria-label":a},r.createElement(m.default,{role:"button",type:e?"check":"copy"})))}}},{key:"renderEditInput",value:function(){var e=this.props,t=e.children,n=e.prefixCls,o=e.className,i=e.style;return r.createElement(w.default,{value:"string"==typeof t?t:"",onSave:this.onEditChange,onCancel:this.onEditCancel,prefixCls:n,className:o,style:i})}},{key:"renderOperations",value:function(e){return[this.renderExpand(e),this.renderEdit(),this.renderCopy()].filter((function(e){return e}))}},{key:"renderContent",value:function(){var e=this,t=this.state,n=t.ellipsisContent,i=t.isEllipsis,a=t.expanded,l=this.props,c=l.component,p=l.children,y=l.className,h=l.prefixCls,v=l.type,b=l.disabled,m=l.style,g=I(l,["component","children","className","prefixCls","type","disabled","style"]),w=this.getEllipsis().rows,S=(0,s.default)(g,["prefixCls","editable","copyable","ellipsis","mark","underline","mark","code","delete","underline","strong"].concat(C(f.configConsumerProps))),P=this.canUseCSSEllipsis(),k=1===w&&P,j=w&&w>1&&P,_=p,x=null;return w&&i&&!a&&!P&&(x=String(p),_=r.createElement("span",{title:String(p),"aria-hidden":"true"},n,"...")),_=function(e,t){var n=e.mark,o=e.code,i=e.underline,a=e.delete,l=e.strong,c=t;function s(e,t){e&&(c=r.createElement(t,{},c))}return s(l,"strong"),s(i,"u"),s(a,"del"),s(o,"code"),s(n,"mark"),c}(this.props,_),r.createElement(d.default,{componentName:"Text"},(function(t){var n,i=t.edit,a=t.copy,l=t.copied,s=t.expand;return e.editStr=i,e.copyStr=a,e.copiedStr=l,e.expandStr=s,r.createElement(u.default,{onResize:e.resizeOnNextFrame,disabled:!w},r.createElement(O.default,T({className:(0,o.default)(y,(n={},E(n,"".concat(h,"-").concat(v),v),E(n,"".concat(h,"-disabled"),b),E(n,"".concat(h,"-ellipsis"),w),E(n,"".concat(h,"-ellipsis-single-line"),k),E(n,"".concat(h,"-ellipsis-multiple-line"),j),n)),style:T(T({},m),{WebkitLineClamp:j?w:null}),component:c,ref:e.setContentRef,"aria-label":x},S),_,e.renderOperations()))}))}},{key:"render",value:function(){return this.getEditable().editing?this.renderEditInput():this.renderContent()}}])&&M(t.prototype,n),i&&M(t,i),b}(r.Component);A.defaultProps={children:""},(0,i.polyfill)(A);var $=(0,p.withConfigConsumer)({prefixCls:"typography"})(A);t.default=$},806:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==u(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=c(n(20)),i=n(32),a=c(n(68)),l=n(832);function c(e){return e&&e.__esModule?e:{default:e}}function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(){return(b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var m,g=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},O=function(e,t){var n=e.prefixCls,c=e.component,s=void 0===c?"article":c,u=e.className,f=e["aria-label"],p=e.setContentRef,d=e.children,y=g(e,["prefixCls","component","className","aria-label","setContentRef","children"]),h=t;return p&&((0,a.default)(!1,"Typography","`setContentRef` is deprecated. Please use `ref` instead."),h=(0,l.composeRef)(t,p)),r.createElement(i.ConfigConsumer,null,(function(e){var t=e.getPrefixCls,i=s,a=t("typography",n);return r.createElement(i,b({className:(0,o.default)(a,u),"aria-label":f,ref:h},y),d)}))};r.forwardRef?(m=r.forwardRef(O)).displayName="Typography":m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(a,e);var t,n,o,i=y(a);function a(){var e;return f(this,a),(e=i.apply(this,arguments)).state={},e}return t=a,(n=[{key:"render",value:function(){return r.createElement(O,this.props)}}])&&p(t.prototype,n),o&&p(t,o),a}(r.Component);var w=m;t.default=w},807:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=r.F1&&t<=r.F12)return!1;switch(t){case r.ALT:case r.CAPS_LOCK:case r.CONTEXT_MENU:case r.CTRL:case r.DOWN:case r.END:case r.ESC:case r.HOME:case r.INSERT:case r.LEFT:case r.MAC_FF_META:case r.META:case r.NUMLOCK:case r.NUM_CENTER:case r.PAGE_DOWN:case r.PAGE_UP:case r.PAUSE:case r.PRINT_SCREEN:case r.RIGHT:case r.SHIFT:case r.UP:case r.WIN_KEY:case r.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=r.ZERO&&e<=r.NINE)return!0;if(e>=r.NUM_ZERO&&e<=r.NUM_MULTIPLY)return!0;if(e>=r.A&&e<=r.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case r.SPACE:case r.QUESTION_MARK:case r.NUM_PLUS:case r.NUM_MINUS:case r.NUM_PERIOD:case r.NUM_DIVISION:case r.SEMICOLON:case r.DASH:case r.EQUALS:case r.COMMA:case r.PERIOD:case r.SLASH:case r.APOSTROPHE:case r.SINGLE_QUOTE:case r.OPEN_SQUARE_BRACKET:case r.BACKSLASH:case r.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}},o=r;t.default=o},809:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=d(n(0)),o=d(n(12)),i=f(n(107)),a=f(n(20)),l=f(n(24)),c=n(32),s=f(n(844)),u=f(n(68));function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function d(e){if(e&&e.__esModule)return e;if(null===e||"object"!==y(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=S(e);if(t){var o=S(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return O(this,n)}}function O(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?w(e):t}function w(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function P(){}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(d,e);var t,n,f,p=g(d);function d(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),(t=p.call(this,e)).handleClose=function(e){e.preventDefault();var n=o.findDOMNode(w(t));n.style.height="".concat(n.offsetHeight,"px"),n.style.height="".concat(n.offsetHeight,"px"),t.setState({closing:!0}),(t.props.onClose||P)(e)},t.animationEnd=function(){t.setState({closing:!1,closed:!0}),(t.props.afterClose||P)()},t.renderAlert=function(e){var n,o=e.getPrefixCls,c=t.props,u=c.description,f=c.prefixCls,p=c.message,d=c.closeText,y=c.banner,b=c.className,m=void 0===b?"":b,g=c.style,O=c.icon,w=t.props,S=w.closable,P=w.type,k=w.showIcon,E=w.iconType,C=t.state,j=C.closing,_=C.closed,T=o("alert",f);k=!(!y||void 0!==k)||k,P=y&&void 0===P?"warning":P||"info";var x="filled";if(!E){switch(P){case"success":E="check-circle";break;case"info":E="info-circle";break;case"error":E="close-circle";break;case"warning":E="exclamation-circle";break;default:E="default"}u&&(x="outlined")}d&&(S=!0);var M=(0,a.default)(T,"".concat(T,"-").concat(P),(v(n={},"".concat(T,"-closing"),j),v(n,"".concat(T,"-with-description"),!!u),v(n,"".concat(T,"-no-icon"),!k),v(n,"".concat(T,"-banner"),!!y),v(n,"".concat(T,"-closable"),S),n),m),N=S?r.createElement("button",{type:"button",onClick:t.handleClose,className:"".concat(T,"-close-icon"),tabIndex:0},d?r.createElement("span",{className:"".concat(T,"-close-text")},d):r.createElement(l.default,{type:"close"})):null,R=(0,s.default)(t.props),L=O&&(r.isValidElement(O)?r.cloneElement(O,{className:(0,a.default)("".concat(T,"-icon"),v({},O.props.className,O.props.className))}):r.createElement("span",{className:"".concat(T,"-icon")},O))||r.createElement(l.default,{className:"".concat(T,"-icon"),type:E,theme:x});return _?null:r.createElement(i.default,{component:"",showProp:"data-show",transitionName:"".concat(T,"-slide-up"),onEnd:t.animationEnd},r.createElement("div",h({"data-show":!j,className:M,style:g},R),k?L:null,r.createElement("span",{className:"".concat(T,"-message")},p),r.createElement("span",{className:"".concat(T,"-description")},u),N))},(0,u.default)(!("iconType"in e),"Alert","`iconType` is deprecated. Please use `icon` instead."),t.state={closing:!1,closed:!1},t}return t=d,(n=[{key:"render",value:function(){return r.createElement(c.ConfigConsumer,null,this.renderAlert)}}])&&b(t.prototype,n),f&&b(t,f),d}(r.Component);t.default=k},810:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==d(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=n(81),i=f(n(794)),a=f(n(24)),l=f(n(69)),c=f(n(127)),s=f(n(237)),u=n(32);function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=O(e);if(t){var o=O(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return m(this,n)}}function m(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?g(e):t}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(f,e);var t,n,o,a=b(f);function f(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),(t=a.call(this,e)).onConfirm=function(e){t.setVisible(!1,e);var n=t.props.onConfirm;n&&n.call(g(t),e)},t.onCancel=function(e){t.setVisible(!1,e);var n=t.props.onCancel;n&&n.call(g(t),e)},t.onVisibleChange=function(e){t.props.disabled||t.setVisible(e)},t.saveTooltip=function(e){t.tooltip=e},t.renderOverlay=function(e,n){var o=t.props,i=o.okButtonProps,a=o.cancelButtonProps,c=o.title,s=o.cancelText,u=o.okText,f=o.okType,p=o.icon;return r.createElement("div",null,r.createElement("div",{className:"".concat(e,"-inner-content")},r.createElement("div",{className:"".concat(e,"-message")},p,r.createElement("div",{className:"".concat(e,"-message-title")},c)),r.createElement("div",{className:"".concat(e,"-buttons")},r.createElement(l.default,y({onClick:t.onCancel,size:"small"},a),s||n.cancelText),r.createElement(l.default,y({onClick:t.onConfirm,type:f,size:"small"},i),u||n.okText))))},t.renderConfirm=function(e){var n=e.getPrefixCls,o=t.props,a=o.prefixCls,l=o.placement,u=w(o,["prefixCls","placement"]),f=n("popover",a),p=r.createElement(c.default,{componentName:"Popconfirm",defaultLocale:s.default.Popconfirm},(function(e){return t.renderOverlay(f,e)}));return r.createElement(i.default,y({},u,{prefixCls:f,placement:l,onVisibleChange:t.onVisibleChange,visible:t.state.visible,overlay:p,ref:t.saveTooltip}))},t.state={visible:e.visible},t}return t=f,o=[{key:"getDerivedStateFromProps",value:function(e){return"visible"in e?{visible:e.visible}:"defaultVisible"in e?{visible:e.defaultVisible}:null}}],(n=[{key:"getPopupDomNode",value:function(){return this.tooltip.getPopupDomNode()}},{key:"setVisible",value:function(e,t){var n=this.props;"visible"in n||this.setState({visible:e});var r=n.onVisibleChange;r&&r(e,t)}},{key:"render",value:function(){return r.createElement(u.ConfigConsumer,null,this.renderConfirm)}}])&&h(t.prototype,n),o&&h(t,o),f}(r.Component);S.defaultProps={transitionName:"zoom-big",placement:"top",trigger:"click",okType:"primary",icon:r.createElement(a.default,{type:"exclamation-circle",theme:"filled"}),disabled:!1},(0,o.polyfill)(S);var P=S;t.default=P},815:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=l(n(804)),i=n(32),a=l(n(68));function l(e){return e&&e.__esModule?e:{default:e}}function c(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}if("undefined"!=typeof window){window.matchMedia||(window.matchMedia=function(e){return{media:e,matches:!1,addListener:function(){},removeListener:function(){}}})}var v=n(818).default,b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(s,e);var t,n,l,c=d(s);function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(t=c.call(this,e)).saveSlick=function(e){t.slick=e},t.onWindowResized=function(){t.props.autoplay&&t.slick&&t.slick.innerSlider&&t.slick.innerSlider.autoPlay&&t.slick.innerSlider.autoPlay()},t.renderCarousel=function(e){var n=e.getPrefixCls,o=u({},t.props);"fade"===o.effect&&(o.fade=!0);var i=n("carousel",o.prefixCls),a=t.getDotPosition();return o.vertical="left"===a||"right"===a,o.dotsClass="".concat("slick-dots"," ").concat("slick-dots","-").concat(a||"bottom"),o.vertical&&(i="".concat(i," ").concat(i,"-vertical")),r.createElement("div",{className:i},r.createElement(v,u({ref:t.saveSlick},o)))},t.onWindowResized=(0,o.default)(t.onWindowResized,500,{leading:!1}),"vertical"in t.props&&(0,a.default)(!t.props.vertical,"Carousel","`vertical` is deprecated, please use `dotPosition` instead."),t}return t=s,(n=[{key:"componentDidMount",value:function(){this.props.autoplay&&window.addEventListener("resize",this.onWindowResized),this.innerSlider=this.slick&&this.slick.innerSlider}},{key:"componentDidUpdate",value:function(e){r.Children.count(this.props.children)!==r.Children.count(e.children)&&this.goTo(this.props.initialSlide||0,!1)}},{key:"componentWillUnmount",value:function(){this.props.autoplay&&(window.removeEventListener("resize",this.onWindowResized),this.onWindowResized.cancel())}},{key:"getDotPosition",value:function(){return this.props.dotPosition?this.props.dotPosition:"vertical"in this.props&&this.props.vertical?"right":"bottom"}},{key:"next",value:function(){this.slick.slickNext()}},{key:"prev",value:function(){this.slick.slickPrev()}},{key:"goTo",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.slick.slickGoTo(e,t)}},{key:"render",value:function(){return r.createElement(i.ConfigConsumer,null,this.renderCarousel)}}])&&f(t.prototype,n),l&&f(t,l),s}(r.Component);t.default=b,b.defaultProps={dots:!0,arrows:!1,draggable:!1}},818:function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=((r=n(819))&&r.__esModule?r:{default:r}).default;t.default=o},819:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=c(n(0)),o=n(820),i=c(n(826)),a=c(n(828)),l=n(793);function c(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(n,!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m=(0,l.canUseDOM)()&&n(351),g=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?h(e):t}(this,y(t).call(this,e)),b(h(n),"innerSliderRefHandler",(function(e){return n.innerSlider=e})),b(h(n),"slickPrev",(function(){return n.innerSlider.slickPrev()})),b(h(n),"slickNext",(function(){return n.innerSlider.slickNext()})),b(h(n),"slickGoTo",(function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return n.innerSlider.slickGoTo(e,t)})),b(h(n),"slickPause",(function(){return n.innerSlider.pause("paused")})),b(h(n),"slickPlay",(function(){return n.innerSlider.autoPlay("play")})),n.state={breakpoint:null},n._responsiveMediaHandlers=[],n}var n,c,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,e),n=t,(c=[{key:"media",value:function(e,t){m.register(e,t),this._responsiveMediaHandlers.push({query:e,handler:t})}},{key:"UNSAFE_componentWillMount",value:function(){var e=this;if(this.props.responsive){var t=this.props.responsive.map((function(e){return e.breakpoint}));t.sort((function(e,t){return e-t})),t.forEach((function(n,r){var o;o=0===r?(0,i.default)({minWidth:0,maxWidth:n}):(0,i.default)({minWidth:t[r-1]+1,maxWidth:n}),(0,l.canUseDOM)()&&e.media(o,(function(){e.setState({breakpoint:n})}))}));var n=(0,i.default)({minWidth:t.slice(-1)[0]});(0,l.canUseDOM)()&&this.media(n,(function(){e.setState({breakpoint:null})}))}}},{key:"componentWillUnmount",value:function(){this._responsiveMediaHandlers.forEach((function(e){m.unregister(e.query,e.handler)}))}},{key:"render",value:function(){var e,t,n=this;(e=this.state.breakpoint?"unslick"===(t=this.props.responsive.filter((function(e){return e.breakpoint===n.state.breakpoint})))[0].settings?"unslick":p({},a.default,{},this.props,{},t[0].settings):p({},a.default,{},this.props)).centerMode&&(e.slidesToScroll,e.slidesToScroll=1),e.fade&&(e.slidesToShow,e.slidesToScroll,e.slidesToShow=1,e.slidesToScroll=1);var i=r.default.Children.toArray(this.props.children);i=i.filter((function(e){return"string"==typeof e?!!e.trim():!!e})),e.variableWidth&&(e.rows>1||e.slidesPerRow>1)&&(console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1"),e.variableWidth=!1);for(var l=[],c=null,s=0;s<i.length;s+=e.rows*e.slidesPerRow){for(var f=[],d=s;d<s+e.rows*e.slidesPerRow;d+=e.slidesPerRow){for(var y=[],h=d;h<d+e.slidesPerRow&&(e.variableWidth&&i[h].props.style&&(c=i[h].props.style.width),!(h>=i.length));h+=1)y.push(r.default.cloneElement(i[h],{key:100*s+10*d+h,tabIndex:-1,style:{width:"".concat(100/e.slidesPerRow,"%"),display:"inline-block"}}));f.push(r.default.createElement("div",{key:10*s+d},y))}e.variableWidth?l.push(r.default.createElement("div",{key:s,style:{width:c}},f)):l.push(r.default.createElement("div",{key:s},f))}if("unslick"===e){var v="regular slider "+(this.props.className||"");return r.default.createElement("div",{className:v},l)}return l.length<=e.slidesToShow&&(e.unslick=!0),r.default.createElement(o.InnerSlider,u({style:this.props.style,ref:this.innerSliderRefHandler},e),l)}}])&&d(n.prototype,c),f&&d(n,f),t}(r.default.Component);t.default=g},820:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InnerSlider=void 0;var r=d(n(0)),o=d(n(12)),i=d(n(821)),a=d(n(822)),l=d(n(20)),c=n(793),s=n(823),u=n(824),f=n(825),p=d(n(339));function d(e){return e&&e.__esModule?e:{default:e}}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function h(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(n,!0).forEach((function(t){S(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var P=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?O(e):t}(this,g(t).call(this,e)),S(O(n),"listRefHandler",(function(e){return n.list=e})),S(O(n),"trackRefHandler",(function(e){return n.track=e})),S(O(n),"adaptHeight",(function(){if(n.props.adaptiveHeight&&n.list){var e=n.list.querySelector('[data-index="'.concat(n.state.currentSlide,'"]'));n.list.style.height=(0,c.getHeight)(e)+"px"}})),S(O(n),"UNSAFE_componentWillMount",(function(){if(n.ssrInit(),n.props.onInit&&n.props.onInit(),n.props.lazyLoad){var e=(0,c.getOnDemandLazySlides)(m({},n.props,{},n.state));e.length>0&&(n.setState((function(t){return{lazyLoadedList:t.lazyLoadedList.concat(e)}})),n.props.onLazyLoad&&n.props.onLazyLoad(e))}})),S(O(n),"componentDidMount",(function(){var e=m({listRef:n.list,trackRef:n.track},n.props);n.updateState(e,!0,(function(){n.adaptHeight(),n.props.autoplay&&n.autoPlay("update")})),"progressive"===n.props.lazyLoad&&(n.lazyLoadTimer=setInterval(n.progressiveLazyLoad,1e3)),n.ro=new p.default((function(){n.state.animating?(n.onWindowResized(!1),n.callbackTimers.push(setTimeout((function(){return n.onWindowResized()}),n.props.speed))):n.onWindowResized()})),n.ro.observe(n.list),Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"),(function(e){e.onfocus=n.props.pauseOnFocus?n.onSlideFocus:null,e.onblur=n.props.pauseOnFocus?n.onSlideBlur:null})),window&&(window.addEventListener?window.addEventListener("resize",n.onWindowResized):window.attachEvent("onresize",n.onWindowResized))})),S(O(n),"componentWillUnmount",(function(){n.animationEndCallback&&clearTimeout(n.animationEndCallback),n.lazyLoadTimer&&clearInterval(n.lazyLoadTimer),n.callbackTimers.length&&(n.callbackTimers.forEach((function(e){return clearTimeout(e)})),n.callbackTimers=[]),window.addEventListener?window.removeEventListener("resize",n.onWindowResized):window.detachEvent("onresize",n.onWindowResized),n.autoplayTimer&&clearInterval(n.autoplayTimer)})),S(O(n),"UNSAFE_componentWillReceiveProps",(function(e){for(var t=m({listRef:n.list,trackRef:n.track},e,{},n.state),o=!1,i=0,a=Object.keys(n.props);i<a.length;i++){var l=a[i];if(!e.hasOwnProperty(l)){o=!0;break}if("object"!==v(e[l])&&"function"!=typeof e[l]&&e[l]!==n.props[l]){o=!0;break}}n.updateState(t,o,(function(){n.state.currentSlide>=r.default.Children.count(e.children)&&n.changeSlide({message:"index",index:r.default.Children.count(e.children)-e.slidesToShow,currentSlide:n.state.currentSlide}),e.autoplay?n.autoPlay("update"):n.pause("paused")}))})),S(O(n),"componentDidUpdate",(function(){if(n.checkImagesLoad(),n.props.onReInit&&n.props.onReInit(),n.props.lazyLoad){var e=(0,c.getOnDemandLazySlides)(m({},n.props,{},n.state));e.length>0&&(n.setState((function(t){return{lazyLoadedList:t.lazyLoadedList.concat(e)}})),n.props.onLazyLoad&&n.props.onLazyLoad(e))}n.adaptHeight()})),S(O(n),"onWindowResized",(function(e){n.debouncedResize&&n.debouncedResize.cancel(),n.debouncedResize=(0,a.default)((function(){return n.resizeWindow(e)}),50),n.debouncedResize()})),S(O(n),"resizeWindow",(function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(o.default.findDOMNode(n.track)){var t=m({listRef:n.list,trackRef:n.track},n.props,{},n.state);n.updateState(t,e,(function(){n.props.autoplay?n.autoPlay("update"):n.pause("paused")})),n.setState({animating:!1}),clearTimeout(n.animationEndCallback),delete n.animationEndCallback}})),S(O(n),"updateState",(function(e,t,o){var i=(0,c.initializedState)(e);e=m({},e,{},i,{slideIndex:i.currentSlide}),e=m({},e,{left:(0,c.getTrackLeft)(e)});var a=(0,c.getTrackCSS)(e);(t||r.default.Children.count(n.props.children)!==r.default.Children.count(e.children))&&(i.trackStyle=a),n.setState(i,o)})),S(O(n),"ssrInit",(function(){if(n.props.variableWidth){var e=0,t=0,o=[],i=(0,c.getPreClones)(m({},n.props,{},n.state,{slideCount:n.props.children.length})),a=(0,c.getPostClones)(m({},n.props,{},n.state,{slideCount:n.props.children.length}));n.props.children.forEach((function(t){o.push(t.props.style.width),e+=t.props.style.width}));for(var l=0;l<i;l++)t+=o[o.length-1-l],e+=o[o.length-1-l];for(var s=0;s<a;s++)e+=o[s];for(var u=0;u<n.state.currentSlide;u++)t+=o[u];var f={width:e+"px",left:-t+"px"};if(n.props.centerMode){var p="".concat(o[n.state.currentSlide],"px");f.left="calc(".concat(f.left," + (100% - ").concat(p,") / 2 ) ")}n.setState({trackStyle:f})}else{var d=r.default.Children.count(n.props.children),y=m({},n.props,{},n.state,{slideCount:d}),h=(0,c.getPreClones)(y)+(0,c.getPostClones)(y)+d,v=100/n.props.slidesToShow*h,b=100/h,g=-b*((0,c.getPreClones)(y)+n.state.currentSlide)*v/100;n.props.centerMode&&(g+=(100-b*v/100)/2);var O={width:v+"%",left:g+"%"};n.setState({slideWidth:b+"%",trackStyle:O})}})),S(O(n),"checkImagesLoad",(function(){var e=document.querySelectorAll(".slick-slide img"),t=e.length,r=0;Array.prototype.forEach.call(e,(function(e){var o=function(){return++r&&r>=t&&n.onWindowResized()};if(e.onclick){var i=e.onclick;e.onclick=function(){i(),e.parentNode.focus()}}else e.onclick=function(){return e.parentNode.focus()};e.onload||(n.props.lazyLoad?e.onload=function(){n.adaptHeight(),n.callbackTimers.push(setTimeout(n.onWindowResized,n.props.speed))}:(e.onload=o,e.onerror=function(){o(),n.props.onLazyLoadError&&n.props.onLazyLoadError()}))}))})),S(O(n),"progressiveLazyLoad",(function(){for(var e=[],t=m({},n.props,{},n.state),r=n.state.currentSlide;r<n.state.slideCount+(0,c.getPostClones)(t);r++)if(n.state.lazyLoadedList.indexOf(r)<0){e.push(r);break}for(var o=n.state.currentSlide-1;o>=-(0,c.getPreClones)(t);o--)if(n.state.lazyLoadedList.indexOf(o)<0){e.push(o);break}e.length>0?(n.setState((function(t){return{lazyLoadedList:t.lazyLoadedList.concat(e)}})),n.props.onLazyLoad&&n.props.onLazyLoad(e)):n.lazyLoadTimer&&(clearInterval(n.lazyLoadTimer),delete n.lazyLoadTimer)})),S(O(n),"slideHandler",(function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=n.props,o=r.asNavFor,i=r.beforeChange,a=r.onLazyLoad,l=r.speed,s=r.afterChange,u=n.state.currentSlide,f=(0,c.slideHandler)(m({index:e},n.props,{},n.state,{trackRef:n.track,useCSS:n.props.useCSS&&!t})),p=f.state,d=f.nextState;if(p){i&&i(u,p.currentSlide);var y=p.lazyLoadedList.filter((function(e){return n.state.lazyLoadedList.indexOf(e)<0}));a&&y.length>0&&a(y),n.setState(p,(function(){o&&o.innerSlider.slideHandler(e),d&&(n.animationEndCallback=setTimeout((function(){var e=d.animating,t=h(d,["animating"]);n.setState(t,(function(){n.callbackTimers.push(setTimeout((function(){return n.setState({animating:e})}),10)),s&&s(p.currentSlide),delete n.animationEndCallback}))}),l))}))}})),S(O(n),"changeSlide",(function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=m({},n.props,{},n.state),o=(0,c.changeSlide)(r,e);(0===o||o)&&(!0===t?n.slideHandler(o,t):n.slideHandler(o))})),S(O(n),"clickHandler",(function(e){!1===n.clickable&&(e.stopPropagation(),e.preventDefault()),n.clickable=!0})),S(O(n),"keyHandler",(function(e){var t=(0,c.keyHandler)(e,n.props.accessibility,n.props.rtl);""!==t&&n.changeSlide({message:t})})),S(O(n),"selectHandler",(function(e){n.changeSlide(e)})),S(O(n),"disableBodyScroll",(function(){window.ontouchmove=function(e){(e=e||window.event).preventDefault&&e.preventDefault(),e.returnValue=!1}})),S(O(n),"enableBodyScroll",(function(){window.ontouchmove=null})),S(O(n),"swipeStart",(function(e){n.props.verticalSwiping&&n.disableBodyScroll();var t=(0,c.swipeStart)(e,n.props.swipe,n.props.draggable);""!==t&&n.setState(t)})),S(O(n),"swipeMove",(function(e){var t=(0,c.swipeMove)(e,m({},n.props,{},n.state,{trackRef:n.track,listRef:n.list,slideIndex:n.state.currentSlide}));t&&(t.swiping&&(n.clickable=!1),n.setState(t))})),S(O(n),"swipeEnd",(function(e){var t=(0,c.swipeEnd)(e,m({},n.props,{},n.state,{trackRef:n.track,listRef:n.list,slideIndex:n.state.currentSlide}));if(t){var r=t.triggerSlideHandler;delete t.triggerSlideHandler,n.setState(t),void 0!==r&&(n.slideHandler(r),n.props.verticalSwiping&&n.enableBodyScroll())}})),S(O(n),"slickPrev",(function(){n.callbackTimers.push(setTimeout((function(){return n.changeSlide({message:"previous"})}),0))})),S(O(n),"slickNext",(function(){n.callbackTimers.push(setTimeout((function(){return n.changeSlide({message:"next"})}),0))})),S(O(n),"slickGoTo",(function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e=Number(e),isNaN(e))return"";n.callbackTimers.push(setTimeout((function(){return n.changeSlide({message:"index",index:e,currentSlide:n.state.currentSlide},t)}),0))})),S(O(n),"play",(function(){var e;if(n.props.rtl)e=n.state.currentSlide-n.props.slidesToScroll;else{if(!(0,c.canGoNext)(m({},n.props,{},n.state)))return!1;e=n.state.currentSlide+n.props.slidesToScroll}n.slideHandler(e)})),S(O(n),"autoPlay",(function(e){n.autoplayTimer&&clearInterval(n.autoplayTimer);var t=n.state.autoplaying;if("update"===e){if("hovered"===t||"focused"===t||"paused"===t)return}else if("leave"===e){if("paused"===t||"focused"===t)return}else if("blur"===e&&("paused"===t||"hovered"===t))return;n.autoplayTimer=setInterval(n.play,n.props.autoplaySpeed+50),n.setState({autoplaying:"playing"})})),S(O(n),"pause",(function(e){n.autoplayTimer&&(clearInterval(n.autoplayTimer),n.autoplayTimer=null);var t=n.state.autoplaying;"paused"===e?n.setState({autoplaying:"paused"}):"focused"===e?"hovered"!==t&&"playing"!==t||n.setState({autoplaying:"focused"}):"playing"===t&&n.setState({autoplaying:"hovered"})})),S(O(n),"onDotsOver",(function(){return n.props.autoplay&&n.pause("hovered")})),S(O(n),"onDotsLeave",(function(){return n.props.autoplay&&"hovered"===n.state.autoplaying&&n.autoPlay("leave")})),S(O(n),"onTrackOver",(function(){return n.props.autoplay&&n.pause("hovered")})),S(O(n),"onTrackLeave",(function(){return n.props.autoplay&&"hovered"===n.state.autoplaying&&n.autoPlay("leave")})),S(O(n),"onSlideFocus",(function(){return n.props.autoplay&&n.pause("focused")})),S(O(n),"onSlideBlur",(function(){return n.props.autoplay&&"focused"===n.state.autoplaying&&n.autoPlay("blur")})),S(O(n),"render",(function(){var e,t,o,i=(0,l.default)("slick-slider",n.props.className,{"slick-vertical":n.props.vertical,"slick-initialized":!0}),a=m({},n.props,{},n.state),p=(0,c.extractObject)(a,["fade","cssEase","speed","infinite","centerMode","focusOnSelect","currentSlide","lazyLoad","lazyLoadedList","rtl","slideWidth","slideHeight","listHeight","vertical","slidesToShow","slidesToScroll","slideCount","trackStyle","variableWidth","unslick","centerPadding"]),d=n.props.pauseOnHover;if(p=m({},p,{onMouseEnter:d?n.onTrackOver:null,onMouseLeave:d?n.onTrackLeave:null,onMouseOver:d?n.onTrackOver:null,focusOnSelect:n.props.focusOnSelect?n.selectHandler:null}),!0===n.props.dots&&n.state.slideCount>=n.props.slidesToShow){var h=(0,c.extractObject)(a,["dotsClass","slideCount","slidesToShow","currentSlide","slidesToScroll","clickHandler","children","customPaging","infinite","appendDots"]),v=n.props.pauseOnDotsHover;h=m({},h,{clickHandler:n.changeSlide,onMouseEnter:v?n.onDotsLeave:null,onMouseOver:v?n.onDotsOver:null,onMouseLeave:v?n.onDotsLeave:null}),e=r.default.createElement(u.Dots,h)}var b=(0,c.extractObject)(a,["infinite","centerMode","currentSlide","slideCount","slidesToShow","prevArrow","nextArrow"]);b.clickHandler=n.changeSlide,n.props.arrows&&(t=r.default.createElement(f.PrevArrow,b),o=r.default.createElement(f.NextArrow,b));var g=null;n.props.vertical&&(g={height:n.state.listHeight});var O=null;!1===n.props.vertical?!0===n.props.centerMode&&(O={padding:"0px "+n.props.centerPadding}):!0===n.props.centerMode&&(O={padding:n.props.centerPadding+" 0px"});var w=m({},g,{},O),S=n.props.touchMove,P={className:"slick-list",style:w,onClick:n.clickHandler,onMouseDown:S?n.swipeStart:null,onMouseMove:n.state.dragging&&S?n.swipeMove:null,onMouseUp:S?n.swipeEnd:null,onMouseLeave:n.state.dragging&&S?n.swipeEnd:null,onTouchStart:S?n.swipeStart:null,onTouchMove:n.state.dragging&&S?n.swipeMove:null,onTouchEnd:S?n.swipeEnd:null,onTouchCancel:n.state.dragging&&S?n.swipeEnd:null,onKeyDown:n.props.accessibility?n.keyHandler:null},k={className:i,dir:"ltr",style:n.props.style};return n.props.unslick&&(P={className:"slick-list"},k={className:i}),r.default.createElement("div",k,n.props.unslick?"":t,r.default.createElement("div",y({ref:n.listRefHandler},P),r.default.createElement(s.Track,y({ref:n.trackRefHandler},p),n.props.children)),n.props.unslick?"":o,n.props.unslick?"":e)})),n.list=null,n.track=null,n.state=m({},i.default,{currentSlide:n.props.initialSlide,slideCount:r.default.Children.count(n.props.children)}),n.callbackTimers=[],n.clickable=!0,n.debouncedResize=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,e),t}(r.default.Component);t.InnerSlider=P},821:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={animating:!1,autoplaying:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,dragging:!1,edgeDragged:!1,initialized:!1,lazyLoadedList:[],listHeight:null,listWidth:null,scrolling:!1,slideCount:null,slideHeight:null,slideWidth:null,swipeLeft:null,swiped:!1,swiping:!1,touchObject:{startX:0,startY:0,curX:0,curY:0},trackStyle:{},trackWidth:0};t.default=r},822:function(e,t,n){(function(t){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,l="object"==typeof t&&t&&t.Object===Object&&t,c="object"==typeof self&&self&&self.Object===Object&&self,s=l||c||Function("return this")(),u=Object.prototype.toString,f=Math.max,p=Math.min,d=function(){return s.Date.now()};function y(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function h(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(y(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=y(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var l=o.test(e);return l||i.test(e)?a(e.slice(2),l?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var r,o,i,a,l,c,s=0,u=!1,v=!1,b=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function m(t){var n=r,i=o;return r=o=void 0,s=t,a=e.apply(i,n)}function g(e){return s=e,l=setTimeout(w,t),u?m(e):a}function O(e){var n=e-c;return void 0===c||n>=t||n<0||v&&e-s>=i}function w(){var e=d();if(O(e))return S(e);l=setTimeout(w,function(e){var n=t-(e-c);return v?p(n,i-(e-s)):n}(e))}function S(e){return l=void 0,b&&r?m(e):(r=o=void 0,a)}function P(){var e=d(),n=O(e);if(r=arguments,o=this,c=e,n){if(void 0===l)return g(c);if(v)return l=setTimeout(w,t),m(c)}return void 0===l&&(l=setTimeout(w,t)),a}return t=h(t)||0,y(n)&&(u=!!n.leading,i=(v="maxWait"in n)?f(h(n.maxWait)||0,t):i,b="trailing"in n?!!n.trailing:b),P.cancel=function(){void 0!==l&&clearTimeout(l),s=0,r=c=o=l=void 0},P.flush=function(){return void 0===l?a:S(d())},P}}).call(this,n(61))},823:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Track=void 0;var r=a(n(0)),o=a(n(20)),i=n(793);function a(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(n,!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=function(e){var t,n,r,o,i;return r=(i=e.rtl?e.slideCount-1-e.index:e.index)<0||i>=e.slideCount,e.centerMode?(o=Math.floor(e.slidesToShow/2),n=(i-e.currentSlide)%e.slideCount==0,i>e.currentSlide-o-1&&i<=e.currentSlide+o&&(t=!0)):t=e.currentSlide<=i&&i<e.currentSlide+e.slidesToShow,{"slick-slide":!0,"slick-active":t,"slick-center":n,"slick-cloned":r,"slick-current":i===e.currentSlide}},m=function(e,t){return e.key||t},g=function(e){var t,n=[],a=[],l=[],c=r.default.Children.count(e.children),s=(0,i.lazyStartIndex)(e),u=(0,i.lazyEndIndex)(e);return r.default.Children.forEach(e.children,(function(f,p){var d,y={message:"children",index:p,slidesToScroll:e.slidesToScroll,currentSlide:e.currentSlide};d=!e.lazyLoad||e.lazyLoad&&e.lazyLoadedList.indexOf(p)>=0?f:r.default.createElement("div",null);var v=function(e){var t={};return void 0!==e.variableWidth&&!1!==e.variableWidth||(t.width=e.slideWidth),e.fade&&(t.position="relative",e.vertical?t.top=-e.index*parseInt(e.slideHeight):t.left=-e.index*parseInt(e.slideWidth),t.opacity=e.currentSlide===e.index?1:0,t.transition="opacity "+e.speed+"ms "+e.cssEase+", visibility "+e.speed+"ms "+e.cssEase,t.WebkitTransition="opacity "+e.speed+"ms "+e.cssEase+", visibility "+e.speed+"ms "+e.cssEase),t}(h({},e,{index:p})),g=d.props.className||"",O=b(h({},e,{index:p}));if(n.push(r.default.cloneElement(d,{key:"original"+m(d,p),"data-index":p,className:(0,o.default)(O,g),tabIndex:"-1","aria-hidden":!O["slick-active"],style:h({outline:"none"},d.props.style||{},{},v),onClick:function(t){d.props&&d.props.onClick&&d.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(y)}})),e.infinite&&!1===e.fade){var w=c-p;w<=(0,i.getPreClones)(e)&&c!==e.slidesToShow&&((t=-w)>=s&&(d=f),O=b(h({},e,{index:t})),a.push(r.default.cloneElement(d,{key:"precloned"+m(d,t),"data-index":t,tabIndex:"-1",className:(0,o.default)(O,g),"aria-hidden":!O["slick-active"],style:h({},d.props.style||{},{},v),onClick:function(t){d.props&&d.props.onClick&&d.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(y)}}))),c!==e.slidesToShow&&((t=c+p)<u&&(d=f),O=b(h({},e,{index:t})),l.push(r.default.cloneElement(d,{key:"postcloned"+m(d,t),"data-index":t,tabIndex:"-1",className:(0,o.default)(O,g),"aria-hidden":!O["slick-active"],style:h({},d.props.style||{},{},v),onClick:function(t){d.props&&d.props.onClick&&d.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(y)}})))}})),e.rtl?a.concat(n,l).reverse():a.concat(n,l)},O=function(e){function t(){return s(this,t),f(this,p(t).apply(this,arguments))}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),n=t,(o=[{key:"render",value:function(){var e=g(this.props),t=this.props,n={onMouseEnter:t.onMouseEnter,onMouseOver:t.onMouseOver,onMouseLeave:t.onMouseLeave};return r.default.createElement("div",c({className:"slick-track",style:this.props.trackStyle},n),e)}}])&&u(n.prototype,o),i&&u(n,i),t}(r.default.PureComponent);t.Track=O},824:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dots=void 0;var r=i(n(0)),o=i(n(20));function i(e){return e&&e.__esModule?e:{default:e}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var y=function(e){function t(){return s(this,t),f(this,p(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),n=t,(i=[{key:"clickHandler",value:function(e,t){t.preventDefault(),this.props.clickHandler(e)}},{key:"render",value:function(){var e,t=this,n=(e={slideCount:this.props.slideCount,slidesToScroll:this.props.slidesToScroll,slidesToShow:this.props.slidesToShow,infinite:this.props.infinite}).infinite?Math.ceil(e.slideCount/e.slidesToScroll):Math.ceil((e.slideCount-e.slidesToShow)/e.slidesToScroll)+1,i=this.props,a={onMouseEnter:i.onMouseEnter,onMouseOver:i.onMouseOver,onMouseLeave:i.onMouseLeave},s=Array.apply(null,Array(n+1).join("0").split("")).map((function(e,n){var i=n*t.props.slidesToScroll,a=n*t.props.slidesToScroll+(t.props.slidesToScroll-1),l=(0,o.default)({"slick-active":t.props.currentSlide>=i&&t.props.currentSlide<=a}),c={message:"dots",index:n,slidesToScroll:t.props.slidesToScroll,currentSlide:t.props.currentSlide},s=t.clickHandler.bind(t,c);return r.default.createElement("li",{key:n,className:l},r.default.cloneElement(t.props.customPaging(n),{onClick:s}))}));return r.default.cloneElement(this.props.appendDots(s),function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(n,!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:this.props.dotsClass},a))}}])&&u(n.prototype,i),a&&u(n,a),t}(r.default.PureComponent);t.Dots=y},825:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NextArrow=t.PrevArrow=void 0;var r=a(n(0)),o=a(n(20)),i=n(793);function a(e){return e&&e.__esModule?e:{default:e}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(n,!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t,n){return t&&d(e.prototype,t),n&&d(e,n),e}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var g=function(e){function t(){return p(this,t),h(this,v(t).apply(this,arguments))}return b(t,e),y(t,[{key:"clickHandler",value:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)}},{key:"render",value:function(){var e={"slick-arrow":!0,"slick-prev":!0},t=this.clickHandler.bind(this,{message:"previous"});!this.props.infinite&&(0===this.props.currentSlide||this.props.slideCount<=this.props.slidesToShow)&&(e["slick-disabled"]=!0,t=null);var n={key:"0","data-role":"none",className:(0,o.default)(e),style:{display:"block"},onClick:t},i={currentSlide:this.props.currentSlide,slideCount:this.props.slideCount};return this.props.prevArrow?r.default.cloneElement(this.props.prevArrow,u({},n,{},i)):r.default.createElement("button",c({key:"0",type:"button"},n)," ","Previous")}}]),t}(r.default.PureComponent);t.PrevArrow=g;var O=function(e){function t(){return p(this,t),h(this,v(t).apply(this,arguments))}return b(t,e),y(t,[{key:"clickHandler",value:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)}},{key:"render",value:function(){var e={"slick-arrow":!0,"slick-next":!0},t=this.clickHandler.bind(this,{message:"next"});(0,i.canGoNext)(this.props)||(e["slick-disabled"]=!0,t=null);var n={key:"1","data-role":"none",className:(0,o.default)(e),style:{display:"block"},onClick:t},a={currentSlide:this.props.currentSlide,slideCount:this.props.slideCount};return this.props.nextArrow?r.default.cloneElement(this.props.nextArrow,u({},n,{},a)):r.default.createElement("button",c({key:"1",type:"button"},n)," ","Next")}}]),t}(r.default.PureComponent);t.NextArrow=O},826:function(e,t,n){var r=n(827),o=function(e){var t="",n=Object.keys(e);return n.forEach((function(o,i){var a=e[o];(function(e){return/[height|width]$/.test(e)})(o=r(o))&&"number"==typeof a&&(a+="px"),t+=!0===a?o:!1===a?"not "+o:"("+o+": "+a+")",i<n.length-1&&(t+=" and ")})),t};e.exports=function(e){var t="";return"string"==typeof e?e:e instanceof Array?(e.forEach((function(n,r){t+=o(n),r<e.length-1&&(t+=", ")})),t):o(e)}},827:function(e,t){e.exports=function(e){return e.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()})).toLowerCase()}},828:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(0))&&r.__esModule?r:{default:r};var i={accessibility:!0,adaptiveHeight:!1,afterChange:null,appendDots:function(e){return o.default.createElement("ul",{style:{display:"block"}},e)},arrows:!0,autoplay:!1,autoplaySpeed:3e3,beforeChange:null,centerMode:!1,centerPadding:"50px",className:"",cssEase:"ease",customPaging:function(e){return o.default.createElement("button",null,e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:null,nextArrow:null,onEdge:null,onInit:null,onLazyLoadError:null,onReInit:null,pauseOnDotsHover:!1,pauseOnFocus:!1,pauseOnHover:!0,prevArrow:null,responsive:null,rows:1,rtl:!1,slide:"div",slidesPerRow:1,slidesToScroll:1,slidesToShow:1,speed:500,swipe:!0,swipeEvent:null,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,waitForAnimate:!0};t.default=i},831:function(e,t,n){e.exports=function(){var e=[],t=[],n={},r={},o={};function i(e){return"string"==typeof e?new RegExp("^"+e+"$","i"):e}function a(e,t){return e===t?t:e===e.toLowerCase()?t.toLowerCase():e===e.toUpperCase()?t.toUpperCase():e[0]===e[0].toUpperCase()?t.charAt(0).toUpperCase()+t.substr(1).toLowerCase():t.toLowerCase()}function l(e,t){return e.replace(/\$(\d{1,2})/g,(function(e,n){return t[n]||""}))}function c(e,t){return e.replace(t[0],(function(n,r){var o=l(t[1],arguments);return a(""===n?e[r-1]:n,o)}))}function s(e,t,r){if(!e.length||n.hasOwnProperty(e))return t;for(var o=r.length;o--;){var i=r[o];if(i[0].test(t))return c(t,i)}return t}function u(e,t,n){return function(r){var o=r.toLowerCase();return t.hasOwnProperty(o)?a(r,o):e.hasOwnProperty(o)?a(r,e[o]):s(o,r,n)}}function f(e,t,n,r){return function(r){var o=r.toLowerCase();return!!t.hasOwnProperty(o)||!e.hasOwnProperty(o)&&s(o,o,n)===o}}function p(e,t,n){return(n?t+" ":"")+(1===t?p.singular(e):p.plural(e))}return p.plural=u(o,r,e),p.isPlural=f(o,r,e),p.singular=u(r,o,t),p.isSingular=f(r,o,t),p.addPluralRule=function(t,n){e.push([i(t),n])},p.addSingularRule=function(e,n){t.push([i(e),n])},p.addUncountableRule=function(e){"string"!=typeof e?(p.addPluralRule(e,"$0"),p.addSingularRule(e,"$0")):n[e.toLowerCase()]=!0},p.addIrregularRule=function(e,t){t=t.toLowerCase(),e=e.toLowerCase(),o[e]=t,r[t]=e},[["I","we"],["me","us"],["he","they"],["she","they"],["them","them"],["myself","ourselves"],["yourself","yourselves"],["itself","themselves"],["herself","themselves"],["himself","themselves"],["themself","themselves"],["is","are"],["was","were"],["has","have"],["this","these"],["that","those"],["echo","echoes"],["dingo","dingoes"],["volcano","volcanoes"],["tornado","tornadoes"],["torpedo","torpedoes"],["genus","genera"],["viscus","viscera"],["stigma","stigmata"],["stoma","stomata"],["dogma","dogmata"],["lemma","lemmata"],["schema","schemata"],["anathema","anathemata"],["ox","oxen"],["axe","axes"],["die","dice"],["yes","yeses"],["foot","feet"],["eave","eaves"],["goose","geese"],["tooth","teeth"],["quiz","quizzes"],["human","humans"],["proof","proofs"],["carve","carves"],["valve","valves"],["looey","looies"],["thief","thieves"],["groove","grooves"],["pickaxe","pickaxes"],["passerby","passersby"]].forEach((function(e){return p.addIrregularRule(e[0],e[1])})),[[/s?$/i,"s"],[/[^\u0000-\u007F]$/i,"$0"],[/([^aeiou]ese)$/i,"$1"],[/(ax|test)is$/i,"$1es"],[/(alias|[^aou]us|t[lm]as|gas|ris)$/i,"$1es"],[/(e[mn]u)s?$/i,"$1s"],[/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i,"$1"],[/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,"$1i"],[/(alumn|alg|vertebr)(?:a|ae)$/i,"$1ae"],[/(seraph|cherub)(?:im)?$/i,"$1im"],[/(her|at|gr)o$/i,"$1oes"],[/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i,"$1a"],[/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i,"$1a"],[/sis$/i,"ses"],[/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i,"$1$2ves"],[/([^aeiouy]|qu)y$/i,"$1ies"],[/([^ch][ieo][ln])ey$/i,"$1ies"],[/(x|ch|ss|sh|zz)$/i,"$1es"],[/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i,"$1ices"],[/\b((?:tit)?m|l)(?:ice|ouse)$/i,"$1ice"],[/(pe)(?:rson|ople)$/i,"$1ople"],[/(child)(?:ren)?$/i,"$1ren"],[/eaux$/i,"$0"],[/m[ae]n$/i,"men"],["thou","you"]].forEach((function(e){return p.addPluralRule(e[0],e[1])})),[[/s$/i,""],[/(ss)$/i,"$1"],[/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i,"$1fe"],[/(ar|(?:wo|[ae])l|[eo][ao])ves$/i,"$1f"],[/ies$/i,"y"],[/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i,"$1ie"],[/\b(mon|smil)ies$/i,"$1ey"],[/\b((?:tit)?m|l)ice$/i,"$1ouse"],[/(seraph|cherub)im$/i,"$1"],[/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i,"$1"],[/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i,"$1sis"],[/(movie|twelve|abuse|e[mn]u)s$/i,"$1"],[/(test)(?:is|es)$/i,"$1is"],[/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,"$1us"],[/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i,"$1um"],[/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i,"$1on"],[/(alumn|alg|vertebr)ae$/i,"$1a"],[/(cod|mur|sil|vert|ind)ices$/i,"$1ex"],[/(matr|append)ices$/i,"$1ix"],[/(pe)(rson|ople)$/i,"$1rson"],[/(child)ren$/i,"$1"],[/(eau)x?$/i,"$1"],[/men$/i,"man"]].forEach((function(e){return p.addSingularRule(e[0],e[1])})),["adulthood","advice","agenda","aid","aircraft","alcohol","ammo","analytics","anime","athletics","audio","bison","blood","bream","buffalo","butter","carp","cash","chassis","chess","clothing","cod","commerce","cooperation","corps","debris","diabetes","digestion","elk","energy","equipment","excretion","expertise","firmware","flounder","fun","gallows","garbage","graffiti","hardware","headquarters","health","herpes","highjinks","homework","housework","information","jeans","justice","kudos","labour","literature","machinery","mackerel","mail","media","mews","moose","music","mud","manga","news","only","personnel","pike","plankton","pliers","police","pollution","premises","rain","research","rice","salmon","scissors","series","sewage","shambles","shrimp","software","species","staff","swine","tennis","traffic","transportation","trout","tuna","wealth","welfare","whiting","wildebeest","wildlife","you",/pok[eé]mon$/i,/[^aeiou]ese$/i,/deer$/i,/fish$/i,/measles$/i,/o[iu]s$/i,/pox$/i,/sheep$/i].forEach(p.addUncountableRule),p}()},832:function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){"function"==typeof e?e(t):"object"===r(e)&&e&&"current"in e&&(e.current=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.fillRef=o,t.composeRef=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){t.forEach((function(t){o(t,e)}))}}},833:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=a(n(68)),i=a(n(798));function a(e){return e&&e.__esModule?e:{default:e}}function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var u=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},f=function(e){var t=e.ellipsis,n=u(e,["ellipsis"]);return(0,o.default)("object"!==s(t),"Typography.Text","`ellipsis` only supports boolean value."),r.createElement(i.default,c({},n,{ellipsis:!!t,component:"span"}))};t.default=f},834:function(e,t,n){"use strict";var r=n(835),o={"text/plain":"Text","text/html":"Url",default:"Text"};e.exports=function(e,t){var n,i,a,l,c,s,u=!1;t||(t={}),n=t.debug||!1;try{if(a=r(),l=document.createRange(),c=document.getSelection(),(s=document.createElement("span")).textContent=e,s.style.all="unset",s.style.position="fixed",s.style.top=0,s.style.clip="rect(0, 0, 0, 0)",s.style.whiteSpace="pre",s.style.webkitUserSelect="text",s.style.MozUserSelect="text",s.style.msUserSelect="text",s.style.userSelect="text",s.addEventListener("copy",(function(r){if(r.stopPropagation(),t.format)if(r.preventDefault(),void 0===r.clipboardData){n&&console.warn("unable to use e.clipboardData"),n&&console.warn("trying IE specific stuff"),window.clipboardData.clearData();var i=o[t.format]||o.default;window.clipboardData.setData(i,e)}else r.clipboardData.clearData(),r.clipboardData.setData(t.format,e);t.onCopy&&(r.preventDefault(),t.onCopy(r.clipboardData))})),document.body.appendChild(s),l.selectNodeContents(s),c.addRange(l),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");u=!0}catch(r){n&&console.error("unable to copy using execCommand: ",r),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),t.onCopy&&t.onCopy(window.clipboardData),u=!0}catch(r){n&&console.error("unable to copy using clipboardData: ",r),n&&console.error("falling back to prompt"),i=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:"Copy to clipboard: #{key}, Enter"),window.prompt(i,e)}}finally{c&&("function"==typeof c.removeRange?c.removeRange(l):c.removeAllRanges()),s&&document.body.removeChild(s),a()}return u}},835:function(e,t){e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],r=0;r<e.rangeCount;r++)n.push(e.getRangeAt(r));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}},836:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==l(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),i=(r=n(807))&&r.__esModule?r:{default:r};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function d(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},v={border:0,background:"transparent",padding:0,lineHeight:"inherit",display:"inline-block"},b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(l,e);var t,n,r,a=p(l);function l(){var e;return s(this,l),(e=a.apply(this,arguments)).onKeyDown=function(e){e.keyCode===i.default.ENTER&&e.preventDefault()},e.onKeyUp=function(t){var n=t.keyCode,r=e.props.onClick;n===i.default.ENTER&&r&&r()},e.setRef=function(t){e.div=t},e}return t=l,(n=[{key:"focus",value:function(){this.div&&this.div.focus()}},{key:"blur",value:function(){this.div&&this.div.blur()}},{key:"render",value:function(){var e=this.props,t=e.style,n=e.noStyle,r=h(e,["style","noStyle"]);return o.createElement("div",c({role:"button",tabIndex:0,ref:this.setRef},r,{onKeyDown:this.onKeyDown,onKeyUp:this.onKeyUp,style:c(c({},n?null:v),t)}))}}])&&u(t.prototype,n),r&&u(t,r),l}(o.Component);t.default=b},837:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==f(e)&&"function"!=typeof e)return{default:e};var t=u();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=s(n(807)),i=s(n(20)),a=n(81),l=s(n(24)),c=s(n(347));function s(e){return e&&e.__esModule?e:{default:e}}function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return v(this,n)}}function v(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(u,e);var t,n,a,s=h(u);function u(){var e;return p(this,u),(e=s.apply(this,arguments)).inComposition=!1,e.state={current:""},e.onChange=function(t){var n=t.target.value;e.setState({current:n.replace(/[\r\n]/g,"")})},e.onCompositionStart=function(){e.inComposition=!0},e.onCompositionEnd=function(){e.inComposition=!1},e.onKeyDown=function(t){var n=t.keyCode;e.inComposition||(e.lastKeyCode=n)},e.onKeyUp=function(t){var n=t.keyCode,r=t.ctrlKey,i=t.altKey,a=t.metaKey,l=t.shiftKey,c=e.props.onCancel;e.lastKeyCode!==n||e.inComposition||r||i||a||l||(n===o.default.ENTER?e.confirmChange():n===o.default.ESC&&c())},e.onBlur=function(){e.confirmChange()},e.confirmChange=function(){var t=e.state.current;(0,e.props.onSave)(t.trim())},e.setTextarea=function(t){e.textarea=t},e}return t=u,a=[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.prevValue,r=e.value,o={prevValue:r};return n!==r&&(o.current=r),o}}],(n=[{key:"componentDidMount",value:function(){if(this.textarea&&this.textarea.resizableTextArea){var e=this.textarea.resizableTextArea.textArea;e.focus();var t=e.value.length;e.setSelectionRange(t,t)}}},{key:"render",value:function(){var e=this.state.current,t=this.props,n=t.prefixCls,o=t["aria-label"],a=t.className,s=t.style;return r.createElement("div",{className:(0,i.default)(n,"".concat(n,"-edit-content"),a),style:s},r.createElement(c.default,{ref:this.setTextarea,value:e,onChange:this.onChange,onKeyDown:this.onKeyDown,onKeyUp:this.onKeyUp,onCompositionStart:this.onCompositionStart,onCompositionEnd:this.onCompositionEnd,onBlur:this.onBlur,"aria-label":o,autoSize:!0}),r.createElement(l.default,{type:"enter",className:"".concat(n,"-edit-content-confirm")}))}}])&&d(t.prototype,n),a&&d(t,a),u}(r.Component);(0,a.polyfill)(m);var g=m;t.default=g},838:function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,i=n(12),a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=e[i]}n.default=e,t&&t.set(e,n);return n}(n(0)),l=(o=n(338))&&o.__esModule?o:{default:o};function c(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}var s,u={padding:0,margin:0,display:"inline",lineHeight:"inherit"};function f(e){if(!e)return 0;var t=e.match(/^\d*(\.\d*)?/);return t?Number(t[0]):0}t.default=function(e,t,n,r,o){s||((s=document.createElement("div")).setAttribute("aria-hidden","true"),document.body.appendChild(s));var c,p=window.getComputedStyle(e),d=(c=p,Array.prototype.slice.apply(c).map((function(e){return"".concat(e,": ").concat(c.getPropertyValue(e),";")})).join("")),y=f(p.lineHeight)*(t+1)+f(p.paddingTop)+f(p.paddingBottom);s.setAttribute("style",d),s.style.position="fixed",s.style.left="0",s.style.height="auto",s.style.minHeight="auto",s.style.maxHeight="auto",s.style.top="-999999px",s.style.zIndex="-1000",s.style.textOverflow="clip",s.style.whiteSpace="normal",s.style.webkitLineClamp="none";var h,v,b=(h=(0,l.default)(n),v=[],h.forEach((function(e){var t=v[v.length-1];"string"==typeof e&&"string"==typeof t?v[v.length-1]+=e:v.push(e)})),v);function m(){return s.offsetHeight<y}if((0,i.render)(a.createElement("div",{style:u},a.createElement("span",{style:u},b),a.createElement("span",{style:u},r)),s),m())return(0,i.unmountComponentAtNode)(s),{content:n,text:s.innerHTML,ellipsis:!1};var g=Array.prototype.slice.apply(s.childNodes[0].childNodes[0].cloneNode(!0).childNodes).filter((function(e){return 8!==e.nodeType})),O=Array.prototype.slice.apply(s.childNodes[0].childNodes[1].cloneNode(!0).childNodes);(0,i.unmountComponentAtNode)(s);var w=[];s.innerHTML="";var S=document.createElement("span");s.appendChild(S);var P=document.createTextNode(o);function k(e){S.insertBefore(e,P)}function E(e,t){var n=e.nodeType;if(1===n)return k(e),m()?{finished:!1,reactNode:b[t]}:(S.removeChild(e),{finished:!0,reactNode:null});if(3===n){var r=e.textContent||"",o=document.createTextNode(r);return k(o),function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:n.length,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=Math.floor((r+o)/2),l=n.slice(0,a);if(t.textContent=l,r>=o-1)for(var c=o;c>=r;c-=1){var s=n.slice(0,c);if(t.textContent=s,m())return c===n.length?{finished:!1,reactNode:n}:{finished:!0,reactNode:s}}return m()?e(t,n,a,o,a):e(t,n,r,a,i)}(o,r)}return{finished:!1,reactNode:null}}return S.appendChild(P),O.forEach((function(e){s.appendChild(e)})),g.some((function(e,t){var n=E(e,t),r=n.finished,o=n.reactNode;return o&&w.push(o),r})),{content:w,text:s.innerHTML,ellipsis:!0}}},839:function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=e[i]}n.default=e,t&&t.set(e,n);return n}(n(0)),i=c(n(165)),a=c(n(798)),l=n(98);function c(e){return e&&e.__esModule?e:{default:e}}function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var f=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},p=(0,l.tupleNum)(1,2,3,4),d=function(e){var t,n=e.level,r=void 0===n?1:n,l=f(e,["level"]);return-1!==p.indexOf(r)?t="h".concat(r):((0,i.default)(!1,"Title only accept `1 | 2 | 3 | 4` as `level` value."),t="h1"),o.createElement(a.default,u({},l,{component:t}))};t.default=d},840:function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=e[i]}n.default=e,t&&t.set(e,n);return n}(n(0)),a=(o=n(798))&&o.__esModule?o:{default:o};function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var s=function(e){return i.createElement(a.default,c({},e,{component:"div"}))};t.default=s},841:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==h(e)&&"function"!=typeof e)return{default:e};var t=y();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=d(n(20)),i=d(n(97)),a=n(81),l=d(n(24)),c=d(n(842)),s=n(32),u=n(843),f=d(n(68)),p=d(n(346));function d(e){return e&&e.__esModule?e:{default:e}}function y(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return y=function(){return e},e}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(){return(b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=S(e);if(t){var o=S(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return w(this,n)}}function w(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},k=new RegExp("^(".concat(u.PresetColorTypes.join("|"),")(-inverse)?$")),E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(u,e);var t,n,a,c=O(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=c.call(this,e)).state={visible:!0},t.handleIconClick=function(e){e.stopPropagation(),t.setVisible(!1,e)},t.renderTag=function(e){var n=t.props,o=n.children,a=P(n,["children"]),l="onClick"in a||o&&"a"===o.type,c=(0,i.default)(a,["onClose","afterClose","color","visible","closable","prefixCls"]);return l?r.createElement(p.default,null,r.createElement("span",b({},c,{className:t.getTagClassName(e),style:t.getTagStyle()}),o,t.renderCloseIcon())):r.createElement("span",b({},c,{className:t.getTagClassName(e),style:t.getTagStyle()}),o,t.renderCloseIcon())},(0,f.default)(!("afterClose"in e),"Tag","'afterClose' will be deprecated, please use 'onClose', we will remove this in the next version."),t}return t=u,a=[{key:"getDerivedStateFromProps",value:function(e){return"visible"in e?{visible:e.visible}:null}}],(n=[{key:"getTagStyle",value:function(){var e=this.props,t=e.color,n=e.style,r=this.isPresetColor();return b({backgroundColor:t&&!r?t:void 0},n)}},{key:"getTagClassName",value:function(e){var t,n=e.getPrefixCls,r=this.props,i=r.prefixCls,a=r.className,l=r.color,c=this.state.visible,s=this.isPresetColor(),u=n("tag",i);return(0,o.default)(u,(v(t={},"".concat(u,"-").concat(l),s),v(t,"".concat(u,"-has-color"),l&&!s),v(t,"".concat(u,"-hidden"),!c),t),a)}},{key:"setVisible",value:function(e,t){var n=this.props,r=n.onClose,o=n.afterClose;r&&r(t),o&&!r&&o(),t.defaultPrevented||"visible"in this.props||this.setState({visible:e})}},{key:"isPresetColor",value:function(){var e=this.props.color;return!!e&&k.test(e)}},{key:"renderCloseIcon",value:function(){return this.props.closable?r.createElement(l.default,{type:"close",onClick:this.handleIconClick}):null}},{key:"render",value:function(){return r.createElement(s.ConfigConsumer,null,this.renderTag)}}])&&m(t.prototype,n),a&&m(t,a),u}(r.Component);E.CheckableTag=c.default,E.defaultProps={closable:!1},(0,a.polyfill)(E);var C=E;t.default=C},842:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==c(e)&&"function"!=typeof e)return{default:e};var t=l();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),i=(r=n(20))&&r.__esModule?r:{default:r},a=n(32);function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(c,e);var t,n,r,l=y(c);function c(){var e;return f(this,c),(e=l.apply(this,arguments)).handleClick=function(){var t=e.props,n=t.checked,r=t.onChange;r&&r(!n)},e.renderCheckableTag=function(t){var n,r=t.getPrefixCls,a=e.props,l=a.prefixCls,c=a.className,f=a.checked,p=b(a,["prefixCls","className","checked"]),d=r("tag",l),y=(0,i.default)(d,(u(n={},"".concat(d,"-checkable"),!0),u(n,"".concat(d,"-checkable-checked"),f),n),c);return delete p.onChange,o.createElement("span",s({},p,{className:y,onClick:e.handleClick}))},e}return t=c,(n=[{key:"render",value:function(){return o.createElement(a.ConfigConsumer,null,this.renderCheckableTag)}}])&&p(t.prototype,n),r&&p(t,r),c}(o.Component);t.default=m},843:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PresetColorTypes=void 0;var r=(0,n(98).tuple)("pink","red","yellow","orange","cyan","green","blue","purple","geekblue","magenta","volcano","gold","lime");t.PresetColorTypes=r},844:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Object.keys(e).reduce((function(t,n){return"data-"!==n.substr(0,5)&&"aria-"!==n.substr(0,5)&&"role"!==n||"data-__"===n.substr(0,7)||(t[n]=e[n]),t}),{})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL3V0aWxzL2lubmVyU2xpZGVyVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3R5cG9ncmFwaHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3R5cG9ncmFwaHkvQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvdHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2xpYi9LZXlDb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9hbGVydC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvcG9wY29uZmlybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY2Fyb3VzZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL3NsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2lubmVyLXNsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5kZWJvdW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL3RyYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvZG90cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2Fycm93cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbjJtcS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLWNvbnZlcnQvY2FtZWwyaHlwaGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvZGVmYXVsdC1wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGx1cmFsaXplL3BsdXJhbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvX3V0aWwvcmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90eXBvZ3JhcGh5L1RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcHktdG8tY2xpcGJvYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90b2dnbGUtc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9fdXRpbC90cmFuc0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvdHlwb2dyYXBoeS9FZGl0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvdHlwb2dyYXBoeS91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90eXBvZ3JhcGh5L1RpdGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90eXBvZ3JhcGh5L1BhcmFncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvdGFnL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWcvQ2hlY2thYmxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9fdXRpbC9jb2xvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL191dGlsL2dldERhdGFPckFyaWFQcm9wcy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhblVzZURPTSIsInNsaWRlc09uTGVmdCIsInNsaWRlc09uUmlnaHQiLCJzaWJsaW5nRGlyZWN0aW9uIiwiZ2V0VG90YWxTbGlkZXMiLCJnZXRQb3N0Q2xvbmVzIiwiZ2V0UHJlQ2xvbmVzIiwiZ2V0VHJhY2tMZWZ0IiwiZ2V0VHJhY2tBbmltYXRlQ1NTIiwiZ2V0VHJhY2tDU1MiLCJjaGVja1NwZWNLZXlzIiwiZ2V0U2xpZGVDb3VudCIsImNoZWNrTmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsInN3aXBlRW5kIiwic3dpcGVNb3ZlIiwic3dpcGVTdGFydCIsImtleUhhbmRsZXIiLCJjaGFuZ2VTbGlkZSIsInNsaWRlSGFuZGxlciIsImluaXRpYWxpemVkU3RhdGUiLCJleHRyYWN0T2JqZWN0IiwiY2FuR29OZXh0IiwiZ2V0U3dpcGVEaXJlY3Rpb24iLCJnZXRIZWlnaHQiLCJnZXRXaWR0aCIsImxhenlTbGlkZXNPblJpZ2h0IiwibGF6eVNsaWRlc09uTGVmdCIsImxhenlFbmRJbmRleCIsImxhenlTdGFydEluZGV4IiwiZ2V0UmVxdWlyZWRMYXp5U2xpZGVzIiwiZ2V0T25EZW1hbmRMYXp5U2xpZGVzIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdERvbSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic3BlYyIsIm9uRGVtYW5kU2xpZGVzIiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic2xpZGVJbmRleCIsImxhenlMb2FkZWRMaXN0IiwiaW5kZXhPZiIsInJlcXVpcmVkU2xpZGVzIiwiY3VycmVudFNsaWRlIiwiY2VudGVyTW9kZSIsIk1hdGgiLCJmbG9vciIsInNsaWRlc1RvU2hvdyIsInBhcnNlSW50IiwiY2VudGVyUGFkZGluZyIsImVsZW0iLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInRvdWNoT2JqZWN0IiwieERpc3QiLCJ5RGlzdCIsInIiLCJzd2lwZUFuZ2xlIiwidmVydGljYWxTd2lwaW5nIiwidW5kZWZpbmVkIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInJvdW5kIiwiUEkiLCJhYnMiLCJjYW5HbyIsImluZmluaXRlIiwic2xpZGVDb3VudCIsIm5ld09iamVjdCIsInNsaWRlV2lkdGgiLCJDaGlsZHJlbiIsImNvdW50IiwiY2hpbGRyZW4iLCJsaXN0V2lkdGgiLCJjZWlsIiwiZmluZERPTU5vZGUiLCJsaXN0UmVmIiwidHJhY2tXaWR0aCIsInRyYWNrUmVmIiwidmVydGljYWwiLCJjZW50ZXJQYWRkaW5nQWRqIiwic2xpY2UiLCJzbGlkZUhlaWdodCIsInF1ZXJ5U2VsZWN0b3IiLCJsaXN0SGVpZ2h0IiwiaW5pdGlhbFNsaWRlIiwicnRsIiwic2xpZGVzVG9Mb2FkIiwiY29uY2F0Iiwic3RhdGUiLCJhdXRvcGxheWluZyIsImF1dG9wbGF5Iiwid2FpdEZvckFuaW1hdGUiLCJhbmltYXRpbmciLCJmYWRlIiwiaW5kZXgiLCJsYXp5TG9hZCIsInNsaWRlc1RvU2Nyb2xsIiwidXNlQ1NTIiwiZmluYWxTbGlkZSIsImFuaW1hdGlvbkxlZnQiLCJmaW5hbExlZnQiLCJhbmltYXRpb25TbGlkZSIsIm5leHRTdGF0ZSIsInRyYWNrU3R5bGUiLCJsZWZ0Iiwic3dpcGVMZWZ0Iiwib3B0aW9ucyIsImluZGV4T2Zmc2V0IiwicHJldmlvdXNJbnQiLCJzbGlkZU9mZnNldCIsInRhcmdldFNsaWRlIiwibWVzc2FnZSIsImRpcmVjdGlvbiIsIk51bWJlciIsImUiLCJhY2Nlc3NpYmlsaXR5IiwidGFnTmFtZSIsIm1hdGNoIiwia2V5Q29kZSIsInN3aXBlIiwiZHJhZ2dhYmxlIiwicHJldmVudERlZmF1bHQiLCJ0eXBlIiwiZHJhZ2dpbmciLCJ0b3VjaGVzIiwicGFnZVgiLCJjbGllbnRYIiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsaW5nIiwic3dpcGVUb1NsaWRlIiwiZWRnZUZyaWN0aW9uIiwiZWRnZURyYWdnZWQiLCJvbkVkZ2UiLCJzd2lwZWQiLCJzd2lwaW5nIiwic3dpcGVFdmVudCIsImN1ckxlZnQiLCJzd2lwZUxlbmd0aCIsInNxcnQiLCJwb3ciLCJ2ZXJ0aWNhbFN3aXBlTGVuZ3RoIiwicG9zaXRpb25PZmZzZXQiLCJkb3RDb3VudCIsInN3aXBlRGlyZWN0aW9uIiwidG91Y2hTd2lwZUxlbmd0aCIsInRvdWNoVGhyZXNob2xkIiwib25Td2lwZSIsIm1pblN3aXBlIiwibmV3U2xpZGUiLCJjdXJyZW50TGVmdCIsIm1heCIsImJyZWFrcG9pbnQiLCJjb3VudGVyIiwiaW5kZXhlcyIsIm1pbiIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwibiIsImNlbnRlck9mZnNldCIsInN3aXBlZFNsaWRlIiwic2xpZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsIkFycmF5IiwiZnJvbSIsImV2ZXJ5Iiwic2xpZGUiLCJvZmZzZXRUb3AiLCJvZmZzZXRMZWZ0IiwiY3VycmVudEluZGV4IiwiZGF0YXNldCIsImtleXNBcnJheSIsInJlZHVjZSIsImhhc093blByb3BlcnR5IiwiY29uc29sZSIsImVycm9yIiwidHJhY2tIZWlnaHQiLCJ0cmFja0NoaWxkcmVuIiwic3R5bGUiLCJvcGFjaXR5IiwidHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJ1c2VUcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsIndpZHRoIiwiaGVpZ2h0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInNwZWVkIiwiY3NzRWFzZSIsInVuc2xpY2siLCJ0YXJnZXRMZWZ0IiwidmFyaWFibGVXaWR0aCIsInNsaWRlc1RvT2Zmc2V0IiwidGFyZ2V0U2xpZGVJbmRleCIsInRyYWNrRWxlbSIsImNoaWxkTm9kZXMiLCJfcmVmIiwicmlnaHQiLCJfcmVmMiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIl9UeXBvZ3JhcGh5IiwiX1RleHQiLCJfVGl0bGUiLCJfUGFyYWdyYXBoIiwiVHlwb2dyYXBoeSIsIlRleHQiLCJUaXRsZSIsIlBhcmFncmFwaCIsIl9kZWZhdWx0IiwiUmVhY3QiLCJfdHlwZW9mIiwiY2FjaGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJwcm90b3R5cGUiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2NsYXNzbmFtZXMiLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiX3RvQXJyYXkiLCJfZmluZERPTU5vZGUiLCJfY29weVRvQ2xpcGJvYXJkIiwiX29taXQiLCJfcmNSZXNpemVPYnNlcnZlciIsIl9jb25maWdQcm92aWRlciIsIl9jb250ZXh0IiwiX0xvY2FsZVJlY2VpdmVyIiwiX3dhcm5pbmciLCJfdHJhbnNCdXR0b24iLCJfcmFmIiwiX3N0eWxlQ2hlY2tlciIsIl9pY29uIiwiX3Rvb2x0aXAiLCJfRWRpdGFibGUiLCJfdXRpbCIsIldlYWtNYXAiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJpc0FycmF5IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfaXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsInRvU3RyaW5nIiwiY29uc3RydWN0b3IiLCJuYW1lIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImxlbiIsImFycjIiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJEYXRlIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsInJlc3VsdCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwiTmV3VGFyZ2V0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Jlc3QiLCJzIiwidCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaXNMaW5lQ2xhbXBTdXBwb3J0IiwiaXNUZXh0T3ZlcmZsb3dTdXBwb3J0IiwiQmFzZSIsIl9SZWFjdCRDb21wb25lbnQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfaW5oZXJpdHMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfc3VwZXIiLCJfdGhpcyIsImVkaXQiLCJjb3BpZWQiLCJlbGxpcHNpc1RleHQiLCJlbGxpcHNpc0NvbnRlbnQiLCJpc0VsbGlwc2lzIiwiZXhwYW5kZWQiLCJjbGllbnRSZW5kZXJlZCIsIm9uRXhwYW5kQ2xpY2siLCJvbkV4cGFuZCIsImdldEVsbGlwc2lzIiwic2V0U3RhdGUiLCJvbkVkaXRDbGljayIsInRyaWdnZXJFZGl0Iiwib25FZGl0Q2hhbmdlIiwib25DaGFuZ2UiLCJnZXRFZGl0YWJsZSIsIm9uRWRpdENhbmNlbCIsIm9uQ29weUNsaWNrIiwiX3RoaXMkcHJvcHMiLCJjb3B5YWJsZSIsImNvcHlDb25maWciLCJ0ZXh0IiwiU3RyaW5nIiwib25Db3B5IiwiY29weUlkIiwic2V0VGltZW91dCIsInNldENvbnRlbnRSZWYiLCJub2RlIiwiY29udGVudCIsInNldEVkaXRSZWYiLCJlZGl0SWNvbiIsIm9uU3RhcnQiLCJmb2N1cyIsInJlc2l6ZU9uTmV4dEZyYW1lIiwiY2FuY2VsIiwicmFmSWQiLCJzeW5jRWxsaXBzaXMiLCJuZXh0UHJvcHMiLCJlZGl0YWJsZSIsInByZXZQcm9wcyIsImVsbGlwc2lzIiwicHJldkVsbGlwc2lzIiwicm93cyIsImNsZWFyVGltZW91dCIsImVkaXRpbmciLCJleHBhbmRhYmxlIiwiX3RoaXMkcHJvcHMyIiwiX3RoaXMkZ2V0RWxsaXBzaXMyIiwiX3RoaXMkc3RhdGUiLCJjYW5Vc2VDU1NFbGxpcHNpcyIsImNoaWxkIiwiX21lYXN1cmUiLCJyZW5kZXJPcGVyYXRpb25zIiwiZm9yY2VSZW5kZXIiLCJwcmVmaXhDbHMiLCJfdGhpcyRzdGF0ZTIiLCJjbGFzc05hbWUiLCJvbkNsaWNrIiwiZXhwYW5kU3RyIiwiX3RoaXMkcHJvcHMzIiwidGl0bGUiLCJlZGl0U3RyIiwicmVmIiwicm9sZSIsIl90aGlzJHByb3BzNCIsImNvcGllZFN0ciIsImNvcHlTdHIiLCJfdGhpcyRwcm9wczUiLCJvblNhdmUiLCJvbkNhbmNlbCIsImZvcmNlUmVuZGVyRXhwYW5kZWQiLCJyZW5kZXJFeHBhbmQiLCJyZW5kZXJFZGl0IiwicmVuZGVyQ29weSIsIl90aGlzMiIsIl90aGlzJHN0YXRlMyIsIl9hIiwiY29tcG9uZW50IiwiZGlzYWJsZWQiLCJyZXN0UHJvcHMiLCJ0ZXh0UHJvcHMiLCJjb25maWdDb25zdW1lclByb3BzIiwiY3NzRWxsaXBzaXMiLCJjc3NUZXh0T3ZlcmZsb3ciLCJjc3NMaW5lQ2xhbXAiLCJ0ZXh0Tm9kZSIsImFyaWFMYWJlbCIsIm1hcmsiLCJjb2RlIiwidW5kZXJsaW5lIiwiZGVsIiwic3Ryb25nIiwiY3VycmVudENvbnRlbnQiLCJ3cmFwIiwibmVlZGVkIiwidGFnIiwid3JhcHBlckRlY29yYXRpb25zIiwiY29tcG9uZW50TmFtZSIsIl9yZWY0IiwiX2NsYXNzTmFtZXMiLCJjb3B5IiwiZXhwYW5kIiwib25SZXNpemUiLCJXZWJraXRMaW5lQ2xhbXAiLCJyZW5kZXJFZGl0SW5wdXQiLCJyZW5kZXJDb250ZW50IiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwicG9seWZpbGwiLCJ3aXRoQ29uZmlnQ29uc3VtZXIiLCJSZWZUeXBvZ3JhcGh5IiwiY3VzdG9taXplUHJlZml4Q2xzIiwiX2EkY29tcG9uZW50IiwibWVyZ2VkUmVmIiwiY29tcG9zZVJlZiIsIkNvbmZpZ0NvbnN1bWVyIiwiZ2V0UHJlZml4Q2xzIiwiZm9yd2FyZFJlZiIsImRpc3BsYXlOYW1lIiwiVHlwb2dyYXBoeVdyYXBwZXIiLCJkZWZhdWx0IiwiS2V5Q29kZSIsIk1BQ19FTlRFUiIsIkJBQ0tTUEFDRSIsIlRBQiIsIk5VTV9DRU5URVIiLCJFTlRFUiIsIlNISUZUIiwiQ1RSTCIsIkFMVCIsIlBBVVNFIiwiQ0FQU19MT0NLIiwiRVNDIiwiU1BBQ0UiLCJQQUdFX1VQIiwiUEFHRV9ET1dOIiwiRU5EIiwiSE9NRSIsIkxFRlQiLCJVUCIsIlJJR0hUIiwiRE9XTiIsIlBSSU5UX1NDUkVFTiIsIklOU0VSVCIsIkRFTEVURSIsIlpFUk8iLCJPTkUiLCJUV08iLCJUSFJFRSIsIkZPVVIiLCJGSVZFIiwiU0lYIiwiU0VWRU4iLCJFSUdIVCIsIk5JTkUiLCJRVUVTVElPTl9NQVJLIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIlciLCJYIiwiWSIsIloiLCJNRVRBIiwiV0lOX0tFWV9SSUdIVCIsIkNPTlRFWFRfTUVOVSIsIk5VTV9aRVJPIiwiTlVNX09ORSIsIk5VTV9UV08iLCJOVU1fVEhSRUUiLCJOVU1fRk9VUiIsIk5VTV9GSVZFIiwiTlVNX1NJWCIsIk5VTV9TRVZFTiIsIk5VTV9FSUdIVCIsIk5VTV9OSU5FIiwiTlVNX01VTFRJUExZIiwiTlVNX1BMVVMiLCJOVU1fTUlOVVMiLCJOVU1fUEVSSU9EIiwiTlVNX0RJVklTSU9OIiwiRjEiLCJGMiIsIkYzIiwiRjQiLCJGNSIsIkY2IiwiRjciLCJGOCIsIkY5IiwiRjEwIiwiRjExIiwiRjEyIiwiTlVNTE9DSyIsIlNFTUlDT0xPTiIsIkRBU0giLCJFUVVBTFMiLCJDT01NQSIsIlBFUklPRCIsIlNMQVNIIiwiQVBPU1RST1BIRSIsIlNJTkdMRV9RVU9URSIsIk9QRU5fU1FVQVJFX0JSQUNLRVQiLCJCQUNLU0xBU0giLCJDTE9TRV9TUVVBUkVfQlJBQ0tFVCIsIldJTl9LRVkiLCJNQUNfRkZfTUVUQSIsIldJTl9JTUUiLCJpc1RleHRNb2RpZnlpbmdLZXlFdmVudCIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5IiwiaXNDaGFyYWN0ZXJLZXkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJSZWFjdERPTSIsIl9yY0FuaW1hdGUiLCJfZ2V0RGF0YU9yQXJpYVByb3BzIiwibm9vcCIsIkFsZXJ0IiwiaGFuZGxlQ2xvc2UiLCJkb20iLCJjbG9zaW5nIiwib25DbG9zZSIsImFuaW1hdGlvbkVuZCIsImNsb3NlZCIsImFmdGVyQ2xvc2UiLCJyZW5kZXJBbGVydCIsImRlc2NyaXB0aW9uIiwiY2xvc2VUZXh0IiwiYmFubmVyIiwiX3RoaXMkcHJvcHMkY2xhc3NOYW1lIiwiaWNvbiIsImNsb3NhYmxlIiwic2hvd0ljb24iLCJpY29uVHlwZSIsImljb25UaGVtZSIsImFsZXJ0Q2xzIiwiY2xvc2VJY29uIiwidGFiSW5kZXgiLCJkYXRhT3JBcmlhUHJvcHMiLCJpY29uTm9kZSIsImlzVmFsaWRFbGVtZW50IiwiY2xvbmVFbGVtZW50IiwidGhlbWUiLCJzaG93UHJvcCIsInRyYW5zaXRpb25OYW1lIiwib25FbmQiLCJfYnV0dG9uIiwiX2RlZmF1bHQyIiwiUG9wY29uZmlybSIsIm9uQ29uZmlybSIsInNldFZpc2libGUiLCJvblZpc2libGVDaGFuZ2UiLCJ2aXNpYmxlIiwic2F2ZVRvb2x0aXAiLCJ0b29sdGlwIiwicmVuZGVyT3ZlcmxheSIsInBvcGNvbmZpcm1Mb2NhbGUiLCJva0J1dHRvblByb3BzIiwiY2FuY2VsQnV0dG9uUHJvcHMiLCJjYW5jZWxUZXh0Iiwib2tUZXh0Iiwib2tUeXBlIiwic2l6ZSIsInJlbmRlckNvbmZpcm0iLCJwbGFjZW1lbnQiLCJvdmVybGF5IiwiZGVmYXVsdExvY2FsZSIsImRlZmF1bHRWaXNpYmxlIiwiZ2V0UG9wdXBEb21Ob2RlIiwidHJpZ2dlciIsIl9kZWJvdW5jZSIsIm1hdGNoTWVkaWEiLCJtZWRpYVF1ZXJ5IiwibWVkaWEiLCJtYXRjaGVzIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIlNsaWNrQ2Fyb3VzZWwiLCJDYXJvdXNlbCIsInNhdmVTbGljayIsInNsaWNrIiwib25XaW5kb3dSZXNpemVkIiwiaW5uZXJTbGlkZXIiLCJhdXRvUGxheSIsInJlbmRlckNhcm91c2VsIiwiZWZmZWN0IiwiZG90UG9zaXRpb24iLCJnZXREb3RQb3NpdGlvbiIsImRvdHNDbGFzcyIsImxlYWRpbmciLCJnb1RvIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNsaWNrTmV4dCIsInNsaWNrUHJldiIsImRvbnRBbmltYXRlIiwic2xpY2tHb1RvIiwiZG90cyIsImFycm93cyIsIl9pbm5lclNsaWRlciIsIl9qc29uMm1xIiwiX2RlZmF1bHRQcm9wcyIsIl9pbm5lclNsaWRlclV0aWxzIiwiZW5xdWlyZSIsIlNsaWRlciIsInBhdXNlIiwiX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzIiwicXVlcnkiLCJoYW5kbGVyIiwicmVnaXN0ZXIiLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludHMiLCJtYXAiLCJicmVha3B0Iiwic29ydCIsIngiLCJ5IiwiYlF1ZXJ5IiwibWluV2lkdGgiLCJtYXhXaWR0aCIsInVucmVnaXN0ZXIiLCJzZXR0aW5ncyIsIm5ld1Byb3BzIiwiX3RoaXMzIiwicmVzcCIsInRvQXJyYXkiLCJ0cmltIiwic2xpZGVzUGVyUm93Iiwid2FybiIsIm5ld0NoaWxkcmVuIiwiY3VycmVudFdpZHRoIiwiaiIsInJvdyIsImsiLCJkaXNwbGF5IiwiSW5uZXJTbGlkZXIiLCJpbm5lclNsaWRlclJlZkhhbmRsZXIiLCJfaW5pdGlhbFN0YXRlIiwiX2xvZGFzaCIsIl90cmFjayIsIl9kb3RzIiwiX2Fycm93cyIsIl9yZXNpemVPYnNlcnZlclBvbHlmaWxsIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwibGlzdCIsInRyYWNrIiwiYWRhcHRpdmVIZWlnaHQiLCJzc3JJbml0Iiwib25Jbml0IiwicHJldlN0YXRlIiwib25MYXp5TG9hZCIsInVwZGF0ZVN0YXRlIiwiYWRhcHRIZWlnaHQiLCJsYXp5TG9hZFRpbWVyIiwic2V0SW50ZXJ2YWwiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwicm8iLCJjYWxsYmFja1RpbWVycyIsIm9ic2VydmUiLCJvbmZvY3VzIiwicGF1c2VPbkZvY3VzIiwib25TbGlkZUZvY3VzIiwib25ibHVyIiwib25TbGlkZUJsdXIiLCJhbmltYXRpb25FbmRDYWxsYmFjayIsImNsZWFySW50ZXJ2YWwiLCJ0aW1lciIsImRldGFjaEV2ZW50IiwiYXV0b3BsYXlUaW1lciIsInNldFRyYWNrU3R5bGUiLCJfaSIsIl9PYmplY3Qka2V5cyIsImNoZWNrSW1hZ2VzTG9hZCIsIm9uUmVJbml0IiwiZGVib3VuY2VkUmVzaXplIiwicmVzaXplV2luZG93IiwiY2FsbGJhY2siLCJ1cGRhdGVkU3RhdGUiLCJfdHJhY2tXaWR0aCIsIl90cmFja0xlZnQiLCJjaGlsZHJlbldpZHRocyIsInByZUNsb25lcyIsInBvc3RDbG9uZXMiLCJfaTIiLCJfaTMiLCJfdHJhY2tTdHlsZSIsImNoaWxkcmVuQ291bnQiLCJ0cmFja0xlZnQiLCJpbWFnZXMiLCJpbWFnZXNDb3VudCIsImxvYWRlZENvdW50IiwiaW1hZ2UiLCJvbmNsaWNrIiwicHJldkNsaWNrSGFuZGxlciIsInBhcmVudE5vZGUiLCJvbmxvYWQiLCJvbmVycm9yIiwib25MYXp5TG9hZEVycm9yIiwiX2luZGV4IiwiYXNOYXZGb3IiLCJiZWZvcmVDaGFuZ2UiLCJhZnRlckNoYW5nZSIsIl9zbGlkZUhhbmRsZXIiLCJmaXJzdEJhdGNoIiwiY2xpY2thYmxlIiwic3RvcFByb3BhZ2F0aW9uIiwiZGlyIiwib250b3VjaG1vdmUiLCJldmVudCIsInJldHVyblZhbHVlIiwiZGlzYWJsZUJvZHlTY3JvbGwiLCJ0cmlnZ2VyU2xpZGVIYW5kbGVyIiwiZW5hYmxlQm9keVNjcm9sbCIsImlzTmFOIiwibmV4dEluZGV4IiwicGxheVR5cGUiLCJwbGF5IiwiYXV0b3BsYXlTcGVlZCIsInBhdXNlVHlwZSIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsInRyYWNrUHJvcHMiLCJwYXVzZU9uSG92ZXIiLCJvbk1vdXNlRW50ZXIiLCJvblRyYWNrT3ZlciIsIm9uTW91c2VMZWF2ZSIsIm9uVHJhY2tMZWF2ZSIsIm9uTW91c2VPdmVyIiwiZm9jdXNPblNlbGVjdCIsInNlbGVjdEhhbmRsZXIiLCJkb3RQcm9wcyIsInBhdXNlT25Eb3RzSG92ZXIiLCJjbGlja0hhbmRsZXIiLCJvbkRvdHNMZWF2ZSIsIm9uRG90c092ZXIiLCJEb3RzIiwiYXJyb3dQcm9wcyIsIlByZXZBcnJvdyIsIk5leHRBcnJvdyIsInZlcnRpY2FsSGVpZ2h0U3R5bGUiLCJjZW50ZXJQYWRkaW5nU3R5bGUiLCJwYWRkaW5nIiwibGlzdFN0eWxlIiwidG91Y2hNb3ZlIiwibGlzdFByb3BzIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hDYW5jZWwiLCJvbktleURvd24iLCJpbm5lclNsaWRlclByb3BzIiwibGlzdFJlZkhhbmRsZXIiLCJUcmFjayIsInRyYWNrUmVmSGFuZGxlciIsImN1cnJlbnREaXJlY3Rpb24iLCJpbml0aWFsaXplZCIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwib2JqZWN0VG9TdHJpbmciLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJub3ciLCJpc09iamVjdCIsInRvTnVtYmVyIiwiaXNPYmplY3RMaWtlIiwiaXNTeW1ib2wiLCJvdGhlciIsInZhbHVlT2YiLCJyZXBsYWNlIiwiaXNCaW5hcnkiLCJtb2R1bGUiLCJmdW5jIiwid2FpdCIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImFyZ3MiLCJ0aGlzQXJnIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiZmx1c2giLCJnZXRTbGlkZUNsYXNzZXMiLCJzbGlja0FjdGl2ZSIsInNsaWNrQ2VudGVyIiwic2xpY2tDbG9uZWQiLCJnZXRLZXkiLCJmYWxsYmFja0tleSIsInJlbmRlclNsaWRlcyIsInByZUNsb25lU2xpZGVzIiwicG9zdENsb25lU2xpZGVzIiwiY2hpbGRPbkNsaWNrT3B0aW9ucyIsImNoaWxkU3R5bGUiLCJwb3NpdGlvbiIsInRvcCIsImdldFNsaWRlU3R5bGUiLCJzbGlkZUNsYXNzIiwic2xpZGVDbGFzc2VzIiwib3V0bGluZSIsInByZUNsb25lTm8iLCJyZXZlcnNlIiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJtb3VzZUV2ZW50cyIsIlB1cmVDb21wb25lbnQiLCJqb2luIiwic3BsaXQiLCJsZWZ0Qm91bmQiLCJyaWdodEJvdW5kIiwiZG90T3B0aW9ucyIsImJpbmQiLCJjdXN0b21QYWdpbmciLCJhcHBlbmREb3RzIiwiX2NyZWF0ZUNsYXNzIiwicHJldkNsYXNzZXMiLCJwcmV2SGFuZGxlciIsInByZXZBcnJvd1Byb3BzIiwiY3VzdG9tUHJvcHMiLCJfUmVhY3QkUHVyZUNvbXBvbmVudDIiLCJuZXh0Q2xhc3NlcyIsIm5leHRIYW5kbGVyIiwibmV4dEFycm93UHJvcHMiLCJjYW1lbDJoeXBoZW4iLCJvYmoybXEiLCJtcSIsImZlYXR1cmVzIiwiZmVhdHVyZSIsImlzRGltZW5zaW9uIiwicSIsInN0ciIsInRvTG93ZXJDYXNlIiwiZWFzaW5nIiwicGx1cmFsUnVsZXMiLCJzaW5ndWxhclJ1bGVzIiwidW5jb3VudGFibGVzIiwiaXJyZWd1bGFyUGx1cmFscyIsImlycmVndWxhclNpbmdsZXMiLCJzYW5pdGl6ZVJ1bGUiLCJydWxlIiwiUmVnRXhwIiwicmVzdG9yZUNhc2UiLCJ3b3JkIiwidG9rZW4iLCJ0b1VwcGVyQ2FzZSIsImNoYXJBdCIsInN1YnN0ciIsImludGVycG9sYXRlIiwic2FuaXRpemVXb3JkIiwicnVsZXMiLCJyZXBsYWNlV29yZCIsInJlcGxhY2VNYXAiLCJrZWVwTWFwIiwiY2hlY2tXb3JkIiwiYm9vbCIsInBsdXJhbGl6ZSIsImluY2x1c2l2ZSIsInNpbmd1bGFyIiwicGx1cmFsIiwiaXNQbHVyYWwiLCJpc1Npbmd1bGFyIiwiYWRkUGx1cmFsUnVsZSIsInJlcGxhY2VtZW50IiwiYWRkU2luZ3VsYXJSdWxlIiwiYWRkVW5jb3VudGFibGVSdWxlIiwiYWRkSXJyZWd1bGFyUnVsZSIsInNpbmdsZSIsImZpbGxSZWYiLCJjdXJyZW50IiwiX2xlbiIsInJlZnMiLCJfa2V5IiwiX0Jhc2UiLCJkZXNlbGVjdEN1cnJlbnQiLCJjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nIiwiZGVidWciLCJyZXNlbGVjdFByZXZpb3VzIiwicmFuZ2UiLCJzZWxlY3Rpb24iLCJzdWNjZXNzIiwiY3JlYXRlUmFuZ2UiLCJnZXRTZWxlY3Rpb24iLCJ0ZXh0Q29udGVudCIsImFsbCIsImNsaXAiLCJ3aGl0ZVNwYWNlIiwid2Via2l0VXNlclNlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJtc1VzZXJTZWxlY3QiLCJ1c2VyU2VsZWN0IiwiZm9ybWF0IiwiY2xpcGJvYXJkRGF0YSIsImNsZWFyRGF0YSIsInNldERhdGEiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJhZGRSYW5nZSIsImV4ZWNDb21tYW5kIiwiRXJyb3IiLCJlcnIiLCJjb3B5S2V5IiwicHJvbXB0IiwicmVtb3ZlUmFuZ2UiLCJyZW1vdmVBbGxSYW5nZXMiLCJyZW1vdmVDaGlsZCIsInJhbmdlQ291bnQiLCJhY3RpdmUiLCJhY3RpdmVFbGVtZW50IiwicmFuZ2VzIiwiZ2V0UmFuZ2VBdCIsImJsdXIiLCJfS2V5Q29kZSIsImlubGluZVN0eWxlIiwiYm9yZGVyIiwiYmFja2dyb3VuZCIsImxpbmVIZWlnaHQiLCJUcmFuc0J1dHRvbiIsIm9uS2V5VXAiLCJzZXRSZWYiLCJidG4iLCJkaXYiLCJub1N0eWxlIiwiX1RleHRBcmVhIiwiRWRpdGFibGUiLCJpbkNvbXBvc2l0aW9uIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsImxhc3RLZXlDb2RlIiwiX3JlZjMiLCJzaGlmdEtleSIsImNvbmZpcm1DaGFuZ2UiLCJvbkJsdXIiLCJzZXRUZXh0YXJlYSIsInRleHRhcmVhIiwicHJldlZhbHVlIiwibmV3U3RhdGUiLCJyZXNpemFibGVUZXh0QXJlYSIsInRleHRBcmVhIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJhdXRvU2l6ZSIsImVsbGlwc2lzQ29udGFpbmVyIiwid3JhcHBlclN0eWxlIiwibWFyZ2luIiwicHhUb051bWJlciIsIm9yaWdpbkVsZSIsImZpeGVkQ29udGVudCIsImVsbGlwc2lzU3RyIiwic2V0QXR0cmlidXRlIiwib3JpZ2luU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwib3JpZ2luQ1NTIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm1heEhlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWluSGVpZ2h0IiwiekluZGV4IiwidGV4dE92ZXJmbG93Iiwid2Via2l0TGluZUNsYW1wIiwiY2hpbGRMaXN0IiwiY29udGVudExpc3QiLCJwcmV2Q2hpbGQiLCJpblJhbmdlIiwicmVuZGVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsImlubmVySFRNTCIsImNsb25lTm9kZSIsIm5vZGVUeXBlIiwiZml4ZWROb2RlcyIsImVsbGlwc2lzQ2hpbGRyZW4iLCJlbGxpcHNpc0NvbnRlbnRIb2xkZXIiLCJlbGxpcHNpc1RleHROb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJhcHBlbmRDaGlsZE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJtZWFzdXJlTm9kZSIsImNoaWxkTm9kZSIsImZpbmlzaGVkIiwicmVhY3ROb2RlIiwiZnVsbFRleHQiLCJtZWFzdXJlVGV4dCIsInN0YXJ0TG9jIiwiZW5kTG9jIiwibGFzdFN1Y2Nlc3NMb2MiLCJtaWRMb2MiLCJjdXJyZW50VGV4dCIsInN0ZXAiLCJjdXJyZW50U3RlcFRleHQiLCJzb21lIiwiX21lYXN1cmVOb2RlIiwiX3R5cGUiLCJUSVRMRV9FTEVfTElTVCIsInR1cGxlTnVtIiwiX3Byb3BzJGxldmVsIiwibGV2ZWwiLCJfQ2hlY2thYmxlVGFnIiwiX2NvbG9ycyIsIl93YXZlIiwiUHJlc2V0Q29sb3JSZWdleCIsIlByZXNldENvbG9yVHlwZXMiLCJUYWciLCJoYW5kbGVJY29uQ2xpY2siLCJyZW5kZXJUYWciLCJjb25maWdQcm9wcyIsIm90aGVyUHJvcHMiLCJpc05lZWRXYXZlIiwidGFnUHJvcHMiLCJnZXRUYWdDbGFzc05hbWUiLCJnZXRUYWdTdHlsZSIsInJlbmRlckNsb3NlSWNvbiIsImNvbG9yIiwiaXNQcmVzZXRDb2xvciIsImJhY2tncm91bmRDb2xvciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJDaGVja2FibGVUYWciLCJoYW5kbGVDbGljayIsImNoZWNrZWQiLCJyZW5kZXJDaGVja2FibGVUYWciLCJjbHMiLCJ0dXBsZSIsInByZXYiXSwibWFwcGluZ3MiOiIwRkFFQUEsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQzNDQyxPQUFPLElBRVRELEVBQVFFLFVBQVlGLEVBQVFHLGFBQWVILEVBQVFJLGNBQWdCSixFQUFRSyxpQkFBbUJMLEVBQVFNLGVBQWlCTixFQUFRTyxjQUFnQlAsRUFBUVEsYUFBZVIsRUFBUVMsYUFBZVQsRUFBUVUsbUJBQXFCVixFQUFRVyxZQUFjWCxFQUFRWSxjQUFnQlosRUFBUWEsY0FBZ0JiLEVBQVFjLGVBQWlCZCxFQUFRZSxvQkFBc0JmLEVBQVFnQixTQUFXaEIsRUFBUWlCLFVBQVlqQixFQUFRa0IsV0FBYWxCLEVBQVFtQixXQUFhbkIsRUFBUW9CLFlBQWNwQixFQUFRcUIsYUFBZXJCLEVBQVFzQixpQkFBbUJ0QixFQUFRdUIsY0FBZ0J2QixFQUFRd0IsVUFBWXhCLEVBQVF5QixrQkFBb0J6QixFQUFRMEIsVUFBWTFCLEVBQVEyQixTQUFXM0IsRUFBUTRCLGtCQUFvQjVCLEVBQVE2QixpQkFBbUI3QixFQUFROEIsYUFBZTlCLEVBQVErQixlQUFpQi9CLEVBQVFnQyxzQkFBd0JoQyxFQUFRaUMsMkJBQXdCLEVBRXR3QixJQUFJQyxFQUFTQyxFQUF1QixFQUFRLElBRXhDQyxFQUFZRCxFQUF1QixFQUFRLEtBRS9DLFNBQVNBLEVBQXVCRSxHQUFPLE9BQU9BLEdBQU9BLEVBQUlDLFdBQWFELEVBQU0sQ0FBRSxRQUFXQSxH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QUFNVixjQUFjLE9BQVE4RCxFQUFTLEdBQUk4SCxFQUFXLENBQ3RFdkIsVUFBV29zQixFQUNYbnNCLFFBQVMxRCxFQUFNMHZCLGdCQUlaMXZCLEVBVVQsT0FsRm9CekMsRUEyRVBreUIsR0EzRW9CNXZCLEVBMkVOLENBQUMsQ0FDMUI5UixJQUFLLFNBQ0x6RCxNQUFPLFdBQ0wsT0FBb0J3UCxFQUFNVixjQUFjOEIsRUFBZ0JrTSxlQUFnQixLQUFNaEssS0FBS3d5Qix5QkE5RVhweUIsRUFBa0JELEVBQVlqRCxVQUFXdUYsR0FBaUJDLEdBQWF0QyxFQUFrQkQsRUFBYXVDLEdBa0YzSzJ2QixFQXJEdUIsQ0FzRDlCMzFCLEVBQU02TSxXQUVSdGMsRUFBaUIsUUFBSW9sQyxHLGlDQ2hIckJ0bEMsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQzNDQyxPQUFPLElBRVRELEVBQVFxa0Msc0JBQW1CLEVBRTNCLElBR0lBLEdBQW1CLEVBSFgsRUFBUSxJQUdhb0IsT0FBTyxPQUFRLE1BQU8sU0FBVSxTQUFVLE9BQVEsUUFBUyxPQUFRLFNBQVUsV0FBWSxVQUFXLFVBQVcsT0FBUSxRQUN4SnpsQyxFQUFRcWtDLGlCQUFtQkEsRyxpQ0NUM0J2a0MsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQzNDQyxPQUFPLElBRVRELEVBQWlCLFFBRWpCLFNBQTRCb1QsR0FDMUIsT0FBT3RULE9BQU80QyxLQUFLMFEsR0FBT3ZHLFFBQU8sU0FBVTY0QixFQUFNaGlDLEdBSy9DLE1BSjBCLFVBQXJCQSxFQUFJaTNCLE9BQU8sRUFBRyxJQUF1QyxVQUFyQmozQixFQUFJaTNCLE9BQU8sRUFBRyxJQUEwQixTQUFSajNCLEdBQXdDLFlBQXJCQSxFQUFJaTNCLE9BQU8sRUFBRyxLQUNwRytLLEVBQUtoaUMsR0FBTzBQLEVBQU0xUCxJQUdiZ2lDLElBQ04iLCJmaWxlIjoiNC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FuVXNlRE9NID0gZXhwb3J0cy5zbGlkZXNPbkxlZnQgPSBleHBvcnRzLnNsaWRlc09uUmlnaHQgPSBleHBvcnRzLnNpYmxpbmdEaXJlY3Rpb24gPSBleHBvcnRzLmdldFRvdGFsU2xpZGVzID0gZXhwb3J0cy5nZXRQb3N0Q2xvbmVzID0gZXhwb3J0cy5nZXRQcmVDbG9uZXMgPSBleHBvcnRzLmdldFRyYWNrTGVmdCA9IGV4cG9ydHMuZ2V0VHJhY2tBbmltYXRlQ1NTID0gZXhwb3J0cy5nZXRUcmFja0NTUyA9IGV4cG9ydHMuY2hlY2tTcGVjS2V5cyA9IGV4cG9ydHMuZ2V0U2xpZGVDb3VudCA9IGV4cG9ydHMuY2hlY2tOYXZpZ2FibGUgPSBleHBvcnRzLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBleHBvcnRzLnN3aXBlRW5kID0gZXhwb3J0cy5zd2lwZU1vdmUgPSBleHBvcnRzLnN3aXBlU3RhcnQgPSBleHBvcnRzLmtleUhhbmRsZXIgPSBleHBvcnRzLmNoYW5nZVNsaWRlID0gZXhwb3J0cy5zbGlkZUhhbmRsZXIgPSBleHBvcnRzLmluaXRpYWxpemVkU3RhdGUgPSBleHBvcnRzLmV4dHJhY3RPYmplY3QgPSBleHBvcnRzLmNhbkdvTmV4dCA9IGV4cG9ydHMuZ2V0U3dpcGVEaXJlY3Rpb24gPSBleHBvcnRzLmdldEhlaWdodCA9IGV4cG9ydHMuZ2V0V2lkdGggPSBleHBvcnRzLmxhenlTbGlkZXNPblJpZ2h0ID0gZXhwb3J0cy5sYXp5U2xpZGVzT25MZWZ0ID0gZXhwb3J0cy5sYXp5RW5kSW5kZXggPSBleHBvcnRzLmxhenlTdGFydEluZGV4ID0gZXhwb3J0cy5nZXRSZXF1aXJlZExhenlTbGlkZXMgPSBleHBvcnRzLmdldE9uRGVtYW5kTGF6eVNsaWRlcyA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZ2V0T25EZW1hbmRMYXp5U2xpZGVzID0gZnVuY3Rpb24gZ2V0T25EZW1hbmRMYXp5U2xpZGVzKHNwZWMpIHtcbiAgdmFyIG9uRGVtYW5kU2xpZGVzID0gW107XG4gIHZhciBzdGFydEluZGV4ID0gbGF6eVN0YXJ0SW5kZXgoc3BlYyk7XG4gIHZhciBlbmRJbmRleCA9IGxhenlFbmRJbmRleChzcGVjKTtcblxuICBmb3IgKHZhciBzbGlkZUluZGV4ID0gc3RhcnRJbmRleDsgc2xpZGVJbmRleCA8IGVuZEluZGV4OyBzbGlkZUluZGV4KyspIHtcbiAgICBpZiAoc3BlYy5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKHNsaWRlSW5kZXgpIDwgMCkge1xuICAgICAgb25EZW1hbmRTbGlkZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb25EZW1hbmRTbGlkZXM7XG59OyAvLyByZXR1cm4gbGlzdCBvZiBzbGlkZXMgdGhhdCBuZWVkIHRvIGJlIHByZXNlbnRcblxuXG5leHBvcnRzLmdldE9uRGVtYW5kTGF6eVNsaWRlcyA9IGdldE9uRGVtYW5kTGF6eVNsaWRlcztcblxudmFyIGdldFJlcXVpcmVkTGF6eVNsaWRlcyA9IGZ1bmN0aW9uIGdldFJlcXVpcmVkTGF6eVNsaWRlcyhzcGVjKSB7XG4gIHZhciByZXF1aXJlZFNsaWRlcyA9IFtdO1xuICB2YXIgc3RhcnRJbmRleCA9IGxhenlTdGFydEluZGV4KHNwZWMpO1xuICB2YXIgZW5kSW5kZXggPSBsYXp5RW5kSW5kZXgoc3BlYyk7XG5cbiAgZm9yICh2YXIgc2xpZGVJbmRleCA9IHN0YXJ0SW5kZXg7IHNsaWRlSW5kZXggPCBlbmRJbmRleDsgc2xpZGVJbmRleCsrKSB7XG4gICAgcmVxdWlyZWRTbGlkZXMucHVzaChzbGlkZUluZGV4KTtcbiAgfVxuXG4gIHJldHVybiByZXF1aXJlZFNsaWRlcztcbn07IC8vIHN0YXJ0SW5kZXggdGhhdCBuZWVkcyB0byBiZSBwcmVzZW50XG5cblxuZXhwb3J0cy5nZXRSZXF1aXJlZExhenlTbGlkZXMgPSBnZXRSZXF1aXJlZExhenlTbGlkZXM7XG5cbnZhciBsYXp5U3RhcnRJbmRleCA9IGZ1bmN0aW9uIGxhenlTdGFydEluZGV4KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuY3VycmVudFNsaWRlIC0gbGF6eVNsaWRlc09uTGVmdChzcGVjKTtcbn07XG5cbmV4cG9ydHMubGF6eVN0YXJ0SW5kZXggPSBsYXp5U3RhcnRJbmRleDtcblxudmFyIGxhenlFbmRJbmRleCA9IGZ1bmN0aW9uIGxhenlFbmRJbmRleChzcGVjKSB7XG4gIHJldHVybiBzcGVjLmN1cnJlbnRTbGlkZSArIGxhenlTbGlkZXNPblJpZ2h0KHNwZWMpO1xufTtcblxuZXhwb3J0cy5sYXp5RW5kSW5kZXggPSBsYXp5RW5kSW5kZXg7XG5cbnZhciBsYXp5U2xpZGVzT25MZWZ0ID0gZnVuY3Rpb24gbGF6eVNsaWRlc09uTGVmdChzcGVjKSB7XG4gIHJldHVybiBzcGVjLmNlbnRlck1vZGUgPyBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMikgKyAocGFyc2VJbnQoc3BlYy5jZW50ZXJQYWRkaW5nKSA+IDAgPyAxIDogMCkgOiAwO1xufTtcblxuZXhwb3J0cy5sYXp5U2xpZGVzT25MZWZ0ID0gbGF6eVNsaWRlc09uTGVmdDtcblxudmFyIGxhenlTbGlkZXNPblJpZ2h0ID0gZnVuY3Rpb24gbGF6eVNsaWRlc09uUmlnaHQoc3BlYykge1xuICByZXR1cm4gc3BlYy5jZW50ZXJNb2RlID8gTWF0aC5mbG9vcigoc3BlYy5zbGlkZXNUb1Nob3cgLSAxKSAvIDIpICsgMSArIChwYXJzZUludChzcGVjLmNlbnRlclBhZGRpbmcpID4gMCA/IDEgOiAwKSA6IHNwZWMuc2xpZGVzVG9TaG93O1xufTsgLy8gZ2V0IHdpZHRoIG9mIGFuIGVsZW1lbnRcblxuXG5leHBvcnRzLmxhenlTbGlkZXNPblJpZ2h0ID0gbGF6eVNsaWRlc09uUmlnaHQ7XG5cbnZhciBnZXRXaWR0aCA9IGZ1bmN0aW9uIGdldFdpZHRoKGVsZW0pIHtcbiAgcmV0dXJuIGVsZW0gJiYgZWxlbS5vZmZzZXRXaWR0aCB8fCAwO1xufTtcblxuZXhwb3J0cy5nZXRXaWR0aCA9IGdldFdpZHRoO1xuXG52YXIgZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gZ2V0SGVpZ2h0KGVsZW0pIHtcbiAgcmV0dXJuIGVsZW0gJiYgZWxlbS5vZmZzZXRIZWlnaHQgfHwgMDtcbn07XG5cbmV4cG9ydHMuZ2V0SGVpZ2h0ID0gZ2V0SGVpZ2h0O1xuXG52YXIgZ2V0U3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbiBnZXRTd2lwZURpcmVjdGlvbih0b3VjaE9iamVjdCkge1xuICB2YXIgdmVydGljYWxTd2lwaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZTtcbiAgeERpc3QgPSB0b3VjaE9iamVjdC5zdGFydFggLSB0b3VjaE9iamVjdC5jdXJYO1xuICB5RGlzdCA9IHRvdWNoT2JqZWN0LnN0YXJ0WSAtIHRvdWNoT2JqZWN0LmN1clk7XG4gIHIgPSBNYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG4gIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcblxuICBpZiAoc3dpcGVBbmdsZSA8IDApIHtcbiAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gIH1cblxuICBpZiAoc3dpcGVBbmdsZSA8PSA0NSAmJiBzd2lwZUFuZ2xlID49IDAgfHwgc3dpcGVBbmdsZSA8PSAzNjAgJiYgc3dpcGVBbmdsZSA+PSAzMTUpIHtcbiAgICByZXR1cm4gXCJsZWZ0XCI7XG4gIH1cblxuICBpZiAoc3dpcGVBbmdsZSA+PSAxMzUgJiYgc3dpcGVBbmdsZSA8PSAyMjUpIHtcbiAgICByZXR1cm4gXCJyaWdodFwiO1xuICB9XG5cbiAgaWYgKHZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgIGlmIChzd2lwZUFuZ2xlID49IDM1ICYmIHN3aXBlQW5nbGUgPD0gMTM1KSB7XG4gICAgICByZXR1cm4gXCJ1cFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJkb3duXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFwidmVydGljYWxcIjtcbn07IC8vIHdoZXRoZXIgb3Igbm90IHdlIGNhbiBnbyBuZXh0XG5cblxuZXhwb3J0cy5nZXRTd2lwZURpcmVjdGlvbiA9IGdldFN3aXBlRGlyZWN0aW9uO1xuXG52YXIgY2FuR29OZXh0ID0gZnVuY3Rpb24gY2FuR29OZXh0KHNwZWMpIHtcbiAgdmFyIGNhbkdvID0gdHJ1ZTtcblxuICBpZiAoIXNwZWMuaW5maW5pdGUpIHtcbiAgICBpZiAoc3BlYy5jZW50ZXJNb2RlICYmIHNwZWMuY3VycmVudFNsaWRlID49IHNwZWMuc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgIGNhbkdvID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChzcGVjLnNsaWRlQ291bnQgPD0gc3BlYy5zbGlkZXNUb1Nob3cgfHwgc3BlYy5jdXJyZW50U2xpZGUgPj0gc3BlYy5zbGlkZUNvdW50IC0gc3BlYy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgIGNhbkdvID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhbkdvO1xufTsgLy8gZ2l2ZW4gYW4gb2JqZWN0IGFuZCBhIGxpc3Qgb2Yga2V5cywgcmV0dXJuIG5ldyBvYmplY3Qgd2l0aCBnaXZlbiBrZXlzXG5cblxuZXhwb3J0cy5jYW5Hb05leHQgPSBjYW5Hb05leHQ7XG5cbnZhciBleHRyYWN0T2JqZWN0ID0gZnVuY3Rpb24gZXh0cmFjdE9iamVjdChzcGVjLCBrZXlzKSB7XG4gIHZhciBuZXdPYmplY3QgPSB7fTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbmV3T2JqZWN0W2tleV0gPSBzcGVjW2tleV07XG4gIH0pO1xuICByZXR1cm4gbmV3T2JqZWN0O1xufTsgLy8gZ2V0IGluaXRpYWxpemVkIHN0YXRlXG5cblxuZXhwb3J0cy5leHRyYWN0T2JqZWN0ID0gZXh0cmFjdE9iamVjdDtcblxudmFyIGluaXRpYWxpemVkU3RhdGUgPSBmdW5jdGlvbiBpbml0aWFsaXplZFN0YXRlKHNwZWMpIHtcbiAgLy8gc3BlYyBhbHNvIGNvbnRhaW5zIGxpc3RSZWYsIHRyYWNrUmVmXG4gIHZhciBzbGlkZUNvdW50ID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChzcGVjLmNoaWxkcmVuKTtcblxuICB2YXIgbGlzdFdpZHRoID0gTWF0aC5jZWlsKGdldFdpZHRoKF9yZWFjdERvbVtcImRlZmF1bHRcIl0uZmluZERPTU5vZGUoc3BlYy5saXN0UmVmKSkpO1xuICB2YXIgdHJhY2tXaWR0aCA9IE1hdGguY2VpbChnZXRXaWR0aChfcmVhY3REb21bXCJkZWZhdWx0XCJdLmZpbmRET01Ob2RlKHNwZWMudHJhY2tSZWYpKSk7XG4gIHZhciBzbGlkZVdpZHRoO1xuXG4gIGlmICghc3BlYy52ZXJ0aWNhbCkge1xuICAgIHZhciBjZW50ZXJQYWRkaW5nQWRqID0gc3BlYy5jZW50ZXJNb2RlICYmIHBhcnNlSW50KHNwZWMuY2VudGVyUGFkZGluZykgKiAyO1xuXG4gICAgaWYgKHR5cGVvZiBzcGVjLmNlbnRlclBhZGRpbmcgPT09IFwic3RyaW5nXCIgJiYgc3BlYy5jZW50ZXJQYWRkaW5nLnNsaWNlKC0xKSA9PT0gXCIlXCIpIHtcbiAgICAgIGNlbnRlclBhZGRpbmdBZGogKj0gbGlzdFdpZHRoIC8gMTAwO1xuICAgIH1cblxuICAgIHNsaWRlV2lkdGggPSBNYXRoLmNlaWwoKGxpc3RXaWR0aCAtIGNlbnRlclBhZGRpbmdBZGopIC8gc3BlYy5zbGlkZXNUb1Nob3cpO1xuICB9IGVsc2Uge1xuICAgIHNsaWRlV2lkdGggPSBsaXN0V2lkdGg7XG4gIH1cblxuICB2YXIgc2xpZGVIZWlnaHQgPSBfcmVhY3REb21bXCJkZWZhdWx0XCJdLmZpbmRET01Ob2RlKHNwZWMubGlzdFJlZikgJiYgZ2V0SGVpZ2h0KF9yZWFjdERvbVtcImRlZmF1bHRcIl0uZmluZERPTU5vZGUoc3BlYy5saXN0UmVmKS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pbmRleD1cIjBcIl0nKSk7XG4gIHZhciBsaXN0SGVpZ2h0ID0gc2xpZGVIZWlnaHQgKiBzcGVjLnNsaWRlc1RvU2hvdztcbiAgdmFyIGN1cnJlbnRTbGlkZSA9IHNwZWMuY3VycmVudFNsaWRlID09PSB1bmRlZmluZWQgPyBzcGVjLmluaXRpYWxTbGlkZSA6IHNwZWMuY3VycmVudFNsaWRlO1xuXG4gIGlmIChzcGVjLnJ0bCAmJiBzcGVjLmN1cnJlbnRTbGlkZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY3VycmVudFNsaWRlID0gc2xpZGVDb3VudCAtIDEgLSBzcGVjLmluaXRpYWxTbGlkZTtcbiAgfVxuXG4gIHZhciBsYXp5TG9hZGVkTGlzdCA9IHNwZWMubGF6eUxvYWRlZExpc3QgfHwgW107XG4gIHZhciBzbGlkZXNUb0xvYWQgPSBnZXRPbkRlbWFuZExhenlTbGlkZXMoe1xuICAgIGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlLFxuICAgIGxhenlMb2FkZWRMaXN0OiBsYXp5TG9hZGVkTGlzdFxuICB9LCBzcGVjKTtcbiAgbGF6eUxvYWRlZExpc3QuY29uY2F0KHNsaWRlc1RvTG9hZCk7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBzbGlkZUNvdW50OiBzbGlkZUNvdW50LFxuICAgIHNsaWRlV2lkdGg6IHNsaWRlV2lkdGgsXG4gICAgbGlzdFdpZHRoOiBsaXN0V2lkdGgsXG4gICAgdHJhY2tXaWR0aDogdHJhY2tXaWR0aCxcbiAgICBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSxcbiAgICBzbGlkZUhlaWdodDogc2xpZGVIZWlnaHQsXG4gICAgbGlzdEhlaWdodDogbGlzdEhlaWdodCxcbiAgICBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3RcbiAgfTtcblxuICBpZiAoc3BlYy5hdXRvcGxheWluZyA9PT0gbnVsbCAmJiBzcGVjLmF1dG9wbGF5KSB7XG4gICAgc3RhdGVbXCJhdXRvcGxheWluZ1wiXSA9IFwicGxheWluZ1wiO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxuZXhwb3J0cy5pbml0aWFsaXplZFN0YXRlID0gaW5pdGlhbGl6ZWRTdGF0ZTtcblxudmFyIHNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uIHNsaWRlSGFuZGxlcihzcGVjKSB7XG4gIHZhciB3YWl0Rm9yQW5pbWF0ZSA9IHNwZWMud2FpdEZvckFuaW1hdGUsXG4gICAgICBhbmltYXRpbmcgPSBzcGVjLmFuaW1hdGluZyxcbiAgICAgIGZhZGUgPSBzcGVjLmZhZGUsXG4gICAgICBpbmZpbml0ZSA9IHNwZWMuaW5maW5pdGUsXG4gICAgICBpbmRleCA9IHNwZWMuaW5kZXgsXG4gICAgICBzbGlkZUNvdW50ID0gc3BlYy5zbGlkZUNvdW50LFxuICAgICAgbGF6eUxvYWRlZExpc3QgPSBzcGVjLmxhenlMb2FkZWRMaXN0LFxuICAgICAgbGF6eUxvYWQgPSBzcGVjLmxhenlMb2FkLFxuICAgICAgY3VycmVudFNsaWRlID0gc3BlYy5jdXJyZW50U2xpZGUsXG4gICAgICBjZW50ZXJNb2RlID0gc3BlYy5jZW50ZXJNb2RlLFxuICAgICAgc2xpZGVzVG9TY3JvbGwgPSBzcGVjLnNsaWRlc1RvU2Nyb2xsLFxuICAgICAgc2xpZGVzVG9TaG93ID0gc3BlYy5zbGlkZXNUb1Nob3csXG4gICAgICB1c2VDU1MgPSBzcGVjLnVzZUNTUztcbiAgaWYgKHdhaXRGb3JBbmltYXRlICYmIGFuaW1hdGluZykgcmV0dXJuIHt9O1xuICB2YXIgYW5pbWF0aW9uU2xpZGUgPSBpbmRleCxcbiAgICAgIGZpbmFsU2xpZGUsXG4gICAgICBhbmltYXRpb25MZWZ0LFxuICAgICAgZmluYWxMZWZ0O1xuICB2YXIgc3RhdGUgPSB7fSxcbiAgICAgIG5leHRTdGF0ZSA9IHt9O1xuXG4gIGlmIChmYWRlKSB7XG4gICAgaWYgKCFpbmZpbml0ZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNsaWRlQ291bnQpKSByZXR1cm4ge307XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBhbmltYXRpb25TbGlkZSA9IGluZGV4ICsgc2xpZGVDb3VudDtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID49IHNsaWRlQ291bnQpIHtcbiAgICAgIGFuaW1hdGlvblNsaWRlID0gaW5kZXggLSBzbGlkZUNvdW50O1xuICAgIH1cblxuICAgIGlmIChsYXp5TG9hZCAmJiBsYXp5TG9hZGVkTGlzdC5pbmRleE9mKGFuaW1hdGlvblNsaWRlKSA8IDApIHtcbiAgICAgIGxhenlMb2FkZWRMaXN0LnB1c2goYW5pbWF0aW9uU2xpZGUpO1xuICAgIH1cblxuICAgIHN0YXRlID0ge1xuICAgICAgYW5pbWF0aW5nOiB0cnVlLFxuICAgICAgY3VycmVudFNsaWRlOiBhbmltYXRpb25TbGlkZSxcbiAgICAgIGxhenlMb2FkZWRMaXN0OiBsYXp5TG9hZGVkTGlzdFxuICAgIH07XG4gICAgbmV4dFN0YXRlID0ge1xuICAgICAgYW5pbWF0aW5nOiBmYWxzZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZmluYWxTbGlkZSA9IGFuaW1hdGlvblNsaWRlO1xuXG4gICAgaWYgKGFuaW1hdGlvblNsaWRlIDwgMCkge1xuICAgICAgZmluYWxTbGlkZSA9IGFuaW1hdGlvblNsaWRlICsgc2xpZGVDb3VudDtcbiAgICAgIGlmICghaW5maW5pdGUpIGZpbmFsU2xpZGUgPSAwO2Vsc2UgaWYgKHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMCkgZmluYWxTbGlkZSA9IHNsaWRlQ291bnQgLSBzbGlkZUNvdW50ICUgc2xpZGVzVG9TY3JvbGw7XG4gICAgfSBlbHNlIGlmICghY2FuR29OZXh0KHNwZWMpICYmIGFuaW1hdGlvblNsaWRlID4gY3VycmVudFNsaWRlKSB7XG4gICAgICBhbmltYXRpb25TbGlkZSA9IGZpbmFsU2xpZGUgPSBjdXJyZW50U2xpZGU7XG4gICAgfSBlbHNlIGlmIChjZW50ZXJNb2RlICYmIGFuaW1hdGlvblNsaWRlID49IHNsaWRlQ291bnQpIHtcbiAgICAgIGFuaW1hdGlvblNsaWRlID0gaW5maW5pdGUgPyBzbGlkZUNvdW50IDogc2xpZGVDb3VudCAtIDE7XG4gICAgICBmaW5hbFNsaWRlID0gaW5maW5pdGUgPyAwIDogc2xpZGVDb3VudCAtIDE7XG4gICAgfSBlbHNlIGlmIChhbmltYXRpb25TbGlkZSA+PSBzbGlkZUNvdW50KSB7XG4gICAgICBmaW5hbFNsaWRlID0gYW5pbWF0aW9uU2xpZGUgLSBzbGlkZUNvdW50O1xuICAgICAgaWYgKCFpbmZpbml0ZSkgZmluYWxTbGlkZSA9IHNsaWRlQ291bnQgLSBzbGlkZXNUb1Nob3c7ZWxzZSBpZiAoc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsICE9PSAwKSBmaW5hbFNsaWRlID0gMDtcbiAgICB9XG5cbiAgICBhbmltYXRpb25MZWZ0ID0gZ2V0VHJhY2tMZWZ0KF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHtcbiAgICAgIHNsaWRlSW5kZXg6IGFuaW1hdGlvblNsaWRlXG4gICAgfSkpO1xuICAgIGZpbmFsTGVmdCA9IGdldFRyYWNrTGVmdChfb2JqZWN0U3ByZWFkKHt9LCBzcGVjLCB7XG4gICAgICBzbGlkZUluZGV4OiBmaW5hbFNsaWRlXG4gICAgfSkpO1xuXG4gICAgaWYgKCFpbmZpbml0ZSkge1xuICAgICAgaWYgKGFuaW1hdGlvbkxlZnQgPT09IGZpbmFsTGVmdCkgYW5pbWF0aW9uU2xpZGUgPSBmaW5hbFNsaWRlO1xuICAgICAgYW5pbWF0aW9uTGVmdCA9IGZpbmFsTGVmdDtcbiAgICB9XG5cbiAgICBsYXp5TG9hZCAmJiBsYXp5TG9hZGVkTGlzdC5jb25jYXQoZ2V0T25EZW1hbmRMYXp5U2xpZGVzKF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHtcbiAgICAgIGN1cnJlbnRTbGlkZTogYW5pbWF0aW9uU2xpZGVcbiAgICB9KSkpO1xuXG4gICAgaWYgKCF1c2VDU1MpIHtcbiAgICAgIHN0YXRlID0ge1xuICAgICAgICBjdXJyZW50U2xpZGU6IGZpbmFsU2xpZGUsXG4gICAgICAgIHRyYWNrU3R5bGU6IGdldFRyYWNrQ1NTKF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHtcbiAgICAgICAgICBsZWZ0OiBmaW5hbExlZnRcbiAgICAgICAgfSkpLFxuICAgICAgICBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3RcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlID0ge1xuICAgICAgICBhbmltYXRpbmc6IHRydWUsXG4gICAgICAgIGN1cnJlbnRTbGlkZTogZmluYWxTbGlkZSxcbiAgICAgICAgdHJhY2tTdHlsZTogZ2V0VHJhY2tBbmltYXRlQ1NTKF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHtcbiAgICAgICAgICBsZWZ0OiBhbmltYXRpb25MZWZ0XG4gICAgICAgIH0pKSxcbiAgICAgICAgbGF6eUxvYWRlZExpc3Q6IGxhenlMb2FkZWRMaXN0XG4gICAgICB9O1xuICAgICAgbmV4dFN0YXRlID0ge1xuICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgICBjdXJyZW50U2xpZGU6IGZpbmFsU2xpZGUsXG4gICAgICAgIHRyYWNrU3R5bGU6IGdldFRyYWNrQ1NTKF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHtcbiAgICAgICAgICBsZWZ0OiBmaW5hbExlZnRcbiAgICAgICAgfSkpLFxuICAgICAgICBzd2lwZUxlZnQ6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgbmV4dFN0YXRlOiBuZXh0U3RhdGVcbiAgfTtcbn07XG5cbmV4cG9ydHMuc2xpZGVIYW5kbGVyID0gc2xpZGVIYW5kbGVyO1xuXG52YXIgY2hhbmdlU2xpZGUgPSBmdW5jdGlvbiBjaGFuZ2VTbGlkZShzcGVjLCBvcHRpb25zKSB7XG4gIHZhciBpbmRleE9mZnNldCwgcHJldmlvdXNJbnQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQsIHRhcmdldFNsaWRlO1xuICB2YXIgc2xpZGVzVG9TY3JvbGwgPSBzcGVjLnNsaWRlc1RvU2Nyb2xsLFxuICAgICAgc2xpZGVzVG9TaG93ID0gc3BlYy5zbGlkZXNUb1Nob3csXG4gICAgICBzbGlkZUNvdW50ID0gc3BlYy5zbGlkZUNvdW50LFxuICAgICAgY3VycmVudFNsaWRlID0gc3BlYy5jdXJyZW50U2xpZGUsXG4gICAgICBsYXp5TG9hZCA9IHNwZWMubGF6eUxvYWQsXG4gICAgICBpbmZpbml0ZSA9IHNwZWMuaW5maW5pdGU7XG4gIHVuZXZlbk9mZnNldCA9IHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMDtcbiAgaW5kZXhPZmZzZXQgPSB1bmV2ZW5PZmZzZXQgPyAwIDogKHNsaWRlQ291bnQgLSBjdXJyZW50U2xpZGUpICUgc2xpZGVzVG9TY3JvbGw7XG5cbiAgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gXCJwcmV2aW91c1wiKSB7XG4gICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IHNsaWRlc1RvU2Nyb2xsIDogc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgdGFyZ2V0U2xpZGUgPSBjdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldDtcblxuICAgIGlmIChsYXp5TG9hZCAmJiAhaW5maW5pdGUpIHtcbiAgICAgIHByZXZpb3VzSW50ID0gY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQ7XG4gICAgICB0YXJnZXRTbGlkZSA9IHByZXZpb3VzSW50ID09PSAtMSA/IHNsaWRlQ291bnQgLSAxIDogcHJldmlvdXNJbnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gXCJuZXh0XCIpIHtcbiAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICB0YXJnZXRTbGlkZSA9IGN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0O1xuXG4gICAgaWYgKGxhenlMb2FkICYmICFpbmZpbml0ZSkge1xuICAgICAgdGFyZ2V0U2xpZGUgPSAoY3VycmVudFNsaWRlICsgc2xpZGVzVG9TY3JvbGwpICUgc2xpZGVDb3VudCArIGluZGV4T2Zmc2V0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09IFwiZG90c1wiKSB7XG4gICAgLy8gQ2xpY2sgb24gZG90c1xuICAgIHRhcmdldFNsaWRlID0gb3B0aW9ucy5pbmRleCAqIG9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICBpZiAodGFyZ2V0U2xpZGUgPT09IG9wdGlvbnMuY3VycmVudFNsaWRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tZXNzYWdlID09PSBcImNoaWxkcmVuXCIpIHtcbiAgICAvLyBDbGljayBvbiB0aGUgc2xpZGVzXG4gICAgdGFyZ2V0U2xpZGUgPSBvcHRpb25zLmluZGV4O1xuXG4gICAgaWYgKHRhcmdldFNsaWRlID09PSBvcHRpb25zLmN1cnJlbnRTbGlkZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGluZmluaXRlKSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gc2libGluZ0RpcmVjdGlvbihfb2JqZWN0U3ByZWFkKHt9LCBzcGVjLCB7XG4gICAgICAgIHRhcmdldFNsaWRlOiB0YXJnZXRTbGlkZVxuICAgICAgfSkpO1xuXG4gICAgICBpZiAodGFyZ2V0U2xpZGUgPiBvcHRpb25zLmN1cnJlbnRTbGlkZSAmJiBkaXJlY3Rpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gdGFyZ2V0U2xpZGUgLSBzbGlkZUNvdW50O1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRTbGlkZSA8IG9wdGlvbnMuY3VycmVudFNsaWRlICYmIGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgIHRhcmdldFNsaWRlID0gdGFyZ2V0U2xpZGUgKyBzbGlkZUNvdW50O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09IFwiaW5kZXhcIikge1xuICAgIHRhcmdldFNsaWRlID0gTnVtYmVyKG9wdGlvbnMuaW5kZXgpO1xuXG4gICAgaWYgKHRhcmdldFNsaWRlID09PSBvcHRpb25zLmN1cnJlbnRTbGlkZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldFNsaWRlO1xufTtcblxuZXhwb3J0cy5jaGFuZ2VTbGlkZSA9IGNoYW5nZVNsaWRlO1xuXG52YXIga2V5SGFuZGxlciA9IGZ1bmN0aW9uIGtleUhhbmRsZXIoZSwgYWNjZXNzaWJpbGl0eSwgcnRsKSB7XG4gIGlmIChlLnRhcmdldC50YWdOYW1lLm1hdGNoKFwiVEVYVEFSRUF8SU5QVVR8U0VMRUNUXCIpIHx8ICFhY2Nlc3NpYmlsaXR5KSByZXR1cm4gXCJcIjtcbiAgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHJldHVybiBydGwgPyBcIm5leHRcIiA6IFwicHJldmlvdXNcIjtcbiAgaWYgKGUua2V5Q29kZSA9PT0gMzkpIHJldHVybiBydGwgPyBcInByZXZpb3VzXCIgOiBcIm5leHRcIjtcbiAgcmV0dXJuIFwiXCI7XG59O1xuXG5leHBvcnRzLmtleUhhbmRsZXIgPSBrZXlIYW5kbGVyO1xuXG52YXIgc3dpcGVTdGFydCA9IGZ1bmN0aW9uIHN3aXBlU3RhcnQoZSwgc3dpcGUsIGRyYWdnYWJsZSkge1xuICBlLnRhcmdldC50YWdOYW1lID09PSBcIklNR1wiICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgaWYgKCFzd2lwZSB8fCAhZHJhZ2dhYmxlICYmIGUudHlwZS5pbmRleE9mKFwibW91c2VcIikgIT09IC0xKSByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIHtcbiAgICBkcmFnZ2luZzogdHJ1ZSxcbiAgICB0b3VjaE9iamVjdDoge1xuICAgICAgc3RhcnRYOiBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLmNsaWVudFgsXG4gICAgICBzdGFydFk6IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUuY2xpZW50WSxcbiAgICAgIGN1clg6IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUuY2xpZW50WCxcbiAgICAgIGN1clk6IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUuY2xpZW50WVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3dpcGVTdGFydCA9IHN3aXBlU3RhcnQ7XG5cbnZhciBzd2lwZU1vdmUgPSBmdW5jdGlvbiBzd2lwZU1vdmUoZSwgc3BlYykge1xuICAvLyBzcGVjIGFsc28gY29udGFpbnMsIHRyYWNrUmVmIGFuZCBzbGlkZUluZGV4XG4gIHZhciBzY3JvbGxpbmcgPSBzcGVjLnNjcm9sbGluZyxcbiAgICAgIGFuaW1hdGluZyA9IHNwZWMuYW5pbWF0aW5nLFxuICAgICAgdmVydGljYWwgPSBzcGVjLnZlcnRpY2FsLFxuICAgICAgc3dpcGVUb1NsaWRlID0gc3BlYy5zd2lwZVRvU2xpZGUsXG4gICAgICB2ZXJ0aWNhbFN3aXBpbmcgPSBzcGVjLnZlcnRpY2FsU3dpcGluZyxcbiAgICAgIHJ0bCA9IHNwZWMucnRsLFxuICAgICAgY3VycmVudFNsaWRlID0gc3BlYy5jdXJyZW50U2xpZGUsXG4gICAgICBlZGdlRnJpY3Rpb24gPSBzcGVjLmVkZ2VGcmljdGlvbixcbiAgICAgIGVkZ2VEcmFnZ2VkID0gc3BlYy5lZGdlRHJhZ2dlZCxcbiAgICAgIG9uRWRnZSA9IHNwZWMub25FZGdlLFxuICAgICAgc3dpcGVkID0gc3BlYy5zd2lwZWQsXG4gICAgICBzd2lwaW5nID0gc3BlYy5zd2lwaW5nLFxuICAgICAgc2xpZGVDb3VudCA9IHNwZWMuc2xpZGVDb3VudCxcbiAgICAgIHNsaWRlc1RvU2Nyb2xsID0gc3BlYy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIGluZmluaXRlID0gc3BlYy5pbmZpbml0ZSxcbiAgICAgIHRvdWNoT2JqZWN0ID0gc3BlYy50b3VjaE9iamVjdCxcbiAgICAgIHN3aXBlRXZlbnQgPSBzcGVjLnN3aXBlRXZlbnQsXG4gICAgICBsaXN0SGVpZ2h0ID0gc3BlYy5saXN0SGVpZ2h0LFxuICAgICAgbGlzdFdpZHRoID0gc3BlYy5saXN0V2lkdGg7XG4gIGlmIChzY3JvbGxpbmcpIHJldHVybjtcbiAgaWYgKGFuaW1hdGluZykgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgaWYgKHZlcnRpY2FsICYmIHN3aXBlVG9TbGlkZSAmJiB2ZXJ0aWNhbFN3aXBpbmcpIGUucHJldmVudERlZmF1bHQoKTtcbiAgdmFyIHN3aXBlTGVmdCxcbiAgICAgIHN0YXRlID0ge307XG4gIHZhciBjdXJMZWZ0ID0gZ2V0VHJhY2tMZWZ0KHNwZWMpO1xuICB0b3VjaE9iamVjdC5jdXJYID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5jbGllbnRYO1xuICB0b3VjaE9iamVjdC5jdXJZID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5jbGllbnRZO1xuICB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KHRvdWNoT2JqZWN0LmN1clggLSB0b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG4gIHZhciB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3codG91Y2hPYmplY3QuY3VyWSAtIHRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcblxuICBpZiAoIXZlcnRpY2FsU3dpcGluZyAmJiAhc3dpcGluZyAmJiB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID4gMTApIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2Nyb2xsaW5nOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGlmICh2ZXJ0aWNhbFN3aXBpbmcpIHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gdmVydGljYWxTd2lwZUxlbmd0aDtcbiAgdmFyIHBvc2l0aW9uT2Zmc2V0ID0gKCFydGwgPyAxIDogLTEpICogKHRvdWNoT2JqZWN0LmN1clggPiB0b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuICBpZiAodmVydGljYWxTd2lwaW5nKSBwb3NpdGlvbk9mZnNldCA9IHRvdWNoT2JqZWN0LmN1clkgPiB0b3VjaE9iamVjdC5zdGFydFkgPyAxIDogLTE7XG4gIHZhciBkb3RDb3VudCA9IE1hdGguY2VpbChzbGlkZUNvdW50IC8gc2xpZGVzVG9TY3JvbGwpO1xuICB2YXIgc3dpcGVEaXJlY3Rpb24gPSBnZXRTd2lwZURpcmVjdGlvbihzcGVjLnRvdWNoT2JqZWN0LCB2ZXJ0aWNhbFN3aXBpbmcpO1xuICB2YXIgdG91Y2hTd2lwZUxlbmd0aCA9IHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoO1xuXG4gIGlmICghaW5maW5pdGUpIHtcbiAgICBpZiAoY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSBcInJpZ2h0XCIgfHwgY3VycmVudFNsaWRlICsgMSA+PSBkb3RDb3VudCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgfHwgIWNhbkdvTmV4dChzcGVjKSAmJiBzd2lwZURpcmVjdGlvbiA9PT0gXCJsZWZ0XCIpIHtcbiAgICAgIHRvdWNoU3dpcGVMZW5ndGggPSB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIGVkZ2VGcmljdGlvbjtcblxuICAgICAgaWYgKGVkZ2VEcmFnZ2VkID09PSBmYWxzZSAmJiBvbkVkZ2UpIHtcbiAgICAgICAgb25FZGdlKHN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3RhdGVbXCJlZGdlRHJhZ2dlZFwiXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzd2lwZWQgJiYgc3dpcGVFdmVudCkge1xuICAgIHN3aXBlRXZlbnQoc3dpcGVEaXJlY3Rpb24pO1xuICAgIHN0YXRlW1wic3dpcGVkXCJdID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICghdmVydGljYWwpIHtcbiAgICBpZiAoIXJ0bCkge1xuICAgICAgc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHRvdWNoU3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVMZWZ0ID0gY3VyTGVmdCAtIHRvdWNoU3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHRvdWNoU3dpcGVMZW5ndGggKiAobGlzdEhlaWdodCAvIGxpc3RXaWR0aCkgKiBwb3NpdGlvbk9mZnNldDtcbiAgfVxuXG4gIGlmICh2ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICB9XG5cbiAgc3RhdGUgPSBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgIHRvdWNoT2JqZWN0OiB0b3VjaE9iamVjdCxcbiAgICBzd2lwZUxlZnQ6IHN3aXBlTGVmdCxcbiAgICB0cmFja1N0eWxlOiBnZXRUcmFja0NTUyhfb2JqZWN0U3ByZWFkKHt9LCBzcGVjLCB7XG4gICAgICBsZWZ0OiBzd2lwZUxlZnRcbiAgICB9KSlcbiAgfSk7XG5cbiAgaWYgKE1hdGguYWJzKHRvdWNoT2JqZWN0LmN1clggLSB0b3VjaE9iamVjdC5zdGFydFgpIDwgTWF0aC5hYnModG91Y2hPYmplY3QuY3VyWSAtIHRvdWNoT2JqZWN0LnN0YXJ0WSkgKiAwLjgpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBpZiAodG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCkge1xuICAgIHN0YXRlW1wic3dpcGluZ1wiXSA9IHRydWU7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxuZXhwb3J0cy5zd2lwZU1vdmUgPSBzd2lwZU1vdmU7XG5cbnZhciBzd2lwZUVuZCA9IGZ1bmN0aW9uIHN3aXBlRW5kKGUsIHNwZWMpIHtcbiAgdmFyIGRyYWdnaW5nID0gc3BlYy5kcmFnZ2luZyxcbiAgICAgIHN3aXBlID0gc3BlYy5zd2lwZSxcbiAgICAgIHRvdWNoT2JqZWN0ID0gc3BlYy50b3VjaE9iamVjdCxcbiAgICAgIGxpc3RXaWR0aCA9IHNwZWMubGlzdFdpZHRoLFxuICAgICAgdG91Y2hUaHJlc2hvbGQgPSBzcGVjLnRvdWNoVGhyZXNob2xkLFxuICAgICAgdmVydGljYWxTd2lwaW5nID0gc3BlYy52ZXJ0aWNhbFN3aXBpbmcsXG4gICAgICBsaXN0SGVpZ2h0ID0gc3BlYy5saXN0SGVpZ2h0LFxuICAgICAgY3VycmVudFNsaWRlID0gc3BlYy5jdXJyZW50U2xpZGUsXG4gICAgICBzd2lwZVRvU2xpZGUgPSBzcGVjLnN3aXBlVG9TbGlkZSxcbiAgICAgIHNjcm9sbGluZyA9IHNwZWMuc2Nyb2xsaW5nLFxuICAgICAgb25Td2lwZSA9IHNwZWMub25Td2lwZTtcblxuICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgaWYgKHN3aXBlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgdmFyIG1pblN3aXBlID0gdmVydGljYWxTd2lwaW5nID8gbGlzdEhlaWdodCAvIHRvdWNoVGhyZXNob2xkIDogbGlzdFdpZHRoIC8gdG91Y2hUaHJlc2hvbGQ7XG4gIHZhciBzd2lwZURpcmVjdGlvbiA9IGdldFN3aXBlRGlyZWN0aW9uKHRvdWNoT2JqZWN0LCB2ZXJ0aWNhbFN3aXBpbmcpOyAvLyByZXNldCB0aGUgc3RhdGUgb2YgdG91Y2ggcmVsYXRlZCBzdGF0ZSB2YXJpYWJsZXMuXG5cbiAgdmFyIHN0YXRlID0ge1xuICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICBlZGdlRHJhZ2dlZDogZmFsc2UsXG4gICAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgICBzd2lwaW5nOiBmYWxzZSxcbiAgICBzd2lwZWQ6IGZhbHNlLFxuICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICB0b3VjaE9iamVjdDoge31cbiAgfTtcblxuICBpZiAoc2Nyb2xsaW5nKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgaWYgKCF0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGlmICh0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IG1pblN3aXBlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKG9uU3dpcGUpIHtcbiAgICAgIG9uU3dpcGUoc3dpcGVEaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIHZhciBzbGlkZUNvdW50LCBuZXdTbGlkZTtcblxuICAgIHN3aXRjaCAoc3dpcGVEaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBjYXNlIFwidXBcIjpcbiAgICAgICAgbmV3U2xpZGUgPSBjdXJyZW50U2xpZGUgKyBnZXRTbGlkZUNvdW50KHNwZWMpO1xuICAgICAgICBzbGlkZUNvdW50ID0gc3dpcGVUb1NsaWRlID8gY2hlY2tOYXZpZ2FibGUoc3BlYywgbmV3U2xpZGUpIDogbmV3U2xpZGU7XG4gICAgICAgIHN0YXRlW1wiY3VycmVudERpcmVjdGlvblwiXSA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgIG5ld1NsaWRlID0gY3VycmVudFNsaWRlIC0gZ2V0U2xpZGVDb3VudChzcGVjKTtcbiAgICAgICAgc2xpZGVDb3VudCA9IHN3aXBlVG9TbGlkZSA/IGNoZWNrTmF2aWdhYmxlKHNwZWMsIG5ld1NsaWRlKSA6IG5ld1NsaWRlO1xuICAgICAgICBzdGF0ZVtcImN1cnJlbnREaXJlY3Rpb25cIl0gPSAxO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc2xpZGVDb3VudCA9IGN1cnJlbnRTbGlkZTtcbiAgICB9XG5cbiAgICBzdGF0ZVtcInRyaWdnZXJTbGlkZUhhbmRsZXJcIl0gPSBzbGlkZUNvdW50O1xuICB9IGVsc2Uge1xuICAgIC8vIEFkanVzdCB0aGUgdHJhY2sgYmFjayB0byBpdCdzIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBjdXJyZW50TGVmdCA9IGdldFRyYWNrTGVmdChzcGVjKTtcbiAgICBzdGF0ZVtcInRyYWNrU3R5bGVcIl0gPSBnZXRUcmFja0FuaW1hdGVDU1MoX29iamVjdFNwcmVhZCh7fSwgc3BlYywge1xuICAgICAgbGVmdDogY3VycmVudExlZnRcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59O1xuXG5leHBvcnRzLnN3aXBlRW5kID0gc3dpcGVFbmQ7XG5cbnZhciBnZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24gZ2V0TmF2aWdhYmxlSW5kZXhlcyhzcGVjKSB7XG4gIHZhciBtYXggPSBzcGVjLmluZmluaXRlID8gc3BlYy5zbGlkZUNvdW50ICogMiA6IHNwZWMuc2xpZGVDb3VudDtcbiAgdmFyIGJyZWFrcG9pbnQgPSBzcGVjLmluZmluaXRlID8gc3BlYy5zbGlkZXNUb1Nob3cgKiAtMSA6IDA7XG4gIHZhciBjb3VudGVyID0gc3BlYy5pbmZpbml0ZSA/IHNwZWMuc2xpZGVzVG9TaG93ICogLTEgOiAwO1xuICB2YXIgaW5kZXhlcyA9IFtdO1xuXG4gIHdoaWxlIChicmVha3BvaW50IDwgbWF4KSB7XG4gICAgaW5kZXhlcy5wdXNoKGJyZWFrcG9pbnQpO1xuICAgIGJyZWFrcG9pbnQgPSBjb3VudGVyICsgc3BlYy5zbGlkZXNUb1Njcm9sbDtcbiAgICBjb3VudGVyICs9IE1hdGgubWluKHNwZWMuc2xpZGVzVG9TY3JvbGwsIHNwZWMuc2xpZGVzVG9TaG93KTtcbiAgfVxuXG4gIHJldHVybiBpbmRleGVzO1xufTtcblxuZXhwb3J0cy5nZXROYXZpZ2FibGVJbmRleGVzID0gZ2V0TmF2aWdhYmxlSW5kZXhlcztcblxudmFyIGNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24gY2hlY2tOYXZpZ2FibGUoc3BlYywgaW5kZXgpIHtcbiAgdmFyIG5hdmlnYWJsZXMgPSBnZXROYXZpZ2FibGVJbmRleGVzKHNwZWMpO1xuICB2YXIgcHJldk5hdmlnYWJsZSA9IDA7XG5cbiAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XG4gICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn07XG5cbmV4cG9ydHMuY2hlY2tOYXZpZ2FibGUgPSBjaGVja05hdmlnYWJsZTtcblxudmFyIGdldFNsaWRlQ291bnQgPSBmdW5jdGlvbiBnZXRTbGlkZUNvdW50KHNwZWMpIHtcbiAgdmFyIGNlbnRlck9mZnNldCA9IHNwZWMuY2VudGVyTW9kZSA/IHNwZWMuc2xpZGVXaWR0aCAqIE1hdGguZmxvb3Ioc3BlYy5zbGlkZXNUb1Nob3cgLyAyKSA6IDA7XG5cbiAgaWYgKHNwZWMuc3dpcGVUb1NsaWRlKSB7XG4gICAgdmFyIHN3aXBlZFNsaWRlO1xuXG4gICAgdmFyIHNsaWNrTGlzdCA9IF9yZWFjdERvbVtcImRlZmF1bHRcIl0uZmluZERPTU5vZGUoc3BlYy5saXN0UmVmKTtcblxuICAgIHZhciBzbGlkZXMgPSBzbGlja0xpc3QucXVlcnlTZWxlY3RvckFsbChcIi5zbGljay1zbGlkZVwiKTtcbiAgICBBcnJheS5mcm9tKHNsaWRlcykuZXZlcnkoZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICBpZiAoIXNwZWMudmVydGljYWwpIHtcbiAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyBnZXRXaWR0aChzbGlkZSkgLyAyID4gc3BlYy5zd2lwZUxlZnQgKiAtMSkge1xuICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2xpZGUub2Zmc2V0VG9wICsgZ2V0SGVpZ2h0KHNsaWRlKSAvIDIgPiBzcGVjLnN3aXBlTGVmdCAqIC0xKSB7XG4gICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG5cbiAgICBpZiAoIXN3aXBlZFNsaWRlKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudEluZGV4ID0gc3BlYy5ydGwgPT09IHRydWUgPyBzcGVjLnNsaWRlQ291bnQgLSBzcGVjLmN1cnJlbnRTbGlkZSA6IHNwZWMuY3VycmVudFNsaWRlO1xuICAgIHZhciBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicyhzd2lwZWRTbGlkZS5kYXRhc2V0LmluZGV4IC0gY3VycmVudEluZGV4KSB8fCAxO1xuICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNwZWMuc2xpZGVzVG9TY3JvbGw7XG4gIH1cbn07XG5cbmV4cG9ydHMuZ2V0U2xpZGVDb3VudCA9IGdldFNsaWRlQ291bnQ7XG5cbnZhciBjaGVja1NwZWNLZXlzID0gZnVuY3Rpb24gY2hlY2tTcGVjS2V5cyhzcGVjLCBrZXlzQXJyYXkpIHtcbiAgcmV0dXJuIGtleXNBcnJheS5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgc3BlYy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICB9LCB0cnVlKSA/IG51bGwgOiBjb25zb2xlLmVycm9yKFwiS2V5cyBNaXNzaW5nOlwiLCBzcGVjKTtcbn07XG5cbmV4cG9ydHMuY2hlY2tTcGVjS2V5cyA9IGNoZWNrU3BlY0tleXM7XG5cbnZhciBnZXRUcmFja0NTUyA9IGZ1bmN0aW9uIGdldFRyYWNrQ1NTKHNwZWMpIHtcbiAgY2hlY2tTcGVjS2V5cyhzcGVjLCBbXCJsZWZ0XCIsIFwidmFyaWFibGVXaWR0aFwiLCBcInNsaWRlQ291bnRcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJzbGlkZVdpZHRoXCJdKTtcbiAgdmFyIHRyYWNrV2lkdGgsIHRyYWNrSGVpZ2h0O1xuICB2YXIgdHJhY2tDaGlsZHJlbiA9IHNwZWMuc2xpZGVDb3VudCArIDIgKiBzcGVjLnNsaWRlc1RvU2hvdztcblxuICBpZiAoIXNwZWMudmVydGljYWwpIHtcbiAgICB0cmFja1dpZHRoID0gZ2V0VG90YWxTbGlkZXMoc3BlYykgKiBzcGVjLnNsaWRlV2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgdHJhY2tIZWlnaHQgPSB0cmFja0NoaWxkcmVuICogc3BlYy5zbGlkZUhlaWdodDtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zaXRpb246IFwiXCIsXG4gICAgV2Via2l0VHJhbnNpdGlvbjogXCJcIlxuICB9O1xuXG4gIGlmIChzcGVjLnVzZVRyYW5zZm9ybSkge1xuICAgIHZhciBXZWJraXRUcmFuc2Zvcm0gPSAhc3BlYy52ZXJ0aWNhbCA/IFwidHJhbnNsYXRlM2QoXCIgKyBzcGVjLmxlZnQgKyBcInB4LCAwcHgsIDBweClcIiA6IFwidHJhbnNsYXRlM2QoMHB4LCBcIiArIHNwZWMubGVmdCArIFwicHgsIDBweClcIjtcbiAgICB2YXIgdHJhbnNmb3JtID0gIXNwZWMudmVydGljYWwgPyBcInRyYW5zbGF0ZTNkKFwiICsgc3BlYy5sZWZ0ICsgXCJweCwgMHB4LCAwcHgpXCIgOiBcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyBzcGVjLmxlZnQgKyBcInB4LCAwcHgpXCI7XG4gICAgdmFyIG1zVHJhbnNmb3JtID0gIXNwZWMudmVydGljYWwgPyBcInRyYW5zbGF0ZVgoXCIgKyBzcGVjLmxlZnQgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGVZKFwiICsgc3BlYy5sZWZ0ICsgXCJweClcIjtcbiAgICBzdHlsZSA9IF9vYmplY3RTcHJlYWQoe30sIHN0eWxlLCB7XG4gICAgICBXZWJraXRUcmFuc2Zvcm06IFdlYmtpdFRyYW5zZm9ybSxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgbXNUcmFuc2Zvcm06IG1zVHJhbnNmb3JtXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNwZWMudmVydGljYWwpIHtcbiAgICAgIHN0eWxlW1widG9wXCJdID0gc3BlYy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZVtcImxlZnRcIl0gPSBzcGVjLmxlZnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNwZWMuZmFkZSkgc3R5bGUgPSB7XG4gICAgb3BhY2l0eTogMVxuICB9O1xuICBpZiAodHJhY2tXaWR0aCkgc3R5bGUud2lkdGggPSB0cmFja1dpZHRoO1xuICBpZiAodHJhY2tIZWlnaHQpIHN0eWxlLmhlaWdodCA9IHRyYWNrSGVpZ2h0OyAvLyBGYWxsYmFjayBmb3IgSUU4XG5cbiAgaWYgKHdpbmRvdyAmJiAhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJiYgd2luZG93LmF0dGFjaEV2ZW50KSB7XG4gICAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgICBzdHlsZS5tYXJnaW5MZWZ0ID0gc3BlYy5sZWZ0ICsgXCJweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5tYXJnaW5Ub3AgPSBzcGVjLmxlZnQgKyBcInB4XCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxuZXhwb3J0cy5nZXRUcmFja0NTUyA9IGdldFRyYWNrQ1NTO1xuXG52YXIgZ2V0VHJhY2tBbmltYXRlQ1NTID0gZnVuY3Rpb24gZ2V0VHJhY2tBbmltYXRlQ1NTKHNwZWMpIHtcbiAgY2hlY2tTcGVjS2V5cyhzcGVjLCBbXCJsZWZ0XCIsIFwidmFyaWFibGVXaWR0aFwiLCBcInNsaWRlQ291bnRcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJzbGlkZVdpZHRoXCIsIFwic3BlZWRcIiwgXCJjc3NFYXNlXCJdKTtcbiAgdmFyIHN0eWxlID0gZ2V0VHJhY2tDU1Moc3BlYyk7IC8vIHVzZUNTUyBpcyB0cnVlIGJ5IGRlZmF1bHQgc28gaXQgY2FuIGJlIHVuZGVmaW5lZFxuXG4gIGlmIChzcGVjLnVzZVRyYW5zZm9ybSkge1xuICAgIHN0eWxlLldlYmtpdFRyYW5zaXRpb24gPSBcIi13ZWJraXQtdHJhbnNmb3JtIFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gICAgc3R5bGUudHJhbnNpdGlvbiA9IFwidHJhbnNmb3JtIFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNwZWMudmVydGljYWwpIHtcbiAgICAgIHN0eWxlLnRyYW5zaXRpb24gPSBcInRvcCBcIiArIHNwZWMuc3BlZWQgKyBcIm1zIFwiICsgc3BlYy5jc3NFYXNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS50cmFuc2l0aW9uID0gXCJsZWZ0IFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxuZXhwb3J0cy5nZXRUcmFja0FuaW1hdGVDU1MgPSBnZXRUcmFja0FuaW1hdGVDU1M7XG5cbnZhciBnZXRUcmFja0xlZnQgPSBmdW5jdGlvbiBnZXRUcmFja0xlZnQoc3BlYykge1xuICBpZiAoc3BlYy51bnNsaWNrKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBjaGVja1NwZWNLZXlzKHNwZWMsIFtcInNsaWRlSW5kZXhcIiwgXCJ0cmFja1JlZlwiLCBcImluZmluaXRlXCIsIFwiY2VudGVyTW9kZVwiLCBcInNsaWRlQ291bnRcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJzbGlkZXNUb1Njcm9sbFwiLCBcInNsaWRlV2lkdGhcIiwgXCJsaXN0V2lkdGhcIiwgXCJ2YXJpYWJsZVdpZHRoXCIsIFwic2xpZGVIZWlnaHRcIl0pO1xuICB2YXIgc2xpZGVJbmRleCA9IHNwZWMuc2xpZGVJbmRleCxcbiAgICAgIHRyYWNrUmVmID0gc3BlYy50cmFja1JlZixcbiAgICAgIGluZmluaXRlID0gc3BlYy5pbmZpbml0ZSxcbiAgICAgIGNlbnRlck1vZGUgPSBzcGVjLmNlbnRlck1vZGUsXG4gICAgICBzbGlkZUNvdW50ID0gc3BlYy5zbGlkZUNvdW50LFxuICAgICAgc2xpZGVzVG9TaG93ID0gc3BlYy5zbGlkZXNUb1Nob3csXG4gICAgICBzbGlkZXNUb1Njcm9sbCA9IHNwZWMuc2xpZGVzVG9TY3JvbGwsXG4gICAgICBzbGlkZVdpZHRoID0gc3BlYy5zbGlkZVdpZHRoLFxuICAgICAgbGlzdFdpZHRoID0gc3BlYy5saXN0V2lkdGgsXG4gICAgICB2YXJpYWJsZVdpZHRoID0gc3BlYy52YXJpYWJsZVdpZHRoLFxuICAgICAgc2xpZGVIZWlnaHQgPSBzcGVjLnNsaWRlSGVpZ2h0LFxuICAgICAgZmFkZSA9IHNwZWMuZmFkZSxcbiAgICAgIHZlcnRpY2FsID0gc3BlYy52ZXJ0aWNhbDtcbiAgdmFyIHNsaWRlT2Zmc2V0ID0gMDtcbiAgdmFyIHRhcmdldExlZnQ7XG4gIHZhciB0YXJnZXRTbGlkZTtcbiAgdmFyIHZlcnRpY2FsT2Zmc2V0ID0gMDtcblxuICBpZiAoZmFkZSB8fCBzcGVjLnNsaWRlQ291bnQgPT09IDEpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBzbGlkZXNUb09mZnNldCA9IDA7XG5cbiAgaWYgKGluZmluaXRlKSB7XG4gICAgc2xpZGVzVG9PZmZzZXQgPSAtZ2V0UHJlQ2xvbmVzKHNwZWMpOyAvLyBicmluZyBhY3RpdmUgc2xpZGUgdG8gdGhlIGJlZ2lubmluZyBvZiB2aXN1YWwgYXJlYVxuICAgIC8vIGlmIG5leHQgc2Nyb2xsIGRvZXNuJ3QgaGF2ZSBlbm91Z2ggY2hpbGRyZW4sIGp1c3QgcmVhY2ggdGlsbCB0aGUgZW5kIG9mIG9yaWdpbmFsIHNsaWRlcyBpbnN0ZWFkIG9mIHNoaWZ0aW5nIHNsaWRlc1RvU2Nyb2xsIGNoaWxkcmVuXG5cbiAgICBpZiAoc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsICE9PSAwICYmIHNsaWRlSW5kZXggKyBzbGlkZXNUb1Njcm9sbCA+IHNsaWRlQ291bnQpIHtcbiAgICAgIHNsaWRlc1RvT2Zmc2V0ID0gLShzbGlkZUluZGV4ID4gc2xpZGVDb3VudCA/IHNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gc2xpZGVDb3VudCkgOiBzbGlkZUNvdW50ICUgc2xpZGVzVG9TY3JvbGwpO1xuICAgIH0gLy8gc2hpZnQgY3VycmVudCBzbGlkZSB0byBjZW50ZXIgb2YgdGhlIGZyYW1lXG5cblxuICAgIGlmIChjZW50ZXJNb2RlKSB7XG4gICAgICBzbGlkZXNUb09mZnNldCArPSBwYXJzZUludChzbGlkZXNUb1Nob3cgLyAyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMCAmJiBzbGlkZUluZGV4ICsgc2xpZGVzVG9TY3JvbGwgPiBzbGlkZUNvdW50KSB7XG4gICAgICBzbGlkZXNUb09mZnNldCA9IHNsaWRlc1RvU2hvdyAtIHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbDtcbiAgICB9XG5cbiAgICBpZiAoY2VudGVyTW9kZSkge1xuICAgICAgc2xpZGVzVG9PZmZzZXQgPSBwYXJzZUludChzbGlkZXNUb1Nob3cgLyAyKTtcbiAgICB9XG4gIH1cblxuICBzbGlkZU9mZnNldCA9IHNsaWRlc1RvT2Zmc2V0ICogc2xpZGVXaWR0aDtcbiAgdmVydGljYWxPZmZzZXQgPSBzbGlkZXNUb09mZnNldCAqIHNsaWRlSGVpZ2h0O1xuXG4gIGlmICghdmVydGljYWwpIHtcbiAgICB0YXJnZXRMZWZ0ID0gc2xpZGVJbmRleCAqIHNsaWRlV2lkdGggKiAtMSArIHNsaWRlT2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHRhcmdldExlZnQgPSBzbGlkZUluZGV4ICogc2xpZGVIZWlnaHQgKiAtMSArIHZlcnRpY2FsT2Zmc2V0O1xuICB9XG5cbiAgaWYgKHZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcbiAgICB2YXIgdGFyZ2V0U2xpZGVJbmRleDtcblxuICAgIHZhciB0cmFja0VsZW0gPSBfcmVhY3REb21bXCJkZWZhdWx0XCJdLmZpbmRET01Ob2RlKHRyYWNrUmVmKTtcblxuICAgIHRhcmdldFNsaWRlSW5kZXggPSBzbGlkZUluZGV4ICsgZ2V0UHJlQ2xvbmVzKHNwZWMpO1xuICAgIHRhcmdldFNsaWRlID0gdHJhY2tFbGVtICYmIHRyYWNrRWxlbS5jaGlsZE5vZGVzW3RhcmdldFNsaWRlSW5kZXhdO1xuICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZSA/IHRhcmdldFNsaWRlLm9mZnNldExlZnQgKiAtMSA6IDA7XG5cbiAgICBpZiAoY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IGluZmluaXRlID8gc2xpZGVJbmRleCArIGdldFByZUNsb25lcyhzcGVjKSA6IHNsaWRlSW5kZXg7XG4gICAgICB0YXJnZXRTbGlkZSA9IHRyYWNrRWxlbSAmJiB0cmFja0VsZW0uY2hpbGRyZW5bdGFyZ2V0U2xpZGVJbmRleF07XG4gICAgICB0YXJnZXRMZWZ0ID0gMDtcblxuICAgICAgZm9yICh2YXIgc2xpZGUgPSAwOyBzbGlkZSA8IHRhcmdldFNsaWRlSW5kZXg7IHNsaWRlKyspIHtcbiAgICAgICAgdGFyZ2V0TGVmdCAtPSB0cmFja0VsZW0gJiYgdHJhY2tFbGVtLmNoaWxkcmVuW3NsaWRlXSAmJiB0cmFja0VsZW0uY2hpbGRyZW5bc2xpZGVdLm9mZnNldFdpZHRoO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRMZWZ0IC09IHBhcnNlSW50KHNwZWMuY2VudGVyUGFkZGluZyk7XG4gICAgICB0YXJnZXRMZWZ0ICs9IHRhcmdldFNsaWRlICYmIChsaXN0V2lkdGggLSB0YXJnZXRTbGlkZS5vZmZzZXRXaWR0aCkgLyAyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRMZWZ0O1xufTtcblxuZXhwb3J0cy5nZXRUcmFja0xlZnQgPSBnZXRUcmFja0xlZnQ7XG5cbnZhciBnZXRQcmVDbG9uZXMgPSBmdW5jdGlvbiBnZXRQcmVDbG9uZXMoc3BlYykge1xuICBpZiAoc3BlYy51bnNsaWNrIHx8ICFzcGVjLmluZmluaXRlKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoc3BlYy52YXJpYWJsZVdpZHRoKSB7XG4gICAgcmV0dXJuIHNwZWMuc2xpZGVDb3VudDtcbiAgfVxuXG4gIHJldHVybiBzcGVjLnNsaWRlc1RvU2hvdyArIChzcGVjLmNlbnRlck1vZGUgPyAxIDogMCk7XG59O1xuXG5leHBvcnRzLmdldFByZUNsb25lcyA9IGdldFByZUNsb25lcztcblxudmFyIGdldFBvc3RDbG9uZXMgPSBmdW5jdGlvbiBnZXRQb3N0Q2xvbmVzKHNwZWMpIHtcbiAgaWYgKHNwZWMudW5zbGljayB8fCAhc3BlYy5pbmZpbml0ZSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHNwZWMuc2xpZGVDb3VudDtcbn07XG5cbmV4cG9ydHMuZ2V0UG9zdENsb25lcyA9IGdldFBvc3RDbG9uZXM7XG5cbnZhciBnZXRUb3RhbFNsaWRlcyA9IGZ1bmN0aW9uIGdldFRvdGFsU2xpZGVzKHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuc2xpZGVDb3VudCA9PT0gMSA/IDEgOiBnZXRQcmVDbG9uZXMoc3BlYykgKyBzcGVjLnNsaWRlQ291bnQgKyBnZXRQb3N0Q2xvbmVzKHNwZWMpO1xufTtcblxuZXhwb3J0cy5nZXRUb3RhbFNsaWRlcyA9IGdldFRvdGFsU2xpZGVzO1xuXG52YXIgc2libGluZ0RpcmVjdGlvbiA9IGZ1bmN0aW9uIHNpYmxpbmdEaXJlY3Rpb24oc3BlYykge1xuICBpZiAoc3BlYy50YXJnZXRTbGlkZSA+IHNwZWMuY3VycmVudFNsaWRlKSB7XG4gICAgaWYgKHNwZWMudGFyZ2V0U2xpZGUgPiBzcGVjLmN1cnJlbnRTbGlkZSArIHNsaWRlc09uUmlnaHQoc3BlYykpIHtcbiAgICAgIHJldHVybiBcImxlZnRcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJyaWdodFwiO1xuICB9IGVsc2Uge1xuICAgIGlmIChzcGVjLnRhcmdldFNsaWRlIDwgc3BlYy5jdXJyZW50U2xpZGUgLSBzbGlkZXNPbkxlZnQoc3BlYykpIHtcbiAgICAgIHJldHVybiBcInJpZ2h0XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwibGVmdFwiO1xuICB9XG59O1xuXG5leHBvcnRzLnNpYmxpbmdEaXJlY3Rpb24gPSBzaWJsaW5nRGlyZWN0aW9uO1xuXG52YXIgc2xpZGVzT25SaWdodCA9IGZ1bmN0aW9uIHNsaWRlc09uUmlnaHQoX3JlZikge1xuICB2YXIgc2xpZGVzVG9TaG93ID0gX3JlZi5zbGlkZXNUb1Nob3csXG4gICAgICBjZW50ZXJNb2RlID0gX3JlZi5jZW50ZXJNb2RlLFxuICAgICAgcnRsID0gX3JlZi5ydGwsXG4gICAgICBjZW50ZXJQYWRkaW5nID0gX3JlZi5jZW50ZXJQYWRkaW5nO1xuXG4gIC8vIHJldHVybnMgbm8gb2Ygc2xpZGVzIG9uIHRoZSByaWdodCBvZiBhY3RpdmUgc2xpZGVcbiAgaWYgKGNlbnRlck1vZGUpIHtcbiAgICB2YXIgcmlnaHQgPSAoc2xpZGVzVG9TaG93IC0gMSkgLyAyICsgMTtcbiAgICBpZiAocGFyc2VJbnQoY2VudGVyUGFkZGluZykgPiAwKSByaWdodCArPSAxO1xuICAgIGlmIChydGwgJiYgc2xpZGVzVG9TaG93ICUgMiA9PT0gMCkgcmlnaHQgKz0gMTtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH1cblxuICBpZiAocnRsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gc2xpZGVzVG9TaG93IC0gMTtcbn07XG5cbmV4cG9ydHMuc2xpZGVzT25SaWdodCA9IHNsaWRlc09uUmlnaHQ7XG5cbnZhciBzbGlkZXNPbkxlZnQgPSBmdW5jdGlvbiBzbGlkZXNPbkxlZnQoX3JlZjIpIHtcbiAgdmFyIHNsaWRlc1RvU2hvdyA9IF9yZWYyLnNsaWRlc1RvU2hvdyxcbiAgICAgIGNlbnRlck1vZGUgPSBfcmVmMi5jZW50ZXJNb2RlLFxuICAgICAgcnRsID0gX3JlZjIucnRsLFxuICAgICAgY2VudGVyUGFkZGluZyA9IF9yZWYyLmNlbnRlclBhZGRpbmc7XG5cbiAgLy8gcmV0dXJucyBubyBvZiBzbGlkZXMgb24gdGhlIGxlZnQgb2YgYWN0aXZlIHNsaWRlXG4gIGlmIChjZW50ZXJNb2RlKSB7XG4gICAgdmFyIGxlZnQgPSAoc2xpZGVzVG9TaG93IC0gMSkgLyAyICsgMTtcbiAgICBpZiAocGFyc2VJbnQoY2VudGVyUGFkZGluZykgPiAwKSBsZWZ0ICs9IDE7XG4gICAgaWYgKCFydGwgJiYgc2xpZGVzVG9TaG93ICUgMiA9PT0gMCkgbGVmdCArPSAxO1xuICAgIHJldHVybiBsZWZ0O1xuICB9XG5cbiAgaWYgKHJ0bCkge1xuICAgIHJldHVybiBzbGlkZXNUb1Nob3cgLSAxO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59O1xuXG5leHBvcnRzLnNsaWRlc09uTGVmdCA9IHNsaWRlc09uTGVmdDtcblxudmFyIGNhblVzZURPTSA9IGZ1bmN0aW9uIGNhblVzZURPTSgpIHtcbiAgcmV0dXJuICEhKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbn07XG5cbmV4cG9ydHMuY2FuVXNlRE9NID0gY2FuVXNlRE9NOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVHlwb2dyYXBoeVwiKSk7XG5cbnZhciBfVGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGV4dFwiKSk7XG5cbnZhciBfVGl0bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RpdGxlXCIpKTtcblxudmFyIF9QYXJhZ3JhcGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BhcmFncmFwaFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG52YXIgVHlwb2dyYXBoeSA9IF9UeXBvZ3JhcGh5W1wiZGVmYXVsdFwiXTtcblR5cG9ncmFwaHkuVGV4dCA9IF9UZXh0W1wiZGVmYXVsdFwiXTtcblR5cG9ncmFwaHkuVGl0bGUgPSBfVGl0bGVbXCJkZWZhdWx0XCJdO1xuVHlwb2dyYXBoeS5QYXJhZ3JhcGggPSBfUGFyYWdyYXBoW1wiZGVmYXVsdFwiXTtcbnZhciBfZGVmYXVsdCA9IFR5cG9ncmFwaHk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF90b0FycmF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvQ2hpbGRyZW4vdG9BcnJheVwiKSk7XG5cbnZhciBfZmluZERPTU5vZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9Eb20vZmluZERPTU5vZGVcIikpO1xuXG52YXIgX2NvcHlUb0NsaXBib2FyZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNvcHktdG8tY2xpcGJvYXJkXCIpKTtcblxudmFyIF9vbWl0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwib21pdC5qc1wiKSk7XG5cbnZhciBfcmNSZXNpemVPYnNlcnZlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXJlc2l6ZS1vYnNlcnZlclwiKSk7XG5cbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuXG52YXIgX2NvbnRleHQgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyL2NvbnRleHRcIik7XG5cbnZhciBfTG9jYWxlUmVjZWl2ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXJcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC93YXJuaW5nXCIpKTtcblxudmFyIF90cmFuc0J1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3RyYW5zQnV0dG9uXCIpKTtcblxudmFyIF9yYWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC9yYWZcIikpO1xuXG52YXIgX3N0eWxlQ2hlY2tlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3N0eWxlQ2hlY2tlclwiKSk7XG5cbnZhciBfaWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ljb25cIikpO1xuXG52YXIgX3Rvb2x0aXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b29sdGlwXCIpKTtcblxudmFyIF9UeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UeXBvZ3JhcGh5XCIpKTtcblxudmFyIF9FZGl0YWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRWRpdGFibGVcIikpO1xuXG52YXIgX3V0aWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIGlzTGluZUNsYW1wU3VwcG9ydCA9ICgwLCBfc3R5bGVDaGVja2VyW1wiZGVmYXVsdFwiXSkoJ3dlYmtpdExpbmVDbGFtcCcpO1xudmFyIGlzVGV4dE92ZXJmbG93U3VwcG9ydCA9ICgwLCBfc3R5bGVDaGVja2VyW1wiZGVmYXVsdFwiXSkoJ3RleHRPdmVyZmxvdycpO1xuXG5mdW5jdGlvbiB3cmFwcGVyRGVjb3JhdGlvbnMoX3JlZiwgY29udGVudCkge1xuICB2YXIgbWFyayA9IF9yZWYubWFyayxcbiAgICAgIGNvZGUgPSBfcmVmLmNvZGUsXG4gICAgICB1bmRlcmxpbmUgPSBfcmVmLnVuZGVybGluZSxcbiAgICAgIGRlbCA9IF9yZWZbXCJkZWxldGVcIl0sXG4gICAgICBzdHJvbmcgPSBfcmVmLnN0cm9uZztcbiAgdmFyIGN1cnJlbnRDb250ZW50ID0gY29udGVudDtcblxuICBmdW5jdGlvbiB3cmFwKG5lZWRlZCwgdGFnKSB7XG4gICAgaWYgKCFuZWVkZWQpIHJldHVybjtcbiAgICBjdXJyZW50Q29udGVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGFnLCB7fSwgY3VycmVudENvbnRlbnQpO1xuICB9XG5cbiAgd3JhcChzdHJvbmcsICdzdHJvbmcnKTtcbiAgd3JhcCh1bmRlcmxpbmUsICd1Jyk7XG4gIHdyYXAoZGVsLCAnZGVsJyk7XG4gIHdyYXAoY29kZSwgJ2NvZGUnKTtcbiAgd3JhcChtYXJrLCAnbWFyaycpO1xuICByZXR1cm4gY3VycmVudENvbnRlbnQ7XG59XG5cbnZhciBFTExJUFNJU19TVFIgPSAnLi4uJztcblxudmFyIEJhc2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJhc2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQmFzZSk7XG5cbiAgZnVuY3Rpb24gQmFzZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZSk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZWRpdDogZmFsc2UsXG4gICAgICBjb3BpZWQ6IGZhbHNlLFxuICAgICAgZWxsaXBzaXNUZXh0OiAnJyxcbiAgICAgIGVsbGlwc2lzQ29udGVudDogbnVsbCxcbiAgICAgIGlzRWxsaXBzaXM6IGZhbHNlLFxuICAgICAgZXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgY2xpZW50UmVuZGVyZWQ6IGZhbHNlXG4gICAgfTsgLy8gPT09PT09PT09PT09PT09IEV4cGVuZCA9PT09PT09PT09PT09PT1cblxuICAgIF90aGlzLm9uRXhwYW5kQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0RWxsaXBzaXMgPSBfdGhpcy5nZXRFbGxpcHNpcygpLFxuICAgICAgICAgIG9uRXhwYW5kID0gX3RoaXMkZ2V0RWxsaXBzaXMub25FeHBhbmQ7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZXhwYW5kZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAob25FeHBhbmQpIHtcbiAgICAgICAgb25FeHBhbmQoKTtcbiAgICAgIH1cbiAgICB9OyAvLyA9PT09PT09PT09PT09PT09IEVkaXQgPT09PT09PT09PT09PT09PVxuXG5cbiAgICBfdGhpcy5vbkVkaXRDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnRyaWdnZXJFZGl0KHRydWUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkVkaXRDaGFuZ2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRFZGl0YWJsZSA9IF90aGlzLmdldEVkaXRhYmxlKCksXG4gICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRnZXRFZGl0YWJsZS5vbkNoYW5nZTtcblxuICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgIG9uQ2hhbmdlKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMudHJpZ2dlckVkaXQoZmFsc2UpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkVkaXRDYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy50cmlnZ2VyRWRpdChmYWxzZSk7XG4gICAgfTsgLy8gPT09PT09PT09PT09PT09PSBDb3B5ID09PT09PT09PT09PT09PT1cblxuXG4gICAgX3RoaXMub25Db3B5Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvcHlhYmxlID0gX3RoaXMkcHJvcHMuY29weWFibGU7XG5cbiAgICAgIHZhciBjb3B5Q29uZmlnID0gX2V4dGVuZHMoe30sIF90eXBlb2YoY29weWFibGUpID09PSAnb2JqZWN0JyA/IGNvcHlhYmxlIDogbnVsbCk7XG5cbiAgICAgIGlmIChjb3B5Q29uZmlnLnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb3B5Q29uZmlnLnRleHQgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICAoMCwgX2NvcHlUb0NsaXBib2FyZFtcImRlZmF1bHRcIl0pKGNvcHlDb25maWcudGV4dCB8fCAnJyk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY29waWVkOiB0cnVlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb3B5Q29uZmlnLm9uQ29weSkge1xuICAgICAgICAgIGNvcHlDb25maWcub25Db3B5KCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5jb3B5SWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29waWVkOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAzMDAwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRDb250ZW50UmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLmNvbnRlbnQgPSBub2RlO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRFZGl0UmVmID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLmVkaXRJY29uID0gbm9kZTtcbiAgICB9O1xuXG4gICAgX3RoaXMudHJpZ2dlckVkaXQgPSBmdW5jdGlvbiAoZWRpdCkge1xuICAgICAgdmFyIF90aGlzJGdldEVkaXRhYmxlMiA9IF90aGlzLmdldEVkaXRhYmxlKCksXG4gICAgICAgICAgb25TdGFydCA9IF90aGlzJGdldEVkaXRhYmxlMi5vblN0YXJ0O1xuXG4gICAgICBpZiAoZWRpdCAmJiBvblN0YXJ0KSB7XG4gICAgICAgIG9uU3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlZGl0OiBlZGl0XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZWRpdCAmJiBfdGhpcy5lZGl0SWNvbikge1xuICAgICAgICAgIF90aGlzLmVkaXRJY29uLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07IC8vID09PT09PT09PT09PT09IEVsbGlwc2lzID09PT09PT09PT09PT09XG5cblxuICAgIF90aGlzLnJlc2l6ZU9uTmV4dEZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3JhZltcImRlZmF1bHRcIl0uY2FuY2VsKF90aGlzLnJhZklkKTtcblxuICAgICAgX3RoaXMucmFmSWQgPSAoMCwgX3JhZltcImRlZmF1bHRcIl0pKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRG8gbm90IGJpbmQgYHN5bmNFbGxpcHNpc2AuIEl0IG5lZWQgZm9yIHRlc3QgdXNhZ2Ugb24gcHJvdG90eXBlXG4gICAgICAgIF90aGlzLnN5bmNFbGxpcHNpcygpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjbGllbnRSZW5kZXJlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLnJlc2l6ZU9uTmV4dEZyYW1lKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgdmFyIGVsbGlwc2lzID0gdGhpcy5nZXRFbGxpcHNpcygpO1xuICAgICAgdmFyIHByZXZFbGxpcHNpcyA9IHRoaXMuZ2V0RWxsaXBzaXMocHJldlByb3BzKTtcblxuICAgICAgaWYgKGNoaWxkcmVuICE9PSBwcmV2UHJvcHMuY2hpbGRyZW4gfHwgZWxsaXBzaXMucm93cyAhPT0gcHJldkVsbGlwc2lzLnJvd3MpIHtcbiAgICAgICAgdGhpcy5yZXNpemVPbk5leHRGcmFtZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5jb3B5SWQpO1xuXG4gICAgICBfcmFmW1wiZGVmYXVsdFwiXS5jYW5jZWwodGhpcy5yYWZJZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVkaXRhYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVkaXRhYmxlKHByb3BzKSB7XG4gICAgICB2YXIgZWRpdCA9IHRoaXMuc3RhdGUuZWRpdDtcblxuICAgICAgdmFyIF9yZWYyID0gcHJvcHMgfHwgdGhpcy5wcm9wcyxcbiAgICAgICAgICBlZGl0YWJsZSA9IF9yZWYyLmVkaXRhYmxlO1xuXG4gICAgICBpZiAoIWVkaXRhYmxlKSByZXR1cm4ge1xuICAgICAgICBlZGl0aW5nOiBlZGl0XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgZWRpdGluZzogZWRpdFxuICAgICAgfSwgX3R5cGVvZihlZGl0YWJsZSkgPT09ICdvYmplY3QnID8gZWRpdGFibGUgOiBudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RWxsaXBzaXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxsaXBzaXMocHJvcHMpIHtcbiAgICAgIHZhciBfcmVmMyA9IHByb3BzIHx8IHRoaXMucHJvcHMsXG4gICAgICAgICAgZWxsaXBzaXMgPSBfcmVmMy5lbGxpcHNpcztcblxuICAgICAgaWYgKCFlbGxpcHNpcykgcmV0dXJuIHt9O1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgcm93czogMSxcbiAgICAgICAgZXhwYW5kYWJsZTogZmFsc2VcbiAgICAgIH0sIF90eXBlb2YoZWxsaXBzaXMpID09PSAnb2JqZWN0JyA/IGVsbGlwc2lzIDogbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhblVzZUNTU0VsbGlwc2lzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhblVzZUNTU0VsbGlwc2lzKCkge1xuICAgICAgdmFyIGNsaWVudFJlbmRlcmVkID0gdGhpcy5zdGF0ZS5jbGllbnRSZW5kZXJlZDtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGVkaXRhYmxlID0gX3RoaXMkcHJvcHMyLmVkaXRhYmxlLFxuICAgICAgICAgIGNvcHlhYmxlID0gX3RoaXMkcHJvcHMyLmNvcHlhYmxlO1xuXG4gICAgICB2YXIgX3RoaXMkZ2V0RWxsaXBzaXMyID0gdGhpcy5nZXRFbGxpcHNpcygpLFxuICAgICAgICAgIHJvd3MgPSBfdGhpcyRnZXRFbGxpcHNpczIucm93cyxcbiAgICAgICAgICBleHBhbmRhYmxlID0gX3RoaXMkZ2V0RWxsaXBzaXMyLmV4cGFuZGFibGU7IC8vIENhbid0IHVzZSBjc3MgZWxsaXBzaXMgc2luY2Ugd2UgbmVlZCB0byBwcm92aWRlIHRoZSBwbGFjZSBmb3IgYnV0dG9uXG5cblxuICAgICAgaWYgKGVkaXRhYmxlIHx8IGNvcHlhYmxlIHx8IGV4cGFuZGFibGUgfHwgIWNsaWVudFJlbmRlcmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvd3MgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGlzVGV4dE92ZXJmbG93U3VwcG9ydDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzTGluZUNsYW1wU3VwcG9ydDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3luY0VsbGlwc2lzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNFbGxpcHNpcygpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZWxsaXBzaXNUZXh0ID0gX3RoaXMkc3RhdGUuZWxsaXBzaXNUZXh0LFxuICAgICAgICAgIGlzRWxsaXBzaXMgPSBfdGhpcyRzdGF0ZS5pc0VsbGlwc2lzLFxuICAgICAgICAgIGV4cGFuZGVkID0gX3RoaXMkc3RhdGUuZXhwYW5kZWQ7XG5cbiAgICAgIHZhciBfdGhpcyRnZXRFbGxpcHNpczMgPSB0aGlzLmdldEVsbGlwc2lzKCksXG4gICAgICAgICAgcm93cyA9IF90aGlzJGdldEVsbGlwc2lzMy5yb3dzO1xuXG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKCFyb3dzIHx8IHJvd3MgPCAwIHx8ICF0aGlzLmNvbnRlbnQgfHwgZXhwYW5kZWQpIHJldHVybjsgLy8gRG8gbm90IG1lYXN1cmUgaWYgY3NzIGFscmVhZHkgc3VwcG9ydCBlbGxpcHNpc1xuXG4gICAgICBpZiAodGhpcy5jYW5Vc2VDU1NFbGxpcHNpcygpKSByZXR1cm47XG4gICAgICAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKSgoMCwgX3RvQXJyYXlbXCJkZWZhdWx0XCJdKShjaGlsZHJlbikuZXZlcnkoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnO1xuICAgICAgfSksICdUeXBvZ3JhcGh5JywgJ2BlbGxpcHNpc2Agc2hvdWxkIHVzZSBzdHJpbmcgYXMgY2hpbGRyZW4gb25seS4nKTtcblxuICAgICAgdmFyIF9tZWFzdXJlID0gKDAsIF91dGlsW1wiZGVmYXVsdFwiXSkoKDAsIF9maW5kRE9NTm9kZVtcImRlZmF1bHRcIl0pKHRoaXMuY29udGVudCksIHJvd3MsIGNoaWxkcmVuLCB0aGlzLnJlbmRlck9wZXJhdGlvbnModHJ1ZSksIEVMTElQU0lTX1NUUiksXG4gICAgICAgICAgY29udGVudCA9IF9tZWFzdXJlLmNvbnRlbnQsXG4gICAgICAgICAgdGV4dCA9IF9tZWFzdXJlLnRleHQsXG4gICAgICAgICAgZWxsaXBzaXMgPSBfbWVhc3VyZS5lbGxpcHNpcztcblxuICAgICAgaWYgKGVsbGlwc2lzVGV4dCAhPT0gdGV4dCB8fCBpc0VsbGlwc2lzICE9PSBlbGxpcHNpcykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBlbGxpcHNpc1RleHQ6IHRleHQsXG4gICAgICAgICAgZWxsaXBzaXNDb250ZW50OiBjb250ZW50LFxuICAgICAgICAgIGlzRWxsaXBzaXM6IGVsbGlwc2lzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJFeHBhbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRXhwYW5kKGZvcmNlUmVuZGVyKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0RWxsaXBzaXM0ID0gdGhpcy5nZXRFbGxpcHNpcygpLFxuICAgICAgICAgIGV4cGFuZGFibGUgPSBfdGhpcyRnZXRFbGxpcHNpczQuZXhwYW5kYWJsZTtcblxuICAgICAgdmFyIHByZWZpeENscyA9IHRoaXMucHJvcHMucHJlZml4Q2xzO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZXhwYW5kZWQgPSBfdGhpcyRzdGF0ZTIuZXhwYW5kZWQsXG4gICAgICAgICAgaXNFbGxpcHNpcyA9IF90aGlzJHN0YXRlMi5pc0VsbGlwc2lzO1xuICAgICAgaWYgKCFleHBhbmRhYmxlKSByZXR1cm4gbnVsbDsgLy8gZm9yY2UgcmVuZGVyIGV4cGFuZCBpY29uIGZvciBtZWFzdXJlIHVzYWdlIG9yIGl0IHdpbGwgY2F1c2UgZGVhZCBsb29wXG5cbiAgICAgIGlmICghZm9yY2VSZW5kZXIgJiYgKGV4cGFuZGVkIHx8ICFpc0VsbGlwc2lzKSkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAga2V5OiBcImV4cGFuZFwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZXhwYW5kXCIpLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uRXhwYW5kQ2xpY2ssXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmV4cGFuZFN0clxuICAgICAgfSwgdGhpcy5leHBhbmRTdHIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJFZGl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckVkaXQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBlZGl0YWJsZSA9IF90aGlzJHByb3BzMy5lZGl0YWJsZSxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczMucHJlZml4Q2xzO1xuICAgICAgaWYgKCFlZGl0YWJsZSkgcmV0dXJuO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF90b29sdGlwW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBrZXk6IFwiZWRpdFwiLFxuICAgICAgICB0aXRsZTogdGhpcy5lZGl0U3RyXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfdHJhbnNCdXR0b25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRFZGl0UmVmLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZWRpdFwiKSxcbiAgICAgICAgb25DbGljazogdGhpcy5vbkVkaXRDbGljayxcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMuZWRpdFN0clxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIHR5cGU6IFwiZWRpdFwiXG4gICAgICB9KSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJDb3B5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNvcHkoKSB7XG4gICAgICB2YXIgY29waWVkID0gdGhpcy5zdGF0ZS5jb3BpZWQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb3B5YWJsZSA9IF90aGlzJHByb3BzNC5jb3B5YWJsZSxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczQucHJlZml4Q2xzO1xuICAgICAgaWYgKCFjb3B5YWJsZSkgcmV0dXJuO1xuICAgICAgdmFyIHRpdGxlID0gY29waWVkID8gdGhpcy5jb3BpZWRTdHIgOiB0aGlzLmNvcHlTdHI7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3Rvb2x0aXBbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGtleTogXCJjb3B5XCIsXG4gICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3RyYW5zQnV0dG9uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29weVwiKSwgY29waWVkICYmIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29weS1zdWNjZXNzXCIpKSxcbiAgICAgICAgb25DbGljazogdGhpcy5vbkNvcHlDbGljayxcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHRpdGxlXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfaWNvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgcm9sZTogXCJidXR0b25cIixcbiAgICAgICAgdHlwZTogY29waWVkID8gJ2NoZWNrJyA6ICdjb3B5J1xuICAgICAgfSkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyRWRpdElucHV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckVkaXRJbnB1dCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM1LmNoaWxkcmVuLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzNS5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM1LmNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzNS5zdHlsZTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfRWRpdGFibGVbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHZhbHVlOiB0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnID8gY2hpbGRyZW4gOiAnJyxcbiAgICAgICAgb25TYXZlOiB0aGlzLm9uRWRpdENoYW5nZSxcbiAgICAgICAgb25DYW5jZWw6IHRoaXMub25FZGl0Q2FuY2VsLFxuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlck9wZXJhdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyT3BlcmF0aW9ucyhmb3JjZVJlbmRlckV4cGFuZGVkKSB7XG4gICAgICByZXR1cm4gW3RoaXMucmVuZGVyRXhwYW5kKGZvcmNlUmVuZGVyRXhwYW5kZWQpLCB0aGlzLnJlbmRlckVkaXQoKSwgdGhpcy5yZW5kZXJDb3B5KCldLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJDb250ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHN0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZWxsaXBzaXNDb250ZW50ID0gX3RoaXMkc3RhdGUzLmVsbGlwc2lzQ29udGVudCxcbiAgICAgICAgICBpc0VsbGlwc2lzID0gX3RoaXMkc3RhdGUzLmlzRWxsaXBzaXMsXG4gICAgICAgICAgZXhwYW5kZWQgPSBfdGhpcyRzdGF0ZTMuZXhwYW5kZWQ7XG5cbiAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29tcG9uZW50ID0gX2EuY29tcG9uZW50LFxuICAgICAgICAgIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLFxuICAgICAgICAgIHByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICB0eXBlID0gX2EudHlwZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9hLmRpc2FibGVkLFxuICAgICAgICAgIHN0eWxlID0gX2Euc3R5bGUsXG4gICAgICAgICAgcmVzdFByb3BzID0gX19yZXN0KF9hLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcInByZWZpeENsc1wiLCBcInR5cGVcIiwgXCJkaXNhYmxlZFwiLCBcInN0eWxlXCJdKTtcblxuICAgICAgdmFyIF90aGlzJGdldEVsbGlwc2lzNSA9IHRoaXMuZ2V0RWxsaXBzaXMoKSxcbiAgICAgICAgICByb3dzID0gX3RoaXMkZ2V0RWxsaXBzaXM1LnJvd3M7XG5cbiAgICAgIHZhciB0ZXh0UHJvcHMgPSAoMCwgX29taXRbXCJkZWZhdWx0XCJdKShyZXN0UHJvcHMsIFsncHJlZml4Q2xzJywgJ2VkaXRhYmxlJywgJ2NvcHlhYmxlJywgJ2VsbGlwc2lzJywgJ21hcmsnLCAndW5kZXJsaW5lJywgJ21hcmsnLCAnY29kZScsICdkZWxldGUnLCAndW5kZXJsaW5lJywgJ3N0cm9uZyddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX2NvbmZpZ1Byb3ZpZGVyLmNvbmZpZ0NvbnN1bWVyUHJvcHMpKSk7XG4gICAgICB2YXIgY3NzRWxsaXBzaXMgPSB0aGlzLmNhblVzZUNTU0VsbGlwc2lzKCk7XG4gICAgICB2YXIgY3NzVGV4dE92ZXJmbG93ID0gcm93cyA9PT0gMSAmJiBjc3NFbGxpcHNpcztcbiAgICAgIHZhciBjc3NMaW5lQ2xhbXAgPSByb3dzICYmIHJvd3MgPiAxICYmIGNzc0VsbGlwc2lzO1xuICAgICAgdmFyIHRleHROb2RlID0gY2hpbGRyZW47XG4gICAgICB2YXIgYXJpYUxhYmVsID0gbnVsbDsgLy8gT25seSB1c2UganMgZWxsaXBzaXMgd2hlbiBjc3MgZWxsaXBzaXMgbm90IHN1cHBvcnRcblxuICAgICAgaWYgKHJvd3MgJiYgaXNFbGxpcHNpcyAmJiAhZXhwYW5kZWQgJiYgIWNzc0VsbGlwc2lzKSB7XG4gICAgICAgIGFyaWFMYWJlbCA9IFN0cmluZyhjaGlsZHJlbik7IC8vIFdlIG1vdmUgZnVsbCBjb250ZW50IHRvIG91dGVyIGVsZW1lbnQgdG8gYXZvaWQgcmVwZWF0IHJlYWQgdGhlIGNvbnRlbnQgYnkgYWNjZXNzaWJpbGl0eVxuXG4gICAgICAgIHRleHROb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICB0aXRsZTogU3RyaW5nKGNoaWxkcmVuKSxcbiAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gICAgICAgIH0sIGVsbGlwc2lzQ29udGVudCwgRUxMSVBTSVNfU1RSKTtcbiAgICAgIH1cblxuICAgICAgdGV4dE5vZGUgPSB3cmFwcGVyRGVjb3JhdGlvbnModGhpcy5wcm9wcywgdGV4dE5vZGUpO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9Mb2NhbGVSZWNlaXZlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogXCJUZXh0XCJcbiAgICAgIH0sIGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgICAgdmFyIGVkaXQgPSBfcmVmNC5lZGl0LFxuICAgICAgICAgICAgY29weVN0ciA9IF9yZWY0LmNvcHksXG4gICAgICAgICAgICBjb3BpZWQgPSBfcmVmNC5jb3BpZWQsXG4gICAgICAgICAgICBleHBhbmQgPSBfcmVmNC5leHBhbmQ7XG4gICAgICAgIF90aGlzMi5lZGl0U3RyID0gZWRpdDtcbiAgICAgICAgX3RoaXMyLmNvcHlTdHIgPSBjb3B5U3RyO1xuICAgICAgICBfdGhpczIuY29waWVkU3RyID0gY29waWVkO1xuICAgICAgICBfdGhpczIuZXhwYW5kU3RyID0gZXhwYW5kO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjUmVzaXplT2JzZXJ2ZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAgb25SZXNpemU6IF90aGlzMi5yZXNpemVPbk5leHRGcmFtZSxcbiAgICAgICAgICBkaXNhYmxlZDogIXJvd3NcbiAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX1R5cG9ncmFwaHlbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShjbGFzc05hbWUsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdCh0eXBlKSwgdHlwZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1kaXNhYmxlZFwiKSwgZGlzYWJsZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZWxsaXBzaXNcIiksIHJvd3MpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZWxsaXBzaXMtc2luZ2xlLWxpbmVcIiksIGNzc1RleHRPdmVyZmxvdyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1lbGxpcHNpcy1tdWx0aXBsZS1saW5lXCIpLCBjc3NMaW5lQ2xhbXApLCBfY2xhc3NOYW1lcykpLFxuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc3R5bGUpLCB7XG4gICAgICAgICAgICBXZWJraXRMaW5lQ2xhbXA6IGNzc0xpbmVDbGFtcCA/IHJvd3MgOiBudWxsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgICAgICAgcmVmOiBfdGhpczIuc2V0Q29udGVudFJlZixcbiAgICAgICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsXG4gICAgICAgIH0sIHRleHRQcm9wcyksIHRleHROb2RlLCBfdGhpczIucmVuZGVyT3BlcmF0aW9ucygpKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRnZXRFZGl0YWJsZTMgPSB0aGlzLmdldEVkaXRhYmxlKCksXG4gICAgICAgICAgZWRpdGluZyA9IF90aGlzJGdldEVkaXRhYmxlMy5lZGl0aW5nO1xuXG4gICAgICBpZiAoZWRpdGluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJFZGl0SW5wdXQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQ29udGVudCgpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZWRpdGFibGUgPSBuZXh0UHJvcHMuZWRpdGFibGU7XG4gICAgICAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKSghZWRpdGFibGUgfHwgdHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJywgJ1R5cG9ncmFwaHknLCAnV2hlbiBgZWRpdGFibGVgIGlzIGVuYWJsZWQsIHRoZSBgY2hpbGRyZW5gIHNob3VsZCB1c2Ugc3RyaW5nLicpO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYXNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CYXNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46ICcnXG59O1xuKDAsIF9yZWFjdExpZmVjeWNsZXNDb21wYXQucG9seWZpbGwpKEJhc2UpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NvbnRleHQud2l0aENvbmZpZ0NvbnN1bWVyKSh7XG4gIHByZWZpeENsczogJ3R5cG9ncmFwaHknXG59KShCYXNlKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhcm5pbmdcIikpO1xuXG52YXIgX3JlZjIgPSByZXF1aXJlKFwiLi4vX3V0aWwvcmVmXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBUeXBvZ3JhcGh5ID0gZnVuY3Rpb24gVHlwb2dyYXBoeShfYSwgcmVmKSB7XG4gIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBfYS5wcmVmaXhDbHMsXG4gICAgICBfYSRjb21wb25lbnQgPSBfYS5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfYSRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdhcnRpY2xlJyA6IF9hJGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICAgIGFyaWFMYWJlbCA9IF9hWydhcmlhLWxhYmVsJ10sXG4gICAgICBzZXRDb250ZW50UmVmID0gX2Euc2V0Q29udGVudFJlZixcbiAgICAgIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sXG4gICAgICByZXN0UHJvcHMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcImNvbXBvbmVudFwiLCBcImNsYXNzTmFtZVwiLCAnYXJpYS1sYWJlbCcsIFwic2V0Q29udGVudFJlZlwiLCBcImNoaWxkcmVuXCJdKTtcblxuICB2YXIgbWVyZ2VkUmVmID0gcmVmO1xuXG4gIGlmIChzZXRDb250ZW50UmVmKSB7XG4gICAgKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoZmFsc2UsICdUeXBvZ3JhcGh5JywgJ2BzZXRDb250ZW50UmVmYCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGByZWZgIGluc3RlYWQuJyk7XG4gICAgbWVyZ2VkUmVmID0gKDAsIF9yZWYyLmNvbXBvc2VSZWYpKHJlZiwgc2V0Q29udGVudFJlZik7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscztcbiAgICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3R5cG9ncmFwaHknLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocHJlZml4Q2xzLCBjbGFzc05hbWUpLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICAgIHJlZjogbWVyZ2VkUmVmXG4gICAgfSwgcmVzdFByb3BzKSwgY2hpbGRyZW4pO1xuICB9KTtcbn07XG5cbnZhciBSZWZUeXBvZ3JhcGh5O1xuXG5pZiAoUmVhY3QuZm9yd2FyZFJlZikge1xuICBSZWZUeXBvZ3JhcGh5ID0gUmVhY3QuZm9yd2FyZFJlZihUeXBvZ3JhcGh5KTtcbiAgUmVmVHlwb2dyYXBoeS5kaXNwbGF5TmFtZSA9ICdUeXBvZ3JhcGh5Jztcbn0gZWxzZSB7XG4gIHZhciBUeXBvZ3JhcGh5V3JhcHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhUeXBvZ3JhcGh5V3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFR5cG9ncmFwaHlXcmFwcGVyKTtcblxuICAgIGZ1bmN0aW9uIFR5cG9ncmFwaHlXcmFwcGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHlwb2dyYXBoeVdyYXBwZXIpO1xuXG4gICAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVHlwb2dyYXBoeVdyYXBwZXIsIFt7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgdGhpcy5wcm9wcyk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFR5cG9ncmFwaHlXcmFwcGVyO1xuICB9KFJlYWN0LkNvbXBvbmVudCk7XG5cbiAgUmVmVHlwb2dyYXBoeSA9IFR5cG9ncmFwaHlXcmFwcGVyO1xufSAvLyBlcyBkZWZhdWx0IGV4cG9ydCBzaG91bGQgdXNlIGNvbnN0IGluc3RlYWQgb2YgbGV0XG5cblxudmFyIEV4cG9ydFR5cG9ncmFwaHkgPSBSZWZUeXBvZ3JhcGh5O1xudmFyIF9kZWZhdWx0ID0gRXhwb3J0VHlwb2dyYXBoeTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qKlxuICogQGlnbm9yZVxuICogc29tZSBrZXktY29kZXMgZGVmaW5pdGlvbiBhbmQgdXRpbHMgZnJvbSBjbG9zdXJlLWxpYnJhcnlcbiAqIEBhdXRob3IgeWltaW5naGVAZ21haWwuY29tXG4gKi9cbnZhciBLZXlDb2RlID0ge1xuICAvKipcbiAgICogTUFDX0VOVEVSXG4gICAqL1xuICBNQUNfRU5URVI6IDMsXG5cbiAgLyoqXG4gICAqIEJBQ0tTUEFDRVxuICAgKi9cbiAgQkFDS1NQQUNFOiA4LFxuXG4gIC8qKlxuICAgKiBUQUJcbiAgICovXG4gIFRBQjogOSxcblxuICAvKipcbiAgICogTlVNTE9DSyBvbiBGRi9TYWZhcmkgTWFjXG4gICAqL1xuICBOVU1fQ0VOVEVSOiAxMixcblxuICAvKipcbiAgICogRU5URVJcbiAgICovXG4gIEVOVEVSOiAxMyxcblxuICAvKipcbiAgICogU0hJRlRcbiAgICovXG4gIFNISUZUOiAxNixcblxuICAvKipcbiAgICogQ1RSTFxuICAgKi9cbiAgQ1RSTDogMTcsXG5cbiAgLyoqXG4gICAqIEFMVFxuICAgKi9cbiAgQUxUOiAxOCxcblxuICAvKipcbiAgICogUEFVU0VcbiAgICovXG4gIFBBVVNFOiAxOSxcblxuICAvKipcbiAgICogQ0FQU19MT0NLXG4gICAqL1xuICBDQVBTX0xPQ0s6IDIwLFxuXG4gIC8qKlxuICAgKiBFU0NcbiAgICovXG4gIEVTQzogMjcsXG5cbiAgLyoqXG4gICAqIFNQQUNFXG4gICAqL1xuICBTUEFDRTogMzIsXG5cbiAgLyoqXG4gICAqIFBBR0VfVVBcbiAgICovXG4gIFBBR0VfVVA6IDMzLFxuXG4gIC8qKlxuICAgKiBQQUdFX0RPV05cbiAgICovXG4gIFBBR0VfRE9XTjogMzQsXG5cbiAgLyoqXG4gICAqIEVORFxuICAgKi9cbiAgRU5EOiAzNSxcblxuICAvKipcbiAgICogSE9NRVxuICAgKi9cbiAgSE9NRTogMzYsXG5cbiAgLyoqXG4gICAqIExFRlRcbiAgICovXG4gIExFRlQ6IDM3LFxuXG4gIC8qKlxuICAgKiBVUFxuICAgKi9cbiAgVVA6IDM4LFxuXG4gIC8qKlxuICAgKiBSSUdIVFxuICAgKi9cbiAgUklHSFQ6IDM5LFxuXG4gIC8qKlxuICAgKiBET1dOXG4gICAqL1xuICBET1dOOiA0MCxcblxuICAvKipcbiAgICogUFJJTlRfU0NSRUVOXG4gICAqL1xuICBQUklOVF9TQ1JFRU46IDQ0LFxuXG4gIC8qKlxuICAgKiBJTlNFUlRcbiAgICovXG4gIElOU0VSVDogNDUsXG5cbiAgLyoqXG4gICAqIERFTEVURVxuICAgKi9cbiAgREVMRVRFOiA0NixcblxuICAvKipcbiAgICogWkVST1xuICAgKi9cbiAgWkVSTzogNDgsXG5cbiAgLyoqXG4gICAqIE9ORVxuICAgKi9cbiAgT05FOiA0OSxcblxuICAvKipcbiAgICogVFdPXG4gICAqL1xuICBUV086IDUwLFxuXG4gIC8qKlxuICAgKiBUSFJFRVxuICAgKi9cbiAgVEhSRUU6IDUxLFxuXG4gIC8qKlxuICAgKiBGT1VSXG4gICAqL1xuICBGT1VSOiA1MixcblxuICAvKipcbiAgICogRklWRVxuICAgKi9cbiAgRklWRTogNTMsXG5cbiAgLyoqXG4gICAqIFNJWFxuICAgKi9cbiAgU0lYOiA1NCxcblxuICAvKipcbiAgICogU0VWRU5cbiAgICovXG4gIFNFVkVOOiA1NSxcblxuICAvKipcbiAgICogRUlHSFRcbiAgICovXG4gIEVJR0hUOiA1NixcblxuICAvKipcbiAgICogTklORVxuICAgKi9cbiAgTklORTogNTcsXG5cbiAgLyoqXG4gICAqIFFVRVNUSU9OX01BUktcbiAgICovXG4gIFFVRVNUSU9OX01BUks6IDYzLFxuXG4gIC8qKlxuICAgKiBBXG4gICAqL1xuICBBOiA2NSxcblxuICAvKipcbiAgICogQlxuICAgKi9cbiAgQjogNjYsXG5cbiAgLyoqXG4gICAqIENcbiAgICovXG4gIEM6IDY3LFxuXG4gIC8qKlxuICAgKiBEXG4gICAqL1xuICBEOiA2OCxcblxuICAvKipcbiAgICogRVxuICAgKi9cbiAgRTogNjksXG5cbiAgLyoqXG4gICAqIEZcbiAgICovXG4gIEY6IDcwLFxuXG4gIC8qKlxuICAgKiBHXG4gICAqL1xuICBHOiA3MSxcblxuICAvKipcbiAgICogSFxuICAgKi9cbiAgSDogNzIsXG5cbiAgLyoqXG4gICAqIElcbiAgICovXG4gIEk6IDczLFxuXG4gIC8qKlxuICAgKiBKXG4gICAqL1xuICBKOiA3NCxcblxuICAvKipcbiAgICogS1xuICAgKi9cbiAgSzogNzUsXG5cbiAgLyoqXG4gICAqIExcbiAgICovXG4gIEw6IDc2LFxuXG4gIC8qKlxuICAgKiBNXG4gICAqL1xuICBNOiA3NyxcblxuICAvKipcbiAgICogTlxuICAgKi9cbiAgTjogNzgsXG5cbiAgLyoqXG4gICAqIE9cbiAgICovXG4gIE86IDc5LFxuXG4gIC8qKlxuICAgKiBQXG4gICAqL1xuICBQOiA4MCxcblxuICAvKipcbiAgICogUVxuICAgKi9cbiAgUTogODEsXG5cbiAgLyoqXG4gICAqIFJcbiAgICovXG4gIFI6IDgyLFxuXG4gIC8qKlxuICAgKiBTXG4gICAqL1xuICBTOiA4MyxcblxuICAvKipcbiAgICogVFxuICAgKi9cbiAgVDogODQsXG5cbiAgLyoqXG4gICAqIFVcbiAgICovXG4gIFU6IDg1LFxuXG4gIC8qKlxuICAgKiBWXG4gICAqL1xuICBWOiA4NixcblxuICAvKipcbiAgICogV1xuICAgKi9cbiAgVzogODcsXG5cbiAgLyoqXG4gICAqIFhcbiAgICovXG4gIFg6IDg4LFxuXG4gIC8qKlxuICAgKiBZXG4gICAqL1xuICBZOiA4OSxcblxuICAvKipcbiAgICogWlxuICAgKi9cbiAgWjogOTAsXG5cbiAgLyoqXG4gICAqIE1FVEFcbiAgICovXG4gIE1FVEE6IDkxLFxuXG4gIC8qKlxuICAgKiBXSU5fS0VZX1JJR0hUXG4gICAqL1xuICBXSU5fS0VZX1JJR0hUOiA5MixcblxuICAvKipcbiAgICogQ09OVEVYVF9NRU5VXG4gICAqL1xuICBDT05URVhUX01FTlU6IDkzLFxuXG4gIC8qKlxuICAgKiBOVU1fWkVST1xuICAgKi9cbiAgTlVNX1pFUk86IDk2LFxuXG4gIC8qKlxuICAgKiBOVU1fT05FXG4gICAqL1xuICBOVU1fT05FOiA5NyxcblxuICAvKipcbiAgICogTlVNX1RXT1xuICAgKi9cbiAgTlVNX1RXTzogOTgsXG5cbiAgLyoqXG4gICAqIE5VTV9USFJFRVxuICAgKi9cbiAgTlVNX1RIUkVFOiA5OSxcblxuICAvKipcbiAgICogTlVNX0ZPVVJcbiAgICovXG4gIE5VTV9GT1VSOiAxMDAsXG5cbiAgLyoqXG4gICAqIE5VTV9GSVZFXG4gICAqL1xuICBOVU1fRklWRTogMTAxLFxuXG4gIC8qKlxuICAgKiBOVU1fU0lYXG4gICAqL1xuICBOVU1fU0lYOiAxMDIsXG5cbiAgLyoqXG4gICAqIE5VTV9TRVZFTlxuICAgKi9cbiAgTlVNX1NFVkVOOiAxMDMsXG5cbiAgLyoqXG4gICAqIE5VTV9FSUdIVFxuICAgKi9cbiAgTlVNX0VJR0hUOiAxMDQsXG5cbiAgLyoqXG4gICAqIE5VTV9OSU5FXG4gICAqL1xuICBOVU1fTklORTogMTA1LFxuXG4gIC8qKlxuICAgKiBOVU1fTVVMVElQTFlcbiAgICovXG4gIE5VTV9NVUxUSVBMWTogMTA2LFxuXG4gIC8qKlxuICAgKiBOVU1fUExVU1xuICAgKi9cbiAgTlVNX1BMVVM6IDEwNyxcblxuICAvKipcbiAgICogTlVNX01JTlVTXG4gICAqL1xuICBOVU1fTUlOVVM6IDEwOSxcblxuICAvKipcbiAgICogTlVNX1BFUklPRFxuICAgKi9cbiAgTlVNX1BFUklPRDogMTEwLFxuXG4gIC8qKlxuICAgKiBOVU1fRElWSVNJT05cbiAgICovXG4gIE5VTV9ESVZJU0lPTjogMTExLFxuXG4gIC8qKlxuICAgKiBGMVxuICAgKi9cbiAgRjE6IDExMixcblxuICAvKipcbiAgICogRjJcbiAgICovXG4gIEYyOiAxMTMsXG5cbiAgLyoqXG4gICAqIEYzXG4gICAqL1xuICBGMzogMTE0LFxuXG4gIC8qKlxuICAgKiBGNFxuICAgKi9cbiAgRjQ6IDExNSxcblxuICAvKipcbiAgICogRjVcbiAgICovXG4gIEY1OiAxMTYsXG5cbiAgLyoqXG4gICAqIEY2XG4gICAqL1xuICBGNjogMTE3LFxuXG4gIC8qKlxuICAgKiBGN1xuICAgKi9cbiAgRjc6IDExOCxcblxuICAvKipcbiAgICogRjhcbiAgICovXG4gIEY4OiAxMTksXG5cbiAgLyoqXG4gICAqIEY5XG4gICAqL1xuICBGOTogMTIwLFxuXG4gIC8qKlxuICAgKiBGMTBcbiAgICovXG4gIEYxMDogMTIxLFxuXG4gIC8qKlxuICAgKiBGMTFcbiAgICovXG4gIEYxMTogMTIyLFxuXG4gIC8qKlxuICAgKiBGMTJcbiAgICovXG4gIEYxMjogMTIzLFxuXG4gIC8qKlxuICAgKiBOVU1MT0NLXG4gICAqL1xuICBOVU1MT0NLOiAxNDQsXG5cbiAgLyoqXG4gICAqIFNFTUlDT0xPTlxuICAgKi9cbiAgU0VNSUNPTE9OOiAxODYsXG5cbiAgLyoqXG4gICAqIERBU0hcbiAgICovXG4gIERBU0g6IDE4OSxcblxuICAvKipcbiAgICogRVFVQUxTXG4gICAqL1xuICBFUVVBTFM6IDE4NyxcblxuICAvKipcbiAgICogQ09NTUFcbiAgICovXG4gIENPTU1BOiAxODgsXG5cbiAgLyoqXG4gICAqIFBFUklPRFxuICAgKi9cbiAgUEVSSU9EOiAxOTAsXG5cbiAgLyoqXG4gICAqIFNMQVNIXG4gICAqL1xuICBTTEFTSDogMTkxLFxuXG4gIC8qKlxuICAgKiBBUE9TVFJPUEhFXG4gICAqL1xuICBBUE9TVFJPUEhFOiAxOTIsXG5cbiAgLyoqXG4gICAqIFNJTkdMRV9RVU9URVxuICAgKi9cbiAgU0lOR0xFX1FVT1RFOiAyMjIsXG5cbiAgLyoqXG4gICAqIE9QRU5fU1FVQVJFX0JSQUNLRVRcbiAgICovXG4gIE9QRU5fU1FVQVJFX0JSQUNLRVQ6IDIxOSxcblxuICAvKipcbiAgICogQkFDS1NMQVNIXG4gICAqL1xuICBCQUNLU0xBU0g6IDIyMCxcblxuICAvKipcbiAgICogQ0xPU0VfU1FVQVJFX0JSQUNLRVRcbiAgICovXG4gIENMT1NFX1NRVUFSRV9CUkFDS0VUOiAyMjEsXG5cbiAgLyoqXG4gICAqIFdJTl9LRVlcbiAgICovXG4gIFdJTl9LRVk6IDIyNCxcblxuICAvKipcbiAgICogTUFDX0ZGX01FVEFcbiAgICovXG4gIE1BQ19GRl9NRVRBOiAyMjQsXG5cbiAgLyoqXG4gICAqIFdJTl9JTUVcbiAgICovXG4gIFdJTl9JTUU6IDIyOSxcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09IEZ1bmN0aW9uID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8qKlxuICAgKiB3aGV0aGVyIHRleHQgYW5kIG1vZGlmaWVkIGtleSBpcyBlbnRlcmVkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqL1xuICBpc1RleHRNb2RpZnlpbmdLZXlFdmVudDogZnVuY3Rpb24gaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQoZSkge1xuICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlO1xuXG4gICAgaWYgKGUuYWx0S2V5ICYmICFlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IC8vIEZ1bmN0aW9uIGtleXMgZG9uJ3QgZ2VuZXJhdGUgdGV4dFxuICAgIGtleUNvZGUgPj0gS2V5Q29kZS5GMSAmJiBrZXlDb2RlIDw9IEtleUNvZGUuRjEyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBUaGUgZm9sbG93aW5nIGtleXMgYXJlIHF1aXRlIGhhcm1sZXNzLCBldmVuIGluIGNvbWJpbmF0aW9uIHdpdGhcbiAgICAvLyBDVFJMLCBBTFQgb3IgU0hJRlQuXG5cblxuICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgY2FzZSBLZXlDb2RlLkFMVDpcbiAgICAgIGNhc2UgS2V5Q29kZS5DQVBTX0xPQ0s6XG4gICAgICBjYXNlIEtleUNvZGUuQ09OVEVYVF9NRU5VOlxuICAgICAgY2FzZSBLZXlDb2RlLkNUUkw6XG4gICAgICBjYXNlIEtleUNvZGUuRE9XTjpcbiAgICAgIGNhc2UgS2V5Q29kZS5FTkQ6XG4gICAgICBjYXNlIEtleUNvZGUuRVNDOlxuICAgICAgY2FzZSBLZXlDb2RlLkhPTUU6XG4gICAgICBjYXNlIEtleUNvZGUuSU5TRVJUOlxuICAgICAgY2FzZSBLZXlDb2RlLkxFRlQ6XG4gICAgICBjYXNlIEtleUNvZGUuTUFDX0ZGX01FVEE6XG4gICAgICBjYXNlIEtleUNvZGUuTUVUQTpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1MT0NLOlxuICAgICAgY2FzZSBLZXlDb2RlLk5VTV9DRU5URVI6XG4gICAgICBjYXNlIEtleUNvZGUuUEFHRV9ET1dOOlxuICAgICAgY2FzZSBLZXlDb2RlLlBBR0VfVVA6XG4gICAgICBjYXNlIEtleUNvZGUuUEFVU0U6XG4gICAgICBjYXNlIEtleUNvZGUuUFJJTlRfU0NSRUVOOlxuICAgICAgY2FzZSBLZXlDb2RlLlJJR0hUOlxuICAgICAgY2FzZSBLZXlDb2RlLlNISUZUOlxuICAgICAgY2FzZSBLZXlDb2RlLlVQOlxuICAgICAgY2FzZSBLZXlDb2RlLldJTl9LRVk6XG4gICAgICBjYXNlIEtleUNvZGUuV0lOX0tFWV9SSUdIVDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIHdoZXRoZXIgY2hhcmFjdGVyIGlzIGVudGVyZWQuXG4gICAqL1xuICBpc0NoYXJhY3RlcktleTogZnVuY3Rpb24gaXNDaGFyYWN0ZXJLZXkoa2V5Q29kZSkge1xuICAgIGlmIChrZXlDb2RlID49IEtleUNvZGUuWkVSTyAmJiBrZXlDb2RlIDw9IEtleUNvZGUuTklORSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5OVU1fWkVSTyAmJiBrZXlDb2RlIDw9IEtleUNvZGUuTlVNX01VTFRJUExZKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5Q29kZSA+PSBLZXlDb2RlLkEgJiYga2V5Q29kZSA8PSBLZXlDb2RlLlopIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gU2FmYXJpIHNlbmRzIHplcm8ga2V5IGNvZGUgZm9yIG5vbi1sYXRpbiBjaGFyYWN0ZXJzLlxuXG5cbiAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignV2ViS2l0JykgIT09IC0xICYmIGtleUNvZGUgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgY2FzZSBLZXlDb2RlLlNQQUNFOlxuICAgICAgY2FzZSBLZXlDb2RlLlFVRVNUSU9OX01BUks6XG4gICAgICBjYXNlIEtleUNvZGUuTlVNX1BMVVM6XG4gICAgICBjYXNlIEtleUNvZGUuTlVNX01JTlVTOlxuICAgICAgY2FzZSBLZXlDb2RlLk5VTV9QRVJJT0Q6XG4gICAgICBjYXNlIEtleUNvZGUuTlVNX0RJVklTSU9OOlxuICAgICAgY2FzZSBLZXlDb2RlLlNFTUlDT0xPTjpcbiAgICAgIGNhc2UgS2V5Q29kZS5EQVNIOlxuICAgICAgY2FzZSBLZXlDb2RlLkVRVUFMUzpcbiAgICAgIGNhc2UgS2V5Q29kZS5DT01NQTpcbiAgICAgIGNhc2UgS2V5Q29kZS5QRVJJT0Q6XG4gICAgICBjYXNlIEtleUNvZGUuU0xBU0g6XG4gICAgICBjYXNlIEtleUNvZGUuQVBPU1RST1BIRTpcbiAgICAgIGNhc2UgS2V5Q29kZS5TSU5HTEVfUVVPVEU6XG4gICAgICBjYXNlIEtleUNvZGUuT1BFTl9TUVVBUkVfQlJBQ0tFVDpcbiAgICAgIGNhc2UgS2V5Q29kZS5CQUNLU0xBU0g6XG4gICAgICBjYXNlIEtleUNvZGUuQ0xPU0VfU1FVQVJFX0JSQUNLRVQ6XG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gS2V5Q29kZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBSZWFjdERPTSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JjQW5pbWF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLWFuaW1hdGVcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9pY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaWNvblwiKSk7XG5cbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuXG52YXIgX2dldERhdGFPckFyaWFQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL2dldERhdGFPckFyaWFQcm9wc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhcm5pbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBBbGVydCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQWxlcnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQWxlcnQpO1xuXG4gIGZ1bmN0aW9uIEFsZXJ0KHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFsZXJ0KTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX3RoaXMuaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGRvbSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIGRvbS5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChkb20ub2Zmc2V0SGVpZ2h0LCBcInB4XCIpOyAvLyBNYWdpYyBjb2RlXG4gICAgICAvLyDph43lpI3kuIDmrKHlkI7miY3og73mraPnoa7orr7nva4gaGVpZ2h0XG5cbiAgICAgIGRvbS5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChkb20ub2Zmc2V0SGVpZ2h0LCBcInB4XCIpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNsb3Npbmc6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICAoX3RoaXMucHJvcHMub25DbG9zZSB8fCBub29wKShlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuYW5pbWF0aW9uRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjbG9zaW5nOiBmYWxzZSxcbiAgICAgICAgY2xvc2VkOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgKF90aGlzLnByb3BzLmFmdGVyQ2xvc2UgfHwgbm9vcCkoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyQWxlcnQgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkZXNjcmlwdGlvbiA9IF90aGlzJHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF90aGlzJHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBtZXNzYWdlID0gX3RoaXMkcHJvcHMubWVzc2FnZSxcbiAgICAgICAgICBjbG9zZVRleHQgPSBfdGhpcyRwcm9wcy5jbG9zZVRleHQsXG4gICAgICAgICAgYmFubmVyID0gX3RoaXMkcHJvcHMuYmFubmVyLFxuICAgICAgICAgIF90aGlzJHByb3BzJGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcyRjbGFzc05hbWUgPT09IHZvaWQgMCA/ICcnIDogX3RoaXMkcHJvcHMkY2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb247XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2xvc2FibGUgPSBfdGhpcyRwcm9wczIuY2xvc2FibGUsXG4gICAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMi50eXBlLFxuICAgICAgICAgIHNob3dJY29uID0gX3RoaXMkcHJvcHMyLnNob3dJY29uLFxuICAgICAgICAgIGljb25UeXBlID0gX3RoaXMkcHJvcHMyLmljb25UeXBlO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgY2xvc2luZyA9IF90aGlzJHN0YXRlLmNsb3NpbmcsXG4gICAgICAgICAgY2xvc2VkID0gX3RoaXMkc3RhdGUuY2xvc2VkO1xuICAgICAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygnYWxlcnQnLCBjdXN0b21pemVQcmVmaXhDbHMpOyAvLyBiYW5uZXLmqKHlvI/pu5jorqTmnIkgSWNvblxuXG4gICAgICBzaG93SWNvbiA9IGJhbm5lciAmJiBzaG93SWNvbiA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHNob3dJY29uOyAvLyBiYW5uZXLmqKHlvI/pu5jorqTkuLrorablkYpcblxuICAgICAgdHlwZSA9IGJhbm5lciAmJiB0eXBlID09PSB1bmRlZmluZWQgPyAnd2FybmluZycgOiB0eXBlIHx8ICdpbmZvJztcbiAgICAgIHZhciBpY29uVGhlbWUgPSAnZmlsbGVkJztcblxuICAgICAgaWYgKCFpY29uVHlwZSkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgICAgICAgIGljb25UeXBlID0gJ2NoZWNrLWNpcmNsZSc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICAgICAgaWNvblR5cGUgPSAnaW5mby1jaXJjbGUnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICBpY29uVHlwZSA9ICdjbG9zZS1jaXJjbGUnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgICAgIGljb25UeXBlID0gJ2V4Y2xhbWF0aW9uLWNpcmNsZSc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpY29uVHlwZSA9ICdkZWZhdWx0JztcbiAgICAgICAgfSAvLyB1c2Ugb3V0bGluZSBpY29uIGluIGFsZXJ0IHdpdGggZGVzY3JpcHRpb25cblxuXG4gICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgIGljb25UaGVtZSA9ICdvdXRsaW5lZCc7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gY2xvc2VhYmxlIHdoZW4gY2xvc2VUZXh0IGlzIGFzc2lnbmVkXG5cblxuICAgICAgaWYgKGNsb3NlVGV4dCkge1xuICAgICAgICBjbG9zYWJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbGVydENscyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHByZWZpeENscywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHR5cGUpLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsb3NpbmdcIiksIGNsb3NpbmcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItd2l0aC1kZXNjcmlwdGlvblwiKSwgISFkZXNjcmlwdGlvbiksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1uby1pY29uXCIpLCAhc2hvd0ljb24pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYmFubmVyXCIpLCAhIWJhbm5lciksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jbG9zYWJsZVwiKSwgY2xvc2FibGUpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgY2xvc2VJY29uID0gY2xvc2FibGUgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUNsb3NlLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2xvc2UtaWNvblwiKSxcbiAgICAgICAgdGFiSW5kZXg6IDBcbiAgICAgIH0sIGNsb3NlVGV4dCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jbG9zZS10ZXh0XCIpXG4gICAgICB9LCBjbG9zZVRleHQpIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHR5cGU6IFwiY2xvc2VcIlxuICAgICAgfSkpIDogbnVsbDtcbiAgICAgIHZhciBkYXRhT3JBcmlhUHJvcHMgPSAoMCwgX2dldERhdGFPckFyaWFQcm9wc1tcImRlZmF1bHRcIl0pKF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBpY29uTm9kZSA9IGljb24gJiYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pID8gUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb25cIiksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgaWNvbi5wcm9wcy5jbGFzc05hbWUsIGljb24ucHJvcHMuY2xhc3NOYW1lKSlcbiAgICAgIH0pIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb25cIilcbiAgICAgIH0sIGljb24pKSB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfaWNvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWljb25cIiksXG4gICAgICAgIHR5cGU6IGljb25UeXBlLFxuICAgICAgICB0aGVtZTogaWNvblRoZW1lXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjbG9zZWQgPyBudWxsIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjQW5pbWF0ZVtcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgY29tcG9uZW50OiBcIlwiLFxuICAgICAgICBzaG93UHJvcDogXCJkYXRhLXNob3dcIixcbiAgICAgICAgdHJhbnNpdGlvbk5hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2xpZGUtdXBcIiksXG4gICAgICAgIG9uRW5kOiBfdGhpcy5hbmltYXRpb25FbmRcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgICAgXCJkYXRhLXNob3dcIjogIWNsb3NpbmcsXG4gICAgICAgIGNsYXNzTmFtZTogYWxlcnRDbHMsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSwgZGF0YU9yQXJpYVByb3BzKSwgc2hvd0ljb24gPyBpY29uTm9kZSA6IG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlXCIpXG4gICAgICB9LCBtZXNzYWdlKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRlc2NyaXB0aW9uXCIpXG4gICAgICB9LCBkZXNjcmlwdGlvbiksIGNsb3NlSWNvbikpO1xuICAgIH07XG5cbiAgICAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKSghKCdpY29uVHlwZScgaW4gcHJvcHMpLCAnQWxlcnQnLCAnYGljb25UeXBlYCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBpY29uYCBpbnN0ZWFkLicpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2xvc2luZzogZmFsc2UsXG4gICAgICBjbG9zZWQ6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQWxlcnQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlckFsZXJ0KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQWxlcnQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQWxlcnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfdG9vbHRpcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3Rvb2x0aXBcIikpO1xuXG52YXIgX2ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9pY29uXCIpKTtcblxudmFyIF9idXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9idXR0b25cIikpO1xuXG52YXIgX0xvY2FsZVJlY2VpdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlLXByb3ZpZGVyL0xvY2FsZVJlY2VpdmVyXCIpKTtcblxudmFyIF9kZWZhdWx0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2xvY2FsZS9kZWZhdWx0XCIpKTtcblxudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIFBvcGNvbmZpcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcGNvbmZpcm0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUG9wY29uZmlybSk7XG5cbiAgZnVuY3Rpb24gUG9wY29uZmlybShwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3Bjb25maXJtKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX3RoaXMub25Db25maXJtID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnNldFZpc2libGUoZmFsc2UsIGUpO1xuXG4gICAgICB2YXIgb25Db25maXJtID0gX3RoaXMucHJvcHMub25Db25maXJtO1xuXG4gICAgICBpZiAob25Db25maXJtKSB7XG4gICAgICAgIG9uQ29uZmlybS5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25DYW5jZWwgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuc2V0VmlzaWJsZShmYWxzZSwgZSk7XG5cbiAgICAgIHZhciBvbkNhbmNlbCA9IF90aGlzLnByb3BzLm9uQ2FuY2VsO1xuXG4gICAgICBpZiAob25DYW5jZWwpIHtcbiAgICAgICAgb25DYW5jZWwuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uVmlzaWJsZUNoYW5nZSA9IGZ1bmN0aW9uICh2aXNpYmxlKSB7XG4gICAgICB2YXIgZGlzYWJsZWQgPSBfdGhpcy5wcm9wcy5kaXNhYmxlZDtcblxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0VmlzaWJsZSh2aXNpYmxlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2F2ZVRvb2x0aXAgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMudG9vbHRpcCA9IG5vZGU7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiAocHJlZml4Q2xzLCBwb3Bjb25maXJtTG9jYWxlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBva0J1dHRvblByb3BzID0gX3RoaXMkcHJvcHMub2tCdXR0b25Qcm9wcyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25Qcm9wcyA9IF90aGlzJHByb3BzLmNhbmNlbEJ1dHRvblByb3BzLFxuICAgICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgICAgY2FuY2VsVGV4dCA9IF90aGlzJHByb3BzLmNhbmNlbFRleHQsXG4gICAgICAgICAgb2tUZXh0ID0gX3RoaXMkcHJvcHMub2tUZXh0LFxuICAgICAgICAgIG9rVHlwZSA9IF90aGlzJHByb3BzLm9rVHlwZSxcbiAgICAgICAgICBpY29uID0gX3RoaXMkcHJvcHMuaWNvbjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pbm5lci1jb250ZW50XCIpXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlXCIpXG4gICAgICB9LCBpY29uLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlLXRpdGxlXCIpXG4gICAgICB9LCB0aXRsZSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1idXR0b25zXCIpXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfYnV0dG9uW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe1xuICAgICAgICBvbkNsaWNrOiBfdGhpcy5vbkNhbmNlbCxcbiAgICAgICAgc2l6ZTogXCJzbWFsbFwiXG4gICAgICB9LCBjYW5jZWxCdXR0b25Qcm9wcyksIGNhbmNlbFRleHQgfHwgcG9wY29uZmlybUxvY2FsZS5jYW5jZWxUZXh0KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2J1dHRvbltcImRlZmF1bHRcIl0sIF9leHRlbmRzKHtcbiAgICAgICAgb25DbGljazogX3RoaXMub25Db25maXJtLFxuICAgICAgICB0eXBlOiBva1R5cGUsXG4gICAgICAgIHNpemU6IFwic21hbGxcIlxuICAgICAgfSwgb2tCdXR0b25Qcm9wcyksIG9rVGV4dCB8fCBwb3Bjb25maXJtTG9jYWxlLm9rVGV4dCkpKSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckNvbmZpcm0gPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGdldFByZWZpeENscyA9IF9yZWYuZ2V0UHJlZml4Q2xzO1xuXG4gICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjdXN0b21pemVQcmVmaXhDbHMgPSBfYS5wcmVmaXhDbHMsXG4gICAgICAgICAgcGxhY2VtZW50ID0gX2EucGxhY2VtZW50LFxuICAgICAgICAgIHJlc3RQcm9wcyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwicGxhY2VtZW50XCJdKTtcblxuICAgICAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygncG9wb3ZlcicsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICB2YXIgb3ZlcmxheSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9Mb2NhbGVSZWNlaXZlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogXCJQb3Bjb25maXJtXCIsXG4gICAgICAgIGRlZmF1bHRMb2NhbGU6IF9kZWZhdWx0MltcImRlZmF1bHRcIl0uUG9wY29uZmlybVxuICAgICAgfSwgZnVuY3Rpb24gKHBvcGNvbmZpcm1Mb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlck92ZXJsYXkocHJlZml4Q2xzLCBwb3Bjb25maXJtTG9jYWxlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF90b29sdGlwW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgIG9uVmlzaWJsZUNoYW5nZTogX3RoaXMub25WaXNpYmxlQ2hhbmdlLFxuICAgICAgICB2aXNpYmxlOiBfdGhpcy5zdGF0ZS52aXNpYmxlLFxuICAgICAgICBvdmVybGF5OiBvdmVybGF5LFxuICAgICAgICByZWY6IF90aGlzLnNhdmVUb29sdGlwXG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmlzaWJsZTogcHJvcHMudmlzaWJsZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcGNvbmZpcm0sIFt7XG4gICAga2V5OiBcImdldFBvcHVwRG9tTm9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3B1cERvbU5vZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b29sdGlwLmdldFBvcHVwRG9tTm9kZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWaXNpYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZpc2libGUodmlzaWJsZSwgZSkge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKCEoJ3Zpc2libGUnIGluIHByb3BzKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgb25WaXNpYmxlQ2hhbmdlID0gcHJvcHMub25WaXNpYmxlQ2hhbmdlO1xuXG4gICAgICBpZiAob25WaXNpYmxlQ2hhbmdlKSB7XG4gICAgICAgIG9uVmlzaWJsZUNoYW5nZSh2aXNpYmxlLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIHRoaXMucmVuZGVyQ29uZmlybSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICgndmlzaWJsZScgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmlzaWJsZTogbmV4dFByb3BzLnZpc2libGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKCdkZWZhdWx0VmlzaWJsZScgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmlzaWJsZTogbmV4dFByb3BzLmRlZmF1bHRWaXNpYmxlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3Bjb25maXJtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3Bjb25maXJtLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHJhbnNpdGlvbk5hbWU6ICd6b29tLWJpZycsXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHRyaWdnZXI6ICdjbGljaycsXG4gIG9rVHlwZTogJ3ByaW1hcnknLFxuICBpY29uOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfaWNvbltcImRlZmF1bHRcIl0sIHtcbiAgICB0eXBlOiBcImV4Y2xhbWF0aW9uLWNpcmNsZVwiLFxuICAgIHRoZW1lOiBcImZpbGxlZFwiXG4gIH0pLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG4oMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoUG9wY29uZmlybSk7XG52YXIgX2RlZmF1bHQgPSBQb3Bjb25maXJtO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2RlYm91bmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2RlYm91bmNlXCIpKTtcblxudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhcm5pbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuLy8gbWF0Y2hNZWRpYSBwb2x5ZmlsbCBmb3Jcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XaWNreU5pbGxpYW1zL2VucXVpcmUuanMvaXNzdWVzLzgyXG4vLyBUT0RPOiBXaWxsIGJlIHJlbW92ZWQgaW4gYW50ZCA0LjAgYmVjYXVzZSB3ZSB3aWxsIG5vIGxvbmdlciBzdXBwb3J0IGllOVxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHZhciBtYXRjaE1lZGlhUG9seWZpbGwgPSBmdW5jdGlvbiBtYXRjaE1lZGlhUG9seWZpbGwobWVkaWFRdWVyeSkge1xuICAgIHJldHVybiB7XG4gICAgICBtZWRpYTogbWVkaWFRdWVyeSxcbiAgICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uIGFkZExpc3RlbmVyKCkge30sXG4gICAgICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoKSB7fVxuICAgIH07XG4gIH07IC8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTg3NzRcblxuXG4gIGlmICghd2luZG93Lm1hdGNoTWVkaWEpIHdpbmRvdy5tYXRjaE1lZGlhID0gbWF0Y2hNZWRpYVBvbHlmaWxsO1xufSAvLyBVc2UgcmVxdWlyZSBvdmVyIGltcG9ydCAod2lsbCBiZSBsaWZ0ZWQgdXApXG4vLyBtYWtlIHN1cmUgbWF0Y2hNZWRpYSBwb2x5ZmlsbCBydW4gYmVmb3JlIHJlcXVpcmUoJ3JlYWN0LXNsaWNrJylcbi8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy82NTYwXG4vLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMzMwOFxuXG5cbnZhciBTbGlja0Nhcm91c2VsID0gcmVxdWlyZSgncmVhY3Qtc2xpY2snKVtcImRlZmF1bHRcIl07XG5cbnZhciBDYXJvdXNlbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2Fyb3VzZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ2Fyb3VzZWwpO1xuXG4gIGZ1bmN0aW9uIENhcm91c2VsKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcm91c2VsKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX3RoaXMuc2F2ZVNsaWNrID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnNsaWNrID0gbm9kZTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25XaW5kb3dSZXNpemVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzI1NTBcbiAgICAgIHZhciBhdXRvcGxheSA9IF90aGlzLnByb3BzLmF1dG9wbGF5O1xuXG4gICAgICBpZiAoYXV0b3BsYXkgJiYgX3RoaXMuc2xpY2sgJiYgX3RoaXMuc2xpY2suaW5uZXJTbGlkZXIgJiYgX3RoaXMuc2xpY2suaW5uZXJTbGlkZXIuYXV0b1BsYXkpIHtcbiAgICAgICAgX3RoaXMuc2xpY2suaW5uZXJTbGlkZXIuYXV0b1BsYXkoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGdldFByZWZpeENscyA9IF9yZWYuZ2V0UHJlZml4Q2xzO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBpZiAocHJvcHMuZWZmZWN0ID09PSAnZmFkZScpIHtcbiAgICAgICAgcHJvcHMuZmFkZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbGFzc05hbWUgPSBnZXRQcmVmaXhDbHMoJ2Nhcm91c2VsJywgcHJvcHMucHJlZml4Q2xzKTtcbiAgICAgIHZhciBkb3RzQ2xhc3MgPSAnc2xpY2stZG90cyc7XG5cbiAgICAgIHZhciBkb3RQb3NpdGlvbiA9IF90aGlzLmdldERvdFBvc2l0aW9uKCk7XG5cbiAgICAgIHByb3BzLnZlcnRpY2FsID0gZG90UG9zaXRpb24gPT09ICdsZWZ0JyB8fCBkb3RQb3NpdGlvbiA9PT0gJ3JpZ2h0JztcbiAgICAgIHByb3BzLmRvdHNDbGFzcyA9IFwiXCIuY29uY2F0KGRvdHNDbGFzcywgXCIgXCIpLmNvbmNhdChkb3RzQ2xhc3MsIFwiLVwiKS5jb25jYXQoZG90UG9zaXRpb24gfHwgJ2JvdHRvbScpO1xuXG4gICAgICBpZiAocHJvcHMudmVydGljYWwpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoY2xhc3NOYW1lLCBcIiBcIikuY29uY2F0KGNsYXNzTmFtZSwgXCItdmVydGljYWxcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTbGlja0Nhcm91c2VsLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogX3RoaXMuc2F2ZVNsaWNrXG4gICAgICB9LCBwcm9wcykpKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25XaW5kb3dSZXNpemVkID0gKDAsIF9kZWJvdW5jZVtcImRlZmF1bHRcIl0pKF90aGlzLm9uV2luZG93UmVzaXplZCwgNTAwLCB7XG4gICAgICBsZWFkaW5nOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgaWYgKCd2ZXJ0aWNhbCcgaW4gX3RoaXMucHJvcHMpIHtcbiAgICAgICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCFfdGhpcy5wcm9wcy52ZXJ0aWNhbCwgJ0Nhcm91c2VsJywgJ2B2ZXJ0aWNhbGAgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBgZG90UG9zaXRpb25gIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENhcm91c2VsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBhdXRvcGxheSA9IHRoaXMucHJvcHMuYXV0b3BsYXk7XG5cbiAgICAgIGlmIChhdXRvcGxheSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgfSAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy83MTkxXG5cblxuICAgICAgdGhpcy5pbm5lclNsaWRlciA9IHRoaXMuc2xpY2sgJiYgdGhpcy5zbGljay5pbm5lclNsaWRlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmIChSZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSAhPT0gUmVhY3QuQ2hpbGRyZW4uY291bnQocHJldlByb3BzLmNoaWxkcmVuKSkge1xuICAgICAgICB0aGlzLmdvVG8odGhpcy5wcm9wcy5pbml0aWFsU2xpZGUgfHwgMCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHZhciBhdXRvcGxheSA9IHRoaXMucHJvcHMuYXV0b3BsYXk7XG5cbiAgICAgIGlmIChhdXRvcGxheSkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplZC5jYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RG90UG9zaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RG90UG9zaXRpb24oKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5kb3RQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5kb3RQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKCd2ZXJ0aWNhbCcgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy52ZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJuZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB0aGlzLnNsaWNrLnNsaWNrTmV4dCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcmV2XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICB0aGlzLnNsaWNrLnNsaWNrUHJldigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnb1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdvVG8oc2xpZGUpIHtcbiAgICAgIHZhciBkb250QW5pbWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB0aGlzLnNsaWNrLnNsaWNrR29UbyhzbGlkZSwgZG9udEFuaW1hdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9jb25maWdQcm92aWRlci5Db25maWdDb25zdW1lciwgbnVsbCwgdGhpcy5yZW5kZXJDYXJvdXNlbCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhcm91c2VsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IENhcm91c2VsO1xuQ2Fyb3VzZWwuZGVmYXVsdFByb3BzID0ge1xuICBkb3RzOiB0cnVlLFxuICBhcnJvd3M6IGZhbHNlLFxuICBkcmFnZ2FibGU6IGZhbHNlXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfc2xpZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zbGlkZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIF9kZWZhdWx0ID0gX3NsaWRlcltcImRlZmF1bHRcIl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfaW5uZXJTbGlkZXIgPSByZXF1aXJlKFwiLi9pbm5lci1zbGlkZXJcIik7XG5cbnZhciBfanNvbjJtcSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzb24ybXFcIikpO1xuXG52YXIgX2RlZmF1bHRQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZGVmYXVsdC1wcm9wc1wiKSk7XG5cbnZhciBfaW5uZXJTbGlkZXJVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lubmVyU2xpZGVyVXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGVucXVpcmUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2FuVXNlRE9NKSgpICYmIHJlcXVpcmUoXCJlbnF1aXJlLmpzXCIpO1xuXG52YXIgU2xpZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTbGlkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNsaWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbGlkZXIpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2xpZGVyKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5uZXJTbGlkZXJSZWZIYW5kbGVyXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHJldHVybiBfdGhpcy5pbm5lclNsaWRlciA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja1ByZXZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyLnNsaWNrUHJldigpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNsaWNrTmV4dFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaW5uZXJTbGlkZXIuc2xpY2tOZXh0KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2xpY2tHb1RvXCIsIGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgdmFyIGRvbnRBbmltYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHJldHVybiBfdGhpcy5pbm5lclNsaWRlci5zbGlja0dvVG8oc2xpZGUsIGRvbnRBbmltYXRlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja1BhdXNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5pbm5lclNsaWRlci5wYXVzZShcInBhdXNlZFwiKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja1BsYXlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyLmF1dG9QbGF5KFwicGxheVwiKTtcbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgYnJlYWtwb2ludDogbnVsbFxuICAgIH07XG4gICAgX3RoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzID0gW107XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNsaWRlciwgW3tcbiAgICBrZXk6IFwibWVkaWFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWVkaWEocXVlcnksIGhhbmRsZXIpIHtcbiAgICAgIC8vIGphdmFzY3JpcHQgaGFuZGxlciBmb3IgIGNzcyBtZWRpYSBxdWVyeVxuICAgICAgZW5xdWlyZS5yZWdpc3RlcihxdWVyeSwgaGFuZGxlcik7XG5cbiAgICAgIHRoaXMuX3Jlc3BvbnNpdmVNZWRpYUhhbmRsZXJzLnB1c2goe1xuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgIH0pO1xuICAgIH0gLy8gaGFuZGxlcyByZXNwb25zaXZlIGJyZWFrcG9pbnRzXG5cbiAgfSwge1xuICAgIGtleTogXCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gcGVyZm9ybWFuY2UgbW9uaXRvcmluZ1xuICAgICAgLy9pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy9jb25zdCB7IHdoeURpZFlvdVVwZGF0ZSB9ID0gcmVxdWlyZSgnd2h5LWRpZC15b3UtdXBkYXRlJylcbiAgICAgIC8vd2h5RGlkWW91VXBkYXRlKFJlYWN0KVxuICAgICAgLy99XG4gICAgICBpZiAodGhpcy5wcm9wcy5yZXNwb25zaXZlKSB7XG4gICAgICAgIHZhciBicmVha3BvaW50cyA9IHRoaXMucHJvcHMucmVzcG9uc2l2ZS5tYXAoZnVuY3Rpb24gKGJyZWFrcHQpIHtcbiAgICAgICAgICByZXR1cm4gYnJlYWtwdC5icmVha3BvaW50O1xuICAgICAgICB9KTsgLy8gc29ydCB0aGVtIGluIGluY3JlYXNpbmcgb3JkZXIgb2YgdGhlaXIgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgICAgYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgIHJldHVybiB4IC0geTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGJyZWFrcG9pbnQsIGluZGV4KSB7XG4gICAgICAgICAgLy8gbWVkaWEgcXVlcnkgZm9yIGVhY2ggYnJlYWtwb2ludFxuICAgICAgICAgIHZhciBiUXVlcnk7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGJRdWVyeSA9ICgwLCBfanNvbjJtcVtcImRlZmF1bHRcIl0pKHtcbiAgICAgICAgICAgICAgbWluV2lkdGg6IDAsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYlF1ZXJ5ID0gKDAsIF9qc29uMm1xW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgICAgICAgICBtaW5XaWR0aDogYnJlYWtwb2ludHNbaW5kZXggLSAxXSArIDEsXG4gICAgICAgICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IC8vIHdoZW4gbm90IHVzaW5nIHNlcnZlciBzaWRlIHJlbmRlcmluZ1xuXG5cbiAgICAgICAgICAoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2FuVXNlRE9NKSgpICYmIF90aGlzMi5tZWRpYShiUXVlcnksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IGJyZWFrcG9pbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgLy8gUmVnaXN0ZXIgbWVkaWEgcXVlcnkgZm9yIGZ1bGwgc2NyZWVuLiBOZWVkIHRvIHN1cHBvcnQgcmVzaXplIGZyb20gc21hbGwgdG8gbGFyZ2VcbiAgICAgICAgLy8gY29udmVydCBqYXZhc2NyaXB0IG9iamVjdCB0byBtZWRpYSBxdWVyeSBzdHJpbmdcblxuICAgICAgICB2YXIgcXVlcnkgPSAoMCwgX2pzb24ybXFbXCJkZWZhdWx0XCJdKSh7XG4gICAgICAgICAgbWluV2lkdGg6IGJyZWFrcG9pbnRzLnNsaWNlKC0xKVswXVxuICAgICAgICB9KTtcbiAgICAgICAgKDAsIF9pbm5lclNsaWRlclV0aWxzLmNhblVzZURPTSkoKSAmJiB0aGlzLm1lZGlhKHF1ZXJ5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGJyZWFrcG9pbnQ6IG51bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5fcmVzcG9uc2l2ZU1lZGlhSGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGVucXVpcmUudW5yZWdpc3RlcihvYmoucXVlcnksIG9iai5oYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBzZXR0aW5ncztcbiAgICAgIHZhciBuZXdQcm9wcztcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuYnJlYWtwb2ludCkge1xuICAgICAgICBuZXdQcm9wcyA9IHRoaXMucHJvcHMucmVzcG9uc2l2ZS5maWx0ZXIoZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICByZXR1cm4gcmVzcC5icmVha3BvaW50ID09PSBfdGhpczMuc3RhdGUuYnJlYWtwb2ludDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldHRpbmdzID0gbmV3UHJvcHNbMF0uc2V0dGluZ3MgPT09IFwidW5zbGlja1wiID8gXCJ1bnNsaWNrXCIgOiBfb2JqZWN0U3ByZWFkKHt9LCBfZGVmYXVsdFByb3BzW1wiZGVmYXVsdFwiXSwge30sIHRoaXMucHJvcHMsIHt9LCBuZXdQcm9wc1swXS5zZXR0aW5ncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXR0aW5ncyA9IF9vYmplY3RTcHJlYWQoe30sIF9kZWZhdWx0UHJvcHNbXCJkZWZhdWx0XCJdLCB7fSwgdGhpcy5wcm9wcyk7XG4gICAgICB9IC8vIGZvcmNlIHNjcm9sbGluZyBieSBvbmUgaWYgY2VudGVyTW9kZSBpcyBvblxuXG5cbiAgICAgIGlmIChzZXR0aW5ncy5jZW50ZXJNb2RlKSB7XG4gICAgICAgIGlmIChzZXR0aW5ncy5zbGlkZXNUb1Njcm9sbCA+IDEgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwic2xpZGVzVG9TY3JvbGwgc2hvdWxkIGJlIGVxdWFsIHRvIDEgaW4gY2VudGVyTW9kZSwgeW91IGFyZSB1c2luZyBcIi5jb25jYXQoc2V0dGluZ3Muc2xpZGVzVG9TY3JvbGwpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICAgIH0gLy8gZm9yY2Ugc2hvd2luZyBvbmUgc2xpZGUgYW5kIHNjcm9sbGluZyBieSBvbmUgaWYgdGhlIGZhZGUgbW9kZSBpcyBvblxuXG5cbiAgICAgIGlmIChzZXR0aW5ncy5mYWRlKSB7XG4gICAgICAgIGlmIChzZXR0aW5ncy5zbGlkZXNUb1Nob3cgPiAxICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcInNsaWRlc1RvU2hvdyBzaG91bGQgYmUgZXF1YWwgdG8gMSB3aGVuIGZhZGUgaXMgdHJ1ZSwgeW91J3JlIHVzaW5nIFwiLmNvbmNhdChzZXR0aW5ncy5zbGlkZXNUb1Nob3cpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5zbGlkZXNUb1Njcm9sbCA+IDEgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwic2xpZGVzVG9TY3JvbGwgc2hvdWxkIGJlIGVxdWFsIHRvIDEgd2hlbiBmYWRlIGlzIHRydWUsIHlvdSdyZSB1c2luZyBcIi5jb25jYXQoc2V0dGluZ3Muc2xpZGVzVG9TY3JvbGwpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldHRpbmdzLnNsaWRlc1RvU2hvdyA9IDE7XG4gICAgICAgIHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICAgIH0gLy8gbWFrZXMgc3VyZSB0aGF0IGNoaWxkcmVuIGlzIGFuIGFycmF5LCBldmVuIHdoZW4gdGhlcmUgaXMgb25seSAxIGNoaWxkXG5cblxuICAgICAgdmFyIGNoaWxkcmVuID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi50b0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pOyAvLyBDaGlsZHJlbiBtYXkgY29udGFpbiBmYWxzZSBvciBudWxsLCBzbyB3ZSBzaG91bGQgZmlsdGVyIHRoZW1cbiAgICAgIC8vIGNoaWxkcmVuIG1heSBhbHNvIGNvbnRhaW4gc3RyaW5nIGZpbGxlZCB3aXRoIHNwYWNlcyAoaW4gY2VydGFpbiBjYXNlcyB3aGVyZSB3ZSB1c2UganN4IHN0cmluZ3MpXG5cblxuICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXR1cm4gISFjaGlsZC50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISFjaGlsZDtcbiAgICAgIH0pOyAvLyByb3dzIGFuZCBzbGlkZXNQZXJSb3cgbG9naWMgaXMgaGFuZGxlZCBoZXJlXG5cbiAgICAgIGlmIChzZXR0aW5ncy52YXJpYWJsZVdpZHRoICYmIChzZXR0aW5ncy5yb3dzID4gMSB8fCBzZXR0aW5ncy5zbGlkZXNQZXJSb3cgPiAxKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJ2YXJpYWJsZVdpZHRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gY2FzZSBvZiByb3dzID4gMSBvciBzbGlkZXNQZXJSb3cgPiAxXCIpO1xuICAgICAgICBzZXR0aW5ncy52YXJpYWJsZVdpZHRoID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRXaWR0aCA9IG51bGw7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IHNldHRpbmdzLnJvd3MgKiBzZXR0aW5ncy5zbGlkZXNQZXJSb3cpIHtcbiAgICAgICAgdmFyIG5ld1NsaWRlID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IGk7IGogPCBpICsgc2V0dGluZ3Mucm93cyAqIHNldHRpbmdzLnNsaWRlc1BlclJvdzsgaiArPSBzZXR0aW5ncy5zbGlkZXNQZXJSb3cpIHtcbiAgICAgICAgICB2YXIgcm93ID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBrID0gajsgayA8IGogKyBzZXR0aW5ncy5zbGlkZXNQZXJSb3c7IGsgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLnZhcmlhYmxlV2lkdGggJiYgY2hpbGRyZW5ba10ucHJvcHMuc3R5bGUpIHtcbiAgICAgICAgICAgICAgY3VycmVudFdpZHRoID0gY2hpbGRyZW5ba10ucHJvcHMuc3R5bGUud2lkdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChrID49IGNoaWxkcmVuLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgICAgICByb3cucHVzaChfcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudChjaGlsZHJlbltrXSwge1xuICAgICAgICAgICAgICBrZXk6IDEwMCAqIGkgKyAxMCAqIGogKyBrLFxuICAgICAgICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiXCIuY29uY2F0KDEwMCAvIHNldHRpbmdzLnNsaWRlc1BlclJvdywgXCIlXCIpLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5ld1NsaWRlLnB1c2goX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGtleTogMTAgKiBpICsgalxuICAgICAgICAgIH0sIHJvdykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLnZhcmlhYmxlV2lkdGgpIHtcbiAgICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICB3aWR0aDogY3VycmVudFdpZHRoXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgbmV3U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IGlcbiAgICAgICAgICB9LCBuZXdTbGlkZSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXR0aW5ncyA9PT0gXCJ1bnNsaWNrXCIpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IFwicmVndWxhciBzbGlkZXIgXCIgKyAodGhpcy5wcm9wcy5jbGFzc05hbWUgfHwgXCJcIik7XG4gICAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH0sIG5ld0NoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGRyZW4ubGVuZ3RoIDw9IHNldHRpbmdzLnNsaWRlc1RvU2hvdykge1xuICAgICAgICBzZXR0aW5ncy51bnNsaWNrID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfaW5uZXJTbGlkZXIuSW5uZXJTbGlkZXIsIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMuc3R5bGUsXG4gICAgICAgIHJlZjogdGhpcy5pbm5lclNsaWRlclJlZkhhbmRsZXJcbiAgICAgIH0sIHNldHRpbmdzKSwgbmV3Q2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTbGlkZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTbGlkZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLklubmVyU2xpZGVyID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9pbml0aWFsU3RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2luaXRpYWwtc3RhdGVcIikpO1xuXG52YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC5kZWJvdW5jZVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2lubmVyU2xpZGVyVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9pbm5lclNsaWRlclV0aWxzXCIpO1xuXG52YXIgX3RyYWNrID0gcmVxdWlyZShcIi4vdHJhY2tcIik7XG5cbnZhciBfZG90cyA9IHJlcXVpcmUoXCIuL2RvdHNcIik7XG5cbnZhciBfYXJyb3dzID0gcmVxdWlyZShcIi4vYXJyb3dzXCIpO1xuXG52YXIgX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGxcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgSW5uZXJTbGlkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKElubmVyU2xpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbm5lclNsaWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbm5lclNsaWRlcik7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihJbm5lclNsaWRlcikuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImxpc3RSZWZIYW5kbGVyXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHJldHVybiBfdGhpcy5saXN0ID0gcmVmO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRyYWNrUmVmSGFuZGxlclwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICByZXR1cm4gX3RoaXMudHJhY2sgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiYWRhcHRIZWlnaHRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmFkYXB0aXZlSGVpZ2h0ICYmIF90aGlzLmxpc3QpIHtcbiAgICAgICAgdmFyIGVsZW0gPSBfdGhpcy5saXN0LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1pbmRleD1cXFwiXCIuY29uY2F0KF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSwgXCJcXFwiXVwiKSk7XG5cbiAgICAgICAgX3RoaXMubGlzdC5zdHlsZS5oZWlnaHQgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0SGVpZ2h0KShlbGVtKSArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNzckluaXQoKTtcblxuICAgICAgX3RoaXMucHJvcHMub25Jbml0ICYmIF90aGlzLnByb3BzLm9uSW5pdCgpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMubGF6eUxvYWQpIHtcbiAgICAgICAgdmFyIHNsaWRlc1RvTG9hZCA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRPbkRlbWFuZExhenlTbGlkZXMpKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7fSwgX3RoaXMuc3RhdGUpKTtcblxuICAgICAgICBpZiAoc2xpZGVzVG9Mb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBsYXp5TG9hZGVkTGlzdDogcHJldlN0YXRlLmxhenlMb2FkZWRMaXN0LmNvbmNhdChzbGlkZXNUb0xvYWQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uTGF6eUxvYWQpIHtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uTGF6eUxvYWQoc2xpZGVzVG9Mb2FkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wb25lbnREaWRNb3VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICB0cmFja1JlZjogX3RoaXMudHJhY2tcbiAgICAgIH0sIF90aGlzLnByb3BzKTtcblxuICAgICAgX3RoaXMudXBkYXRlU3RhdGUoc3BlYywgdHJ1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5hZGFwdEhlaWdodCgpO1xuXG4gICAgICAgIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLmF1dG9QbGF5KFwidXBkYXRlXCIpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5sYXp5TG9hZCA9PT0gXCJwcm9ncmVzc2l2ZVwiKSB7XG4gICAgICAgIF90aGlzLmxhenlMb2FkVGltZXIgPSBzZXRJbnRlcnZhbChfdGhpcy5wcm9ncmVzc2l2ZUxhenlMb2FkLCAxMDAwKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucm8gPSBuZXcgX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGxbXCJkZWZhdWx0XCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmFuaW1hdGluZykge1xuICAgICAgICAgIF90aGlzLm9uV2luZG93UmVzaXplZChmYWxzZSk7IC8vIGRvbid0IHNldCB0cmFja1N0eWxlIGhlbmNlIGRvbid0IGJyZWFrIGFuaW1hdGlvblxuXG5cbiAgICAgICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uV2luZG93UmVzaXplZCgpO1xuICAgICAgICAgIH0sIF90aGlzLnByb3BzLnNwZWVkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMub25XaW5kb3dSZXNpemVkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5yby5vYnNlcnZlKF90aGlzLmxpc3QpO1xuXG4gICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2xpY2stc2xpZGVcIiksIGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICBzbGlkZS5vbmZvY3VzID0gX3RoaXMucHJvcHMucGF1c2VPbkZvY3VzID8gX3RoaXMub25TbGlkZUZvY3VzIDogbnVsbDtcbiAgICAgICAgc2xpZGUub25ibHVyID0gX3RoaXMucHJvcHMucGF1c2VPbkZvY3VzID8gX3RoaXMub25TbGlkZUJsdXIgOiBudWxsO1xuICAgICAgfSk7IC8vIFRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nXG5cbiAgICAgIGlmICghd2luZG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIF90aGlzLm9uV2luZG93UmVzaXplZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbnJlc2l6ZVwiLCBfdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjaykge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMubGF6eUxvYWRUaW1lcikge1xuICAgICAgICBjbGVhckludGVydmFsKF90aGlzLmxhenlMb2FkVGltZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuY2FsbGJhY2tUaW1lcnMubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzLmZvckVhY2goZnVuY3Rpb24gKHRpbWVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzID0gW107XG4gICAgICB9XG5cbiAgICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBfdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmRldGFjaEV2ZW50KFwib25yZXNpemVcIiwgX3RoaXMub25XaW5kb3dSZXNpemVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmF1dG9wbGF5VGltZXIpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy5hdXRvcGxheVRpbWVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLCBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICB0cmFja1JlZjogX3RoaXMudHJhY2tcbiAgICAgIH0sIG5leHRQcm9wcywge30sIF90aGlzLnN0YXRlKTtcblxuICAgICAgdmFyIHNldFRyYWNrU3R5bGUgPSBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyhfdGhpcy5wcm9wcyk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX09iamVjdCRrZXlzW19pXTtcblxuICAgICAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgc2V0VHJhY2tTdHlsZSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3R5cGVvZihuZXh0UHJvcHNba2V5XSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG5leHRQcm9wc1trZXldID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gX3RoaXMucHJvcHNba2V5XSkge1xuICAgICAgICAgIHNldFRyYWNrU3R5bGUgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnVwZGF0ZVN0YXRlKHNwZWMsIHNldFRyYWNrU3R5bGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSA+PSBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLmNvdW50KG5leHRQcm9wcy5jaGlsZHJlbikpIHtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBtZXNzYWdlOiBcImluZGV4XCIsXG4gICAgICAgICAgICBpbmRleDogX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChuZXh0UHJvcHMuY2hpbGRyZW4pIC0gbmV4dFByb3BzLnNsaWRlc1RvU2hvdyxcbiAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dFByb3BzLmF1dG9wbGF5KSB7XG4gICAgICAgICAgX3RoaXMuYXV0b1BsYXkoXCJ1cGRhdGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMucGF1c2UoXCJwYXVzZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbXBvbmVudERpZFVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jaGVja0ltYWdlc0xvYWQoKTtcblxuICAgICAgX3RoaXMucHJvcHMub25SZUluaXQgJiYgX3RoaXMucHJvcHMub25SZUluaXQoKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLmxhenlMb2FkKSB7XG4gICAgICAgIHZhciBzbGlkZXNUb0xvYWQgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0T25EZW1hbmRMYXp5U2xpZGVzKShfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge30sIF90aGlzLnN0YXRlKSk7XG5cbiAgICAgICAgaWYgKHNsaWRlc1RvTG9hZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbGF6eUxvYWRlZExpc3Q6IHByZXZTdGF0ZS5sYXp5TG9hZGVkTGlzdC5jb25jYXQoc2xpZGVzVG9Mb2FkKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkxhenlMb2FkKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkxhenlMb2FkKHNsaWRlc1RvTG9hZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIGlmICh0aGlzLnByb3BzLm9uTGF6eUxvYWQpIHtcbiAgICAgIC8vICAgdGhpcy5wcm9wcy5vbkxhenlMb2FkKFtsZWZ0TW9zdFNsaWRlXSlcbiAgICAgIC8vIH1cblxuXG4gICAgICBfdGhpcy5hZGFwdEhlaWdodCgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uV2luZG93UmVzaXplZFwiLCBmdW5jdGlvbiAoc2V0VHJhY2tTdHlsZSkge1xuICAgICAgaWYgKF90aGlzLmRlYm91bmNlZFJlc2l6ZSkgX3RoaXMuZGVib3VuY2VkUmVzaXplLmNhbmNlbCgpO1xuICAgICAgX3RoaXMuZGVib3VuY2VkUmVzaXplID0gKDAsIF9sb2Rhc2hbXCJkZWZhdWx0XCJdKShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5yZXNpemVXaW5kb3coc2V0VHJhY2tTdHlsZSk7XG4gICAgICB9LCA1MCk7XG5cbiAgICAgIF90aGlzLmRlYm91bmNlZFJlc2l6ZSgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlc2l6ZVdpbmRvd1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2V0VHJhY2tTdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgICAgIGlmICghX3JlYWN0RG9tW1wiZGVmYXVsdFwiXS5maW5kRE9NTm9kZShfdGhpcy50cmFjaykpIHJldHVybjtcblxuICAgICAgdmFyIHNwZWMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgbGlzdFJlZjogX3RoaXMubGlzdCxcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrXG4gICAgICB9LCBfdGhpcy5wcm9wcywge30sIF90aGlzLnN0YXRlKTtcblxuICAgICAgX3RoaXMudXBkYXRlU3RhdGUoc3BlYywgc2V0VHJhY2tTdHlsZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuYXV0b3BsYXkpIF90aGlzLmF1dG9QbGF5KFwidXBkYXRlXCIpO2Vsc2UgX3RoaXMucGF1c2UoXCJwYXVzZWRcIik7XG4gICAgICB9KTsgLy8gYW5pbWF0aW5nIHN0YXRlIHNob3VsZCBiZSBjbGVhcmVkIHdoaWxlIHJlc2l6aW5nLCBvdGhlcndpc2UgYXV0b3BsYXkgc3RvcHMgd29ya2luZ1xuXG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYW5pbWF0aW5nOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjayk7XG4gICAgICBkZWxldGUgX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2s7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidXBkYXRlU3RhdGVcIiwgZnVuY3Rpb24gKHNwZWMsIHNldFRyYWNrU3R5bGUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdXBkYXRlZFN0YXRlID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmluaXRpYWxpemVkU3RhdGUpKHNwZWMpO1xuICAgICAgc3BlYyA9IF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHt9LCB1cGRhdGVkU3RhdGUsIHtcbiAgICAgICAgc2xpZGVJbmRleDogdXBkYXRlZFN0YXRlLmN1cnJlbnRTbGlkZVxuICAgICAgfSk7XG4gICAgICB2YXIgdGFyZ2V0TGVmdCA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRUcmFja0xlZnQpKHNwZWMpO1xuICAgICAgc3BlYyA9IF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHtcbiAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgfSk7XG4gICAgICB2YXIgdHJhY2tTdHlsZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRUcmFja0NTUykoc3BlYyk7XG5cbiAgICAgIGlmIChzZXRUcmFja1N0eWxlIHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pICE9PSBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLmNvdW50KHNwZWMuY2hpbGRyZW4pKSB7XG4gICAgICAgIHVwZGF0ZWRTdGF0ZVtcInRyYWNrU3R5bGVcIl0gPSB0cmFja1N0eWxlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh1cGRhdGVkU3RhdGUsIGNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzc3JJbml0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy52YXJpYWJsZVdpZHRoKSB7XG4gICAgICAgIHZhciBfdHJhY2tXaWR0aCA9IDAsXG4gICAgICAgICAgICBfdHJhY2tMZWZ0ID0gMDtcbiAgICAgICAgdmFyIGNoaWxkcmVuV2lkdGhzID0gW107XG4gICAgICAgIHZhciBwcmVDbG9uZXMgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UHJlQ2xvbmVzKShfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge30sIF90aGlzLnN0YXRlLCB7XG4gICAgICAgICAgc2xpZGVDb3VudDogX3RoaXMucHJvcHMuY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIHBvc3RDbG9uZXMgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UG9zdENsb25lcykoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHt9LCBfdGhpcy5zdGF0ZSwge1xuICAgICAgICAgIHNsaWRlQ291bnQ6IF90aGlzLnByb3BzLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgX3RoaXMucHJvcHMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICBjaGlsZHJlbldpZHRocy5wdXNoKGNoaWxkLnByb3BzLnN0eWxlLndpZHRoKTtcbiAgICAgICAgICBfdHJhY2tXaWR0aCArPSBjaGlsZC5wcm9wcy5zdHlsZS53aWR0aDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVDbG9uZXM7IGkrKykge1xuICAgICAgICAgIF90cmFja0xlZnQgKz0gY2hpbGRyZW5XaWR0aHNbY2hpbGRyZW5XaWR0aHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICAgIF90cmFja1dpZHRoICs9IGNoaWxkcmVuV2lkdGhzW2NoaWxkcmVuV2lkdGhzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHBvc3RDbG9uZXM7IF9pMisrKSB7XG4gICAgICAgICAgX3RyYWNrV2lkdGggKz0gY2hpbGRyZW5XaWR0aHNbX2kyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZTsgX2kzKyspIHtcbiAgICAgICAgICBfdHJhY2tMZWZ0ICs9IGNoaWxkcmVuV2lkdGhzW19pM107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3RyYWNrU3R5bGUgPSB7XG4gICAgICAgICAgd2lkdGg6IF90cmFja1dpZHRoICsgXCJweFwiLFxuICAgICAgICAgIGxlZnQ6IC1fdHJhY2tMZWZ0ICsgXCJweFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmNlbnRlck1vZGUpIHtcbiAgICAgICAgICB2YXIgY3VycmVudFdpZHRoID0gXCJcIi5jb25jYXQoY2hpbGRyZW5XaWR0aHNbX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlXSwgXCJweFwiKTtcbiAgICAgICAgICBfdHJhY2tTdHlsZS5sZWZ0ID0gXCJjYWxjKFwiLmNvbmNhdChfdHJhY2tTdHlsZS5sZWZ0LCBcIiArICgxMDAlIC0gXCIpLmNvbmNhdChjdXJyZW50V2lkdGgsIFwiKSAvIDIgKSBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdHJhY2tTdHlsZTogX3RyYWNrU3R5bGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW5Db3VudCA9IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7fSwgX3RoaXMuc3RhdGUsIHtcbiAgICAgICAgc2xpZGVDb3VudDogY2hpbGRyZW5Db3VudFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzbGlkZUNvdW50ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFByZUNsb25lcykoc3BlYykgKyAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UG9zdENsb25lcykoc3BlYykgKyBjaGlsZHJlbkNvdW50O1xuICAgICAgdmFyIHRyYWNrV2lkdGggPSAxMDAgLyBfdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cgKiBzbGlkZUNvdW50O1xuICAgICAgdmFyIHNsaWRlV2lkdGggPSAxMDAgLyBzbGlkZUNvdW50O1xuICAgICAgdmFyIHRyYWNrTGVmdCA9IC1zbGlkZVdpZHRoICogKCgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRQcmVDbG9uZXMpKHNwZWMpICsgX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlKSAqIHRyYWNrV2lkdGggLyAxMDA7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5jZW50ZXJNb2RlKSB7XG4gICAgICAgIHRyYWNrTGVmdCArPSAoMTAwIC0gc2xpZGVXaWR0aCAqIHRyYWNrV2lkdGggLyAxMDApIC8gMjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYWNrU3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiB0cmFja1dpZHRoICsgXCIlXCIsXG4gICAgICAgIGxlZnQ6IHRyYWNrTGVmdCArIFwiJVwiXG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNsaWRlV2lkdGg6IHNsaWRlV2lkdGggKyBcIiVcIixcbiAgICAgICAgdHJhY2tTdHlsZTogdHJhY2tTdHlsZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2hlY2tJbWFnZXNMb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbWFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWNrLXNsaWRlIGltZ1wiKTtcbiAgICAgIHZhciBpbWFnZXNDb3VudCA9IGltYWdlcy5sZW5ndGgsXG4gICAgICAgICAgbG9hZGVkQ291bnQgPSAwO1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpbWFnZXMsIGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgcmV0dXJuICsrbG9hZGVkQ291bnQgJiYgbG9hZGVkQ291bnQgPj0gaW1hZ2VzQ291bnQgJiYgX3RoaXMub25XaW5kb3dSZXNpemVkKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFpbWFnZS5vbmNsaWNrKSB7XG4gICAgICAgICAgaW1hZ2Uub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbWFnZS5wYXJlbnROb2RlLmZvY3VzKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkNsaWNrSGFuZGxlciA9IGltYWdlLm9uY2xpY2s7XG5cbiAgICAgICAgICBpbWFnZS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJldkNsaWNrSGFuZGxlcigpO1xuICAgICAgICAgICAgaW1hZ2UucGFyZW50Tm9kZS5mb2N1cygpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWltYWdlLm9ubG9hZCkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5hZGFwdEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzLnB1c2goc2V0VGltZW91dChfdGhpcy5vbldpbmRvd1Jlc2l6ZWQsIF90aGlzLnByb3BzLnNwZWVkKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSBoYW5kbGVyO1xuXG4gICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uTGF6eUxvYWRFcnJvciAmJiBfdGhpcy5wcm9wcy5vbkxhenlMb2FkRXJyb3IoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcm9ncmVzc2l2ZUxhenlMb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzbGlkZXNUb0xvYWQgPSBbXTtcblxuICAgICAgdmFyIHNwZWMgPSBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge30sIF90aGlzLnN0YXRlKTtcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGU7IGluZGV4IDwgX3RoaXMuc3RhdGUuc2xpZGVDb3VudCArICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRQb3N0Q2xvbmVzKShzcGVjKTsgaW5kZXgrKykge1xuICAgICAgICBpZiAoX3RoaXMuc3RhdGUubGF6eUxvYWRlZExpc3QuaW5kZXhPZihpbmRleCkgPCAwKSB7XG4gICAgICAgICAgc2xpZGVzVG9Mb2FkLnB1c2goaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pbmRleCA9IF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSAtIDE7IF9pbmRleCA+PSAtKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFByZUNsb25lcykoc3BlYyk7IF9pbmRleC0tKSB7XG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKF9pbmRleCkgPCAwKSB7XG4gICAgICAgICAgc2xpZGVzVG9Mb2FkLnB1c2goX2luZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGVzVG9Mb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhenlMb2FkZWRMaXN0OiBzdGF0ZS5sYXp5TG9hZGVkTGlzdC5jb25jYXQoc2xpZGVzVG9Mb2FkKVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkxhenlMb2FkKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25MYXp5TG9hZChzbGlkZXNUb0xvYWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX3RoaXMubGF6eUxvYWRUaW1lcikge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMubGF6eUxvYWRUaW1lcik7XG4gICAgICAgICAgZGVsZXRlIF90aGlzLmxhenlMb2FkVGltZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlkZUhhbmRsZXJcIiwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICB2YXIgZG9udEFuaW1hdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXNOYXZGb3IgPSBfdGhpcyRwcm9wcy5hc05hdkZvcixcbiAgICAgICAgICBiZWZvcmVDaGFuZ2UgPSBfdGhpcyRwcm9wcy5iZWZvcmVDaGFuZ2UsXG4gICAgICAgICAgb25MYXp5TG9hZCA9IF90aGlzJHByb3BzLm9uTGF6eUxvYWQsXG4gICAgICAgICAgc3BlZWQgPSBfdGhpcyRwcm9wcy5zcGVlZCxcbiAgICAgICAgICBhZnRlckNoYW5nZSA9IF90aGlzJHByb3BzLmFmdGVyQ2hhbmdlOyAvLyBjYXB0dXJlIGN1cnJlbnRzbGlkZSBiZWZvcmUgc3RhdGUgaXMgdXBkYXRlZFxuXG4gICAgICB2YXIgY3VycmVudFNsaWRlID0gX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlO1xuXG4gICAgICB2YXIgX3NsaWRlSGFuZGxlciA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zbGlkZUhhbmRsZXIpKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgIH0sIF90aGlzLnByb3BzLCB7fSwgX3RoaXMuc3RhdGUsIHtcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrLFxuICAgICAgICB1c2VDU1M6IF90aGlzLnByb3BzLnVzZUNTUyAmJiAhZG9udEFuaW1hdGVcbiAgICAgIH0pKSxcbiAgICAgICAgICBzdGF0ZSA9IF9zbGlkZUhhbmRsZXIuc3RhdGUsXG4gICAgICAgICAgbmV4dFN0YXRlID0gX3NsaWRlSGFuZGxlci5uZXh0U3RhdGU7XG5cbiAgICAgIGlmICghc3RhdGUpIHJldHVybjtcbiAgICAgIGJlZm9yZUNoYW5nZSAmJiBiZWZvcmVDaGFuZ2UoY3VycmVudFNsaWRlLCBzdGF0ZS5jdXJyZW50U2xpZGUpO1xuICAgICAgdmFyIHNsaWRlc1RvTG9hZCA9IHN0YXRlLmxhenlMb2FkZWRMaXN0LmZpbHRlcihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LmluZGV4T2YodmFsdWUpIDwgMDtcbiAgICAgIH0pO1xuICAgICAgb25MYXp5TG9hZCAmJiBzbGlkZXNUb0xvYWQubGVuZ3RoID4gMCAmJiBvbkxhenlMb2FkKHNsaWRlc1RvTG9hZCk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFzTmF2Rm9yICYmIGFzTmF2Rm9yLmlubmVyU2xpZGVyLnNsaWRlSGFuZGxlcihpbmRleCk7XG4gICAgICAgIGlmICghbmV4dFN0YXRlKSByZXR1cm47XG4gICAgICAgIF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGluZyA9IG5leHRTdGF0ZS5hbmltYXRpbmcsXG4gICAgICAgICAgICAgIGZpcnN0QmF0Y2ggPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMobmV4dFN0YXRlLCBbXCJhbmltYXRpbmdcIl0pO1xuXG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZmlyc3RCYXRjaCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2tUaW1lcnMucHVzaChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGFuaW1hdGluZ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDEwKSk7XG5cbiAgICAgICAgICAgIGFmdGVyQ2hhbmdlICYmIGFmdGVyQ2hhbmdlKHN0YXRlLmN1cnJlbnRTbGlkZSk7XG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIHNwZWVkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNoYW5nZVNsaWRlXCIsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgZG9udEFuaW1hdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7fSwgX3RoaXMuc3RhdGUpO1xuXG4gICAgICB2YXIgdGFyZ2V0U2xpZGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2hhbmdlU2xpZGUpKHNwZWMsIG9wdGlvbnMpO1xuICAgICAgaWYgKHRhcmdldFNsaWRlICE9PSAwICYmICF0YXJnZXRTbGlkZSkgcmV0dXJuO1xuXG4gICAgICBpZiAoZG9udEFuaW1hdGUgPT09IHRydWUpIHtcbiAgICAgICAgX3RoaXMuc2xpZGVIYW5kbGVyKHRhcmdldFNsaWRlLCBkb250QW5pbWF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zbGlkZUhhbmRsZXIodGFyZ2V0U2xpZGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNsaWNrSGFuZGxlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLmNsaWNrYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jbGlja2FibGUgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImtleUhhbmRsZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBkaXIgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMua2V5SGFuZGxlcikoZSwgX3RoaXMucHJvcHMuYWNjZXNzaWJpbGl0eSwgX3RoaXMucHJvcHMucnRsKTtcbiAgICAgIGRpciAhPT0gXCJcIiAmJiBfdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgIG1lc3NhZ2U6IGRpclxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2VsZWN0SGFuZGxlclwiLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgX3RoaXMuY2hhbmdlU2xpZGUob3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZGlzYWJsZUJvZHlTY3JvbGxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIHdpbmRvdy5vbnRvdWNobW92ZSA9IHByZXZlbnREZWZhdWx0O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImVuYWJsZUJvZHlTY3JvbGxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgd2luZG93Lm9udG91Y2htb3ZlID0gbnVsbDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzd2lwZVN0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMudmVydGljYWxTd2lwaW5nKSB7XG4gICAgICAgIF90aGlzLmRpc2FibGVCb2R5U2Nyb2xsKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zd2lwZVN0YXJ0KShlLCBfdGhpcy5wcm9wcy5zd2lwZSwgX3RoaXMucHJvcHMuZHJhZ2dhYmxlKTtcbiAgICAgIHN0YXRlICE9PSBcIlwiICYmIF90aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzd2lwZU1vdmVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBzdGF0ZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zd2lwZU1vdmUpKGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7fSwgX3RoaXMuc3RhdGUsIHtcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrLFxuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICBzbGlkZUluZGV4OiBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGVcbiAgICAgIH0pKTtcbiAgICAgIGlmICghc3RhdGUpIHJldHVybjtcblxuICAgICAgaWYgKHN0YXRlW1wic3dpcGluZ1wiXSkge1xuICAgICAgICBfdGhpcy5jbGlja2FibGUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN3aXBlRW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgc3RhdGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuc3dpcGVFbmQpKGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7fSwgX3RoaXMuc3RhdGUsIHtcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrLFxuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICBzbGlkZUluZGV4OiBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGVcbiAgICAgIH0pKTtcbiAgICAgIGlmICghc3RhdGUpIHJldHVybjtcbiAgICAgIHZhciB0cmlnZ2VyU2xpZGVIYW5kbGVyID0gc3RhdGVbXCJ0cmlnZ2VyU2xpZGVIYW5kbGVyXCJdO1xuICAgICAgZGVsZXRlIHN0YXRlW1widHJpZ2dlclNsaWRlSGFuZGxlclwiXTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoc3RhdGUpO1xuXG4gICAgICBpZiAodHJpZ2dlclNsaWRlSGFuZGxlciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICAgIF90aGlzLnNsaWRlSGFuZGxlcih0cmlnZ2VyU2xpZGVIYW5kbGVyKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLnZlcnRpY2FsU3dpcGluZykge1xuICAgICAgICBfdGhpcy5lbmFibGVCb2R5U2Nyb2xsKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2xpY2tQcmV2XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHRoaXMgYW5kIGZlbGxvdyBtZXRob2RzIGFyZSB3cmFwcGVkIGluIHNldFRpbWVvdXRcbiAgICAgIC8vIHRvIG1ha2Ugc3VyZSBpbml0aWFsaXplIHNldFN0YXRlIGhhcyBoYXBwZW5lZCBiZWZvcmVcbiAgICAgIC8vIGFueSBvZiBzdWNoIG1ldGhvZHMgYXJlIGNhbGxlZFxuICAgICAgX3RoaXMuY2FsbGJhY2tUaW1lcnMucHVzaChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICBtZXNzYWdlOiBcInByZXZpb3VzXCJcbiAgICAgICAgfSk7XG4gICAgICB9LCAwKSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2xpY2tOZXh0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzLnB1c2goc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgbWVzc2FnZTogXCJuZXh0XCJcbiAgICAgICAgfSk7XG4gICAgICB9LCAwKSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2xpY2tHb1RvXCIsIGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgdmFyIGRvbnRBbmltYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHNsaWRlID0gTnVtYmVyKHNsaWRlKTtcbiAgICAgIGlmIChpc05hTihzbGlkZSkpIHJldHVybiBcIlwiO1xuXG4gICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuY2hhbmdlU2xpZGUoe1xuICAgICAgICAgIG1lc3NhZ2U6IFwiaW5kZXhcIixcbiAgICAgICAgICBpbmRleDogc2xpZGUsXG4gICAgICAgICAgY3VycmVudFNsaWRlOiBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGVcbiAgICAgICAgfSwgZG9udEFuaW1hdGUpO1xuICAgICAgfSwgMCkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInBsYXlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5leHRJbmRleDtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLnJ0bCkge1xuICAgICAgICBuZXh0SW5kZXggPSBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgLSBfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2FuR29OZXh0KShfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge30sIF90aGlzLnN0YXRlKSkpIHtcbiAgICAgICAgICBuZXh0SW5kZXggPSBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgKyBfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2xpZGVIYW5kbGVyKG5leHRJbmRleCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiYXV0b1BsYXlcIiwgZnVuY3Rpb24gKHBsYXlUeXBlKSB7XG4gICAgICBpZiAoX3RoaXMuYXV0b3BsYXlUaW1lcikge1xuICAgICAgICBjbGVhckludGVydmFsKF90aGlzLmF1dG9wbGF5VGltZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXV0b3BsYXlpbmcgPSBfdGhpcy5zdGF0ZS5hdXRvcGxheWluZztcblxuICAgICAgaWYgKHBsYXlUeXBlID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgIGlmIChhdXRvcGxheWluZyA9PT0gXCJob3ZlcmVkXCIgfHwgYXV0b3BsYXlpbmcgPT09IFwiZm9jdXNlZFwiIHx8IGF1dG9wbGF5aW5nID09PSBcInBhdXNlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBsYXlUeXBlID09PSBcImxlYXZlXCIpIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcInBhdXNlZFwiIHx8IGF1dG9wbGF5aW5nID09PSBcImZvY3VzZWRcIikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwbGF5VHlwZSA9PT0gXCJibHVyXCIpIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcInBhdXNlZFwiIHx8IGF1dG9wbGF5aW5nID09PSBcImhvdmVyZWRcIikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5hdXRvcGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoX3RoaXMucGxheSwgX3RoaXMucHJvcHMuYXV0b3BsYXlTcGVlZCArIDUwKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhdXRvcGxheWluZzogXCJwbGF5aW5nXCJcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInBhdXNlXCIsIGZ1bmN0aW9uIChwYXVzZVR5cGUpIHtcbiAgICAgIGlmIChfdGhpcy5hdXRvcGxheVRpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMuYXV0b3BsYXlUaW1lcik7XG4gICAgICAgIF90aGlzLmF1dG9wbGF5VGltZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXV0b3BsYXlpbmcgPSBfdGhpcy5zdGF0ZS5hdXRvcGxheWluZztcblxuICAgICAgaWYgKHBhdXNlVHlwZSA9PT0gXCJwYXVzZWRcIikge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgYXV0b3BsYXlpbmc6IFwicGF1c2VkXCJcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhdXNlVHlwZSA9PT0gXCJmb2N1c2VkXCIpIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcImhvdmVyZWRcIiB8fCBhdXRvcGxheWluZyA9PT0gXCJwbGF5aW5nXCIpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBhdXRvcGxheWluZzogXCJmb2N1c2VkXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGF1c2VUeXBlICBpcyAnaG92ZXJlZCdcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcInBsYXlpbmdcIikge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGF1dG9wbGF5aW5nOiBcImhvdmVyZWRcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Eb3RzT3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMucGF1c2UoXCJob3ZlcmVkXCIpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRG90c0xlYXZlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5hdXRvcGxheSAmJiBfdGhpcy5zdGF0ZS5hdXRvcGxheWluZyA9PT0gXCJob3ZlcmVkXCIgJiYgX3RoaXMuYXV0b1BsYXkoXCJsZWF2ZVwiKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblRyYWNrT3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMucGF1c2UoXCJob3ZlcmVkXCIpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uVHJhY2tMZWF2ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMuc3RhdGUuYXV0b3BsYXlpbmcgPT09IFwiaG92ZXJlZFwiICYmIF90aGlzLmF1dG9QbGF5KFwibGVhdmVcIik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25TbGlkZUZvY3VzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5hdXRvcGxheSAmJiBfdGhpcy5wYXVzZShcImZvY3VzZWRcIik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25TbGlkZUJsdXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLnN0YXRlLmF1dG9wbGF5aW5nID09PSBcImZvY3VzZWRcIiAmJiBfdGhpcy5hdXRvUGxheShcImJsdXJcIik7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShcInNsaWNrLXNsaWRlclwiLCBfdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgXCJzbGljay12ZXJ0aWNhbFwiOiBfdGhpcy5wcm9wcy52ZXJ0aWNhbCxcbiAgICAgICAgXCJzbGljay1pbml0aWFsaXplZFwiOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgdmFyIHNwZWMgPSBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge30sIF90aGlzLnN0YXRlKTtcblxuICAgICAgdmFyIHRyYWNrUHJvcHMgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZXh0cmFjdE9iamVjdCkoc3BlYywgW1wiZmFkZVwiLCBcImNzc0Vhc2VcIiwgXCJzcGVlZFwiLCBcImluZmluaXRlXCIsIFwiY2VudGVyTW9kZVwiLCBcImZvY3VzT25TZWxlY3RcIiwgXCJjdXJyZW50U2xpZGVcIiwgXCJsYXp5TG9hZFwiLCBcImxhenlMb2FkZWRMaXN0XCIsIFwicnRsXCIsIFwic2xpZGVXaWR0aFwiLCBcInNsaWRlSGVpZ2h0XCIsIFwibGlzdEhlaWdodFwiLCBcInZlcnRpY2FsXCIsIFwic2xpZGVzVG9TaG93XCIsIFwic2xpZGVzVG9TY3JvbGxcIiwgXCJzbGlkZUNvdW50XCIsIFwidHJhY2tTdHlsZVwiLCBcInZhcmlhYmxlV2lkdGhcIiwgXCJ1bnNsaWNrXCIsIFwiY2VudGVyUGFkZGluZ1wiXSk7XG4gICAgICB2YXIgcGF1c2VPbkhvdmVyID0gX3RoaXMucHJvcHMucGF1c2VPbkhvdmVyO1xuICAgICAgdHJhY2tQcm9wcyA9IF9vYmplY3RTcHJlYWQoe30sIHRyYWNrUHJvcHMsIHtcbiAgICAgICAgb25Nb3VzZUVudGVyOiBwYXVzZU9uSG92ZXIgPyBfdGhpcy5vblRyYWNrT3ZlciA6IG51bGwsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogcGF1c2VPbkhvdmVyID8gX3RoaXMub25UcmFja0xlYXZlIDogbnVsbCxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHBhdXNlT25Ib3ZlciA/IF90aGlzLm9uVHJhY2tPdmVyIDogbnVsbCxcbiAgICAgICAgZm9jdXNPblNlbGVjdDogX3RoaXMucHJvcHMuZm9jdXNPblNlbGVjdCA/IF90aGlzLnNlbGVjdEhhbmRsZXIgOiBudWxsXG4gICAgICB9KTtcbiAgICAgIHZhciBkb3RzO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuZG90cyA9PT0gdHJ1ZSAmJiBfdGhpcy5zdGF0ZS5zbGlkZUNvdW50ID49IF90aGlzLnByb3BzLnNsaWRlc1RvU2hvdykge1xuICAgICAgICB2YXIgZG90UHJvcHMgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZXh0cmFjdE9iamVjdCkoc3BlYywgW1wiZG90c0NsYXNzXCIsIFwic2xpZGVDb3VudFwiLCBcInNsaWRlc1RvU2hvd1wiLCBcImN1cnJlbnRTbGlkZVwiLCBcInNsaWRlc1RvU2Nyb2xsXCIsIFwiY2xpY2tIYW5kbGVyXCIsIFwiY2hpbGRyZW5cIiwgXCJjdXN0b21QYWdpbmdcIiwgXCJpbmZpbml0ZVwiLCBcImFwcGVuZERvdHNcIl0pO1xuICAgICAgICB2YXIgcGF1c2VPbkRvdHNIb3ZlciA9IF90aGlzLnByb3BzLnBhdXNlT25Eb3RzSG92ZXI7XG4gICAgICAgIGRvdFByb3BzID0gX29iamVjdFNwcmVhZCh7fSwgZG90UHJvcHMsIHtcbiAgICAgICAgICBjbGlja0hhbmRsZXI6IF90aGlzLmNoYW5nZVNsaWRlLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogcGF1c2VPbkRvdHNIb3ZlciA/IF90aGlzLm9uRG90c0xlYXZlIDogbnVsbCxcbiAgICAgICAgICBvbk1vdXNlT3ZlcjogcGF1c2VPbkRvdHNIb3ZlciA/IF90aGlzLm9uRG90c092ZXIgOiBudWxsLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogcGF1c2VPbkRvdHNIb3ZlciA/IF90aGlzLm9uRG90c0xlYXZlIDogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgZG90cyA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfZG90cy5Eb3RzLCBkb3RQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2QXJyb3csIG5leHRBcnJvdztcbiAgICAgIHZhciBhcnJvd1Byb3BzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmV4dHJhY3RPYmplY3QpKHNwZWMsIFtcImluZmluaXRlXCIsIFwiY2VudGVyTW9kZVwiLCBcImN1cnJlbnRTbGlkZVwiLCBcInNsaWRlQ291bnRcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJwcmV2QXJyb3dcIiwgXCJuZXh0QXJyb3dcIl0pO1xuICAgICAgYXJyb3dQcm9wcy5jbGlja0hhbmRsZXIgPSBfdGhpcy5jaGFuZ2VTbGlkZTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLmFycm93cykge1xuICAgICAgICBwcmV2QXJyb3cgPSBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX2Fycm93cy5QcmV2QXJyb3csIGFycm93UHJvcHMpO1xuICAgICAgICBuZXh0QXJyb3cgPSBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX2Fycm93cy5OZXh0QXJyb3csIGFycm93UHJvcHMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmVydGljYWxIZWlnaHRTdHlsZSA9IG51bGw7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodFN0eWxlID0ge1xuICAgICAgICAgIGhlaWdodDogX3RoaXMuc3RhdGUubGlzdEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgY2VudGVyUGFkZGluZ1N0eWxlID0gbnVsbDtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNlbnRlclBhZGRpbmdTdHlsZSA9IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IFwiMHB4IFwiICsgX3RoaXMucHJvcHMuY2VudGVyUGFkZGluZ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgY2VudGVyUGFkZGluZ1N0eWxlID0ge1xuICAgICAgICAgICAgcGFkZGluZzogX3RoaXMucHJvcHMuY2VudGVyUGFkZGluZyArIFwiIDBweFwiXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgbGlzdFN0eWxlID0gX29iamVjdFNwcmVhZCh7fSwgdmVydGljYWxIZWlnaHRTdHlsZSwge30sIGNlbnRlclBhZGRpbmdTdHlsZSk7XG5cbiAgICAgIHZhciB0b3VjaE1vdmUgPSBfdGhpcy5wcm9wcy50b3VjaE1vdmU7XG4gICAgICB2YXIgbGlzdFByb3BzID0ge1xuICAgICAgICBjbGFzc05hbWU6IFwic2xpY2stbGlzdFwiLFxuICAgICAgICBzdHlsZTogbGlzdFN0eWxlLFxuICAgICAgICBvbkNsaWNrOiBfdGhpcy5jbGlja0hhbmRsZXIsXG4gICAgICAgIG9uTW91c2VEb3duOiB0b3VjaE1vdmUgPyBfdGhpcy5zd2lwZVN0YXJ0IDogbnVsbCxcbiAgICAgICAgb25Nb3VzZU1vdmU6IF90aGlzLnN0YXRlLmRyYWdnaW5nICYmIHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlTW92ZSA6IG51bGwsXG4gICAgICAgIG9uTW91c2VVcDogdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVFbmQgOiBudWxsLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IF90aGlzLnN0YXRlLmRyYWdnaW5nICYmIHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlRW5kIDogbnVsbCxcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0b3VjaE1vdmUgPyBfdGhpcy5zd2lwZVN0YXJ0IDogbnVsbCxcbiAgICAgICAgb25Ub3VjaE1vdmU6IF90aGlzLnN0YXRlLmRyYWdnaW5nICYmIHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlTW92ZSA6IG51bGwsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlRW5kIDogbnVsbCxcbiAgICAgICAgb25Ub3VjaENhbmNlbDogX3RoaXMuc3RhdGUuZHJhZ2dpbmcgJiYgdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVFbmQgOiBudWxsLFxuICAgICAgICBvbktleURvd246IF90aGlzLnByb3BzLmFjY2Vzc2liaWxpdHkgPyBfdGhpcy5rZXlIYW5kbGVyIDogbnVsbFxuICAgICAgfTtcbiAgICAgIHZhciBpbm5lclNsaWRlclByb3BzID0ge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgZGlyOiBcImx0clwiLFxuICAgICAgICBzdHlsZTogX3RoaXMucHJvcHMuc3R5bGVcbiAgICAgIH07XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy51bnNsaWNrKSB7XG4gICAgICAgIGxpc3RQcm9wcyA9IHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwic2xpY2stbGlzdFwiXG4gICAgICAgIH07XG4gICAgICAgIGlubmVyU2xpZGVyUHJvcHMgPSB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCBpbm5lclNsaWRlclByb3BzLCAhX3RoaXMucHJvcHMudW5zbGljayA/IHByZXZBcnJvdyA6IFwiXCIsIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogX3RoaXMubGlzdFJlZkhhbmRsZXJcbiAgICAgIH0sIGxpc3RQcm9wcyksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfdHJhY2suVHJhY2ssIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiBfdGhpcy50cmFja1JlZkhhbmRsZXJcbiAgICAgIH0sIHRyYWNrUHJvcHMpLCBfdGhpcy5wcm9wcy5jaGlsZHJlbikpLCAhX3RoaXMucHJvcHMudW5zbGljayA/IG5leHRBcnJvdyA6IFwiXCIsICFfdGhpcy5wcm9wcy51bnNsaWNrID8gZG90cyA6IFwiXCIpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMubGlzdCA9IG51bGw7XG4gICAgX3RoaXMudHJhY2sgPSBudWxsO1xuICAgIF90aGlzLnN0YXRlID0gX29iamVjdFNwcmVhZCh7fSwgX2luaXRpYWxTdGF0ZVtcImRlZmF1bHRcIl0sIHtcbiAgICAgIGN1cnJlbnRTbGlkZTogX3RoaXMucHJvcHMuaW5pdGlhbFNsaWRlLFxuICAgICAgc2xpZGVDb3VudDogX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChfdGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICB9KTtcbiAgICBfdGhpcy5jYWxsYmFja1RpbWVycyA9IFtdO1xuICAgIF90aGlzLmNsaWNrYWJsZSA9IHRydWU7XG4gICAgX3RoaXMuZGVib3VuY2VkUmVzaXplID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gSW5uZXJTbGlkZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0cy5Jbm5lclNsaWRlciA9IElubmVyU2xpZGVyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICBhbmltYXRpbmc6IGZhbHNlLFxuICBhdXRvcGxheWluZzogbnVsbCxcbiAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgY3VycmVudExlZnQ6IG51bGwsXG4gIGN1cnJlbnRTbGlkZTogMCxcbiAgZGlyZWN0aW9uOiAxLFxuICBkcmFnZ2luZzogZmFsc2UsXG4gIGVkZ2VEcmFnZ2VkOiBmYWxzZSxcbiAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICBsYXp5TG9hZGVkTGlzdDogW10sXG4gIGxpc3RIZWlnaHQ6IG51bGwsXG4gIGxpc3RXaWR0aDogbnVsbCxcbiAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgc2xpZGVDb3VudDogbnVsbCxcbiAgc2xpZGVIZWlnaHQ6IG51bGwsXG4gIHNsaWRlV2lkdGg6IG51bGwsXG4gIHN3aXBlTGVmdDogbnVsbCxcbiAgc3dpcGVkOiBmYWxzZSxcbiAgLy8gdXNlZCBieSBzd2lwZUV2ZW50LiBkaWZmZXJlbnRpdGVzIGJldHdlZW4gdG91Y2ggYW5kIHN3aXBlLlxuICBzd2lwaW5nOiBmYWxzZSxcbiAgdG91Y2hPYmplY3Q6IHtcbiAgICBzdGFydFg6IDAsXG4gICAgc3RhcnRZOiAwLFxuICAgIGN1clg6IDAsXG4gICAgY3VyWTogMFxuICB9LFxuICB0cmFja1N0eWxlOiB7fSxcbiAgdHJhY2tXaWR0aDogMFxufTtcbnZhciBfZGVmYXVsdCA9IGluaXRpYWxTdGF0ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRyYWNrID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9pbm5lclNsaWRlclV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvaW5uZXJTbGlkZXJVdGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vLyBnaXZlbiBzcGVjaWZpY2F0aW9ucy9wcm9wcyBmb3IgYSBzbGlkZSwgZmV0Y2ggYWxsIHRoZSBjbGFzc2VzIHRoYXQgbmVlZCB0byBiZSBhcHBsaWVkIHRvIHRoZSBzbGlkZVxudmFyIGdldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uIGdldFNsaWRlQ2xhc3NlcyhzcGVjKSB7XG4gIHZhciBzbGlja0FjdGl2ZSwgc2xpY2tDZW50ZXIsIHNsaWNrQ2xvbmVkO1xuICB2YXIgY2VudGVyT2Zmc2V0LCBpbmRleDtcblxuICBpZiAoc3BlYy5ydGwpIHtcbiAgICBpbmRleCA9IHNwZWMuc2xpZGVDb3VudCAtIDEgLSBzcGVjLmluZGV4O1xuICB9IGVsc2Uge1xuICAgIGluZGV4ID0gc3BlYy5pbmRleDtcbiAgfVxuXG4gIHNsaWNrQ2xvbmVkID0gaW5kZXggPCAwIHx8IGluZGV4ID49IHNwZWMuc2xpZGVDb3VudDtcblxuICBpZiAoc3BlYy5jZW50ZXJNb2RlKSB7XG4gICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihzcGVjLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgIHNsaWNrQ2VudGVyID0gKGluZGV4IC0gc3BlYy5jdXJyZW50U2xpZGUpICUgc3BlYy5zbGlkZUNvdW50ID09PSAwO1xuXG4gICAgaWYgKGluZGV4ID4gc3BlYy5jdXJyZW50U2xpZGUgLSBjZW50ZXJPZmZzZXQgLSAxICYmIGluZGV4IDw9IHNwZWMuY3VycmVudFNsaWRlICsgY2VudGVyT2Zmc2V0KSB7XG4gICAgICBzbGlja0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNsaWNrQWN0aXZlID0gc3BlYy5jdXJyZW50U2xpZGUgPD0gaW5kZXggJiYgaW5kZXggPCBzcGVjLmN1cnJlbnRTbGlkZSArIHNwZWMuc2xpZGVzVG9TaG93O1xuICB9XG5cbiAgdmFyIHNsaWNrQ3VycmVudCA9IGluZGV4ID09PSBzcGVjLmN1cnJlbnRTbGlkZTtcbiAgcmV0dXJuIHtcbiAgICBcInNsaWNrLXNsaWRlXCI6IHRydWUsXG4gICAgXCJzbGljay1hY3RpdmVcIjogc2xpY2tBY3RpdmUsXG4gICAgXCJzbGljay1jZW50ZXJcIjogc2xpY2tDZW50ZXIsXG4gICAgXCJzbGljay1jbG9uZWRcIjogc2xpY2tDbG9uZWQsXG4gICAgXCJzbGljay1jdXJyZW50XCI6IHNsaWNrQ3VycmVudCAvLyBkdWJpb3VzIGluIGNhc2Ugb2YgUlRMXG5cbiAgfTtcbn07XG5cbnZhciBnZXRTbGlkZVN0eWxlID0gZnVuY3Rpb24gZ2V0U2xpZGVTdHlsZShzcGVjKSB7XG4gIHZhciBzdHlsZSA9IHt9O1xuXG4gIGlmIChzcGVjLnZhcmlhYmxlV2lkdGggPT09IHVuZGVmaW5lZCB8fCBzcGVjLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgc3R5bGUud2lkdGggPSBzcGVjLnNsaWRlV2lkdGg7XG4gIH1cblxuICBpZiAoc3BlYy5mYWRlKSB7XG4gICAgc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cbiAgICBpZiAoc3BlYy52ZXJ0aWNhbCkge1xuICAgICAgc3R5bGUudG9wID0gLXNwZWMuaW5kZXggKiBwYXJzZUludChzcGVjLnNsaWRlSGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUubGVmdCA9IC1zcGVjLmluZGV4ICogcGFyc2VJbnQoc3BlYy5zbGlkZVdpZHRoKTtcbiAgICB9XG5cbiAgICBzdHlsZS5vcGFjaXR5ID0gc3BlYy5jdXJyZW50U2xpZGUgPT09IHNwZWMuaW5kZXggPyAxIDogMDtcbiAgICBzdHlsZS50cmFuc2l0aW9uID0gXCJvcGFjaXR5IFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2UgKyBcIiwgXCIgKyBcInZpc2liaWxpdHkgXCIgKyBzcGVjLnNwZWVkICsgXCJtcyBcIiArIHNwZWMuY3NzRWFzZTtcbiAgICBzdHlsZS5XZWJraXRUcmFuc2l0aW9uID0gXCJvcGFjaXR5IFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2UgKyBcIiwgXCIgKyBcInZpc2liaWxpdHkgXCIgKyBzcGVjLnNwZWVkICsgXCJtcyBcIiArIHNwZWMuY3NzRWFzZTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbnZhciBnZXRLZXkgPSBmdW5jdGlvbiBnZXRLZXkoY2hpbGQsIGZhbGxiYWNrS2V5KSB7XG4gIHJldHVybiBjaGlsZC5rZXkgfHwgZmFsbGJhY2tLZXk7XG59O1xuXG52YXIgcmVuZGVyU2xpZGVzID0gZnVuY3Rpb24gcmVuZGVyU2xpZGVzKHNwZWMpIHtcbiAgdmFyIGtleTtcbiAgdmFyIHNsaWRlcyA9IFtdO1xuICB2YXIgcHJlQ2xvbmVTbGlkZXMgPSBbXTtcbiAgdmFyIHBvc3RDbG9uZVNsaWRlcyA9IFtdO1xuXG4gIHZhciBjaGlsZHJlbkNvdW50ID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChzcGVjLmNoaWxkcmVuKTtcblxuICB2YXIgc3RhcnRJbmRleCA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5sYXp5U3RhcnRJbmRleCkoc3BlYyk7XG4gIHZhciBlbmRJbmRleCA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5sYXp5RW5kSW5kZXgpKHNwZWMpO1xuXG4gIF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4uZm9yRWFjaChzcGVjLmNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbSwgaW5kZXgpIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIGNoaWxkT25DbGlja09wdGlvbnMgPSB7XG4gICAgICBtZXNzYWdlOiBcImNoaWxkcmVuXCIsXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICBzbGlkZXNUb1Njcm9sbDogc3BlYy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIGN1cnJlbnRTbGlkZTogc3BlYy5jdXJyZW50U2xpZGVcbiAgICB9OyAvLyBpbiBjYXNlIG9mIGxhenlMb2FkLCB3aGV0aGVyIG9yIG5vdCB3ZSB3YW50IHRvIGZldGNoIHRoZSBzbGlkZVxuXG4gICAgaWYgKCFzcGVjLmxhenlMb2FkIHx8IHNwZWMubGF6eUxvYWQgJiYgc3BlYy5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKGluZGV4KSA+PSAwKSB7XG4gICAgICBjaGlsZCA9IGVsZW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZFN0eWxlID0gZ2V0U2xpZGVTdHlsZShfb2JqZWN0U3ByZWFkKHt9LCBzcGVjLCB7XG4gICAgICBpbmRleDogaW5kZXhcbiAgICB9KSk7XG4gICAgdmFyIHNsaWRlQ2xhc3MgPSBjaGlsZC5wcm9wcy5jbGFzc05hbWUgfHwgXCJcIjtcbiAgICB2YXIgc2xpZGVDbGFzc2VzID0gZ2V0U2xpZGVDbGFzc2VzKF9vYmplY3RTcHJlYWQoe30sIHNwZWMsIHtcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTsgLy8gcHVzaCBhIGNsb25lZCBlbGVtZW50IG9mIHRoZSBkZXNpcmVkIHNsaWRlXG5cbiAgICBzbGlkZXMucHVzaChfcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAga2V5OiBcIm9yaWdpbmFsXCIgKyBnZXRLZXkoY2hpbGQsIGluZGV4KSxcbiAgICAgIFwiZGF0YS1pbmRleFwiOiBpbmRleCxcbiAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoc2xpZGVDbGFzc2VzLCBzbGlkZUNsYXNzKSxcbiAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICBcImFyaWEtaGlkZGVuXCI6ICFzbGlkZUNsYXNzZXNbXCJzbGljay1hY3RpdmVcIl0sXG4gICAgICBzdHlsZTogX29iamVjdFNwcmVhZCh7XG4gICAgICAgIG91dGxpbmU6IFwibm9uZVwiXG4gICAgICB9LCBjaGlsZC5wcm9wcy5zdHlsZSB8fCB7fSwge30sIGNoaWxkU3R5bGUpLFxuICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIGNoaWxkLnByb3BzICYmIGNoaWxkLnByb3BzLm9uQ2xpY2sgJiYgY2hpbGQucHJvcHMub25DbGljayhlKTtcblxuICAgICAgICBpZiAoc3BlYy5mb2N1c09uU2VsZWN0KSB7XG4gICAgICAgICAgc3BlYy5mb2N1c09uU2VsZWN0KGNoaWxkT25DbGlja09wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpOyAvLyBpZiBzbGlkZSBuZWVkcyB0byBiZSBwcmVjbG9uZWQgb3IgcG9zdGNsb25lZFxuXG4gICAgaWYgKHNwZWMuaW5maW5pdGUgJiYgc3BlYy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgdmFyIHByZUNsb25lTm8gPSBjaGlsZHJlbkNvdW50IC0gaW5kZXg7XG5cbiAgICAgIGlmIChwcmVDbG9uZU5vIDw9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRQcmVDbG9uZXMpKHNwZWMpICYmIGNoaWxkcmVuQ291bnQgIT09IHNwZWMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgIGtleSA9IC1wcmVDbG9uZU5vO1xuXG4gICAgICAgIGlmIChrZXkgPj0gc3RhcnRJbmRleCkge1xuICAgICAgICAgIGNoaWxkID0gZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNsaWRlQ2xhc3NlcyA9IGdldFNsaWRlQ2xhc3Nlcyhfb2JqZWN0U3ByZWFkKHt9LCBzcGVjLCB7XG4gICAgICAgICAgaW5kZXg6IGtleVxuICAgICAgICB9KSk7XG4gICAgICAgIHByZUNsb25lU2xpZGVzLnB1c2goX3JlYWN0W1wiZGVmYXVsdFwiXS5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBrZXk6IFwicHJlY2xvbmVkXCIgKyBnZXRLZXkoY2hpbGQsIGtleSksXG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGtleSxcbiAgICAgICAgICB0YWJJbmRleDogXCItMVwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoc2xpZGVDbGFzc2VzLCBzbGlkZUNsYXNzKSxcbiAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6ICFzbGlkZUNsYXNzZXNbXCJzbGljay1hY3RpdmVcIl0sXG4gICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe30sIGNoaWxkLnByb3BzLnN0eWxlIHx8IHt9LCB7fSwgY2hpbGRTdHlsZSksXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICBjaGlsZC5wcm9wcyAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrICYmIGNoaWxkLnByb3BzLm9uQ2xpY2soZSk7XG5cbiAgICAgICAgICAgIGlmIChzcGVjLmZvY3VzT25TZWxlY3QpIHtcbiAgICAgICAgICAgICAgc3BlYy5mb2N1c09uU2VsZWN0KGNoaWxkT25DbGlja09wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRyZW5Db3VudCAhPT0gc3BlYy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAga2V5ID0gY2hpbGRyZW5Db3VudCArIGluZGV4O1xuXG4gICAgICAgIGlmIChrZXkgPCBlbmRJbmRleCkge1xuICAgICAgICAgIGNoaWxkID0gZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNsaWRlQ2xhc3NlcyA9IGdldFNsaWRlQ2xhc3Nlcyhfb2JqZWN0U3ByZWFkKHt9LCBzcGVjLCB7XG4gICAgICAgICAgaW5kZXg6IGtleVxuICAgICAgICB9KSk7XG4gICAgICAgIHBvc3RDbG9uZVNsaWRlcy5wdXNoKF9yZWFjdFtcImRlZmF1bHRcIl0uY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAga2V5OiBcInBvc3RjbG9uZWRcIiArIGdldEtleShjaGlsZCwga2V5KSxcbiAgICAgICAgICBcImRhdGEtaW5kZXhcIjoga2V5LFxuICAgICAgICAgIHRhYkluZGV4OiBcIi0xXCIsXG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShzbGlkZUNsYXNzZXMsIHNsaWRlQ2xhc3MpLFxuICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogIXNsaWRlQ2xhc3Nlc1tcInNsaWNrLWFjdGl2ZVwiXSxcbiAgICAgICAgICBzdHlsZTogX29iamVjdFNwcmVhZCh7fSwgY2hpbGQucHJvcHMuc3R5bGUgfHwge30sIHt9LCBjaGlsZFN0eWxlKSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgIGNoaWxkLnByb3BzICYmIGNoaWxkLnByb3BzLm9uQ2xpY2sgJiYgY2hpbGQucHJvcHMub25DbGljayhlKTtcblxuICAgICAgICAgICAgaWYgKHNwZWMuZm9jdXNPblNlbGVjdCkge1xuICAgICAgICAgICAgICBzcGVjLmZvY3VzT25TZWxlY3QoY2hpbGRPbkNsaWNrT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoc3BlYy5ydGwpIHtcbiAgICByZXR1cm4gcHJlQ2xvbmVTbGlkZXMuY29uY2F0KHNsaWRlcywgcG9zdENsb25lU2xpZGVzKS5yZXZlcnNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZUNsb25lU2xpZGVzLmNvbmNhdChzbGlkZXMsIHBvc3RDbG9uZVNsaWRlcyk7XG4gIH1cbn07XG5cbnZhciBUcmFjayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYWNrLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhY2soKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYWNrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVHJhY2spLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRyYWNrLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHNsaWRlcyA9IHJlbmRlclNsaWRlcyh0aGlzLnByb3BzKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25Nb3VzZUVudGVyID0gX3RoaXMkcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VPdmVyID0gX3RoaXMkcHJvcHMub25Nb3VzZU92ZXIsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlID0gX3RoaXMkcHJvcHMub25Nb3VzZUxlYXZlO1xuICAgICAgdmFyIG1vdXNlRXZlbnRzID0ge1xuICAgICAgICBvbk1vdXNlRW50ZXI6IG9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZU92ZXI6IG9uTW91c2VPdmVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgICBjbGFzc05hbWU6IFwic2xpY2stdHJhY2tcIixcbiAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMudHJhY2tTdHlsZVxuICAgICAgfSwgbW91c2VFdmVudHMpLCBzbGlkZXMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUcmFjaztcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50KTtcblxuZXhwb3J0cy5UcmFjayA9IFRyYWNrOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Eb3RzID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgZ2V0RG90Q291bnQgPSBmdW5jdGlvbiBnZXREb3RDb3VudChzcGVjKSB7XG4gIHZhciBkb3RzO1xuXG4gIGlmIChzcGVjLmluZmluaXRlKSB7XG4gICAgZG90cyA9IE1hdGguY2VpbChzcGVjLnNsaWRlQ291bnQgLyBzcGVjLnNsaWRlc1RvU2Nyb2xsKTtcbiAgfSBlbHNlIHtcbiAgICBkb3RzID0gTWF0aC5jZWlsKChzcGVjLnNsaWRlQ291bnQgLSBzcGVjLnNsaWRlc1RvU2hvdykgLyBzcGVjLnNsaWRlc1RvU2Nyb2xsKSArIDE7XG4gIH1cblxuICByZXR1cm4gZG90cztcbn07XG5cbnZhciBEb3RzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRG90cywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERvdHMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvdHMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEb3RzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEb3RzLCBbe1xuICAgIGtleTogXCJjbGlja0hhbmRsZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xpY2tIYW5kbGVyKG9wdGlvbnMsIGUpIHtcbiAgICAgIC8vIEluIEF1dG9wbGF5IHRoZSBmb2N1cyBzdGF5cyBvbiBjbGlja2VkIGJ1dHRvbiBldmVuIGFmdGVyIHRyYW5zaXRpb25cbiAgICAgIC8vIHRvIG5leHQgc2xpZGUuIFRoYXQgb25seSBnb2VzIGF3YXkgYnkgY2xpY2sgc29tZXdoZXJlIG91dHNpZGVcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucHJvcHMuY2xpY2tIYW5kbGVyKG9wdGlvbnMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGRvdENvdW50ID0gZ2V0RG90Q291bnQoe1xuICAgICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnQsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiB0aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsLFxuICAgICAgICBzbGlkZXNUb1Nob3c6IHRoaXMucHJvcHMuc2xpZGVzVG9TaG93LFxuICAgICAgICBpbmZpbml0ZTogdGhpcy5wcm9wcy5pbmZpbml0ZVxuICAgICAgfSk7IC8vIEFwcGx5IGpvaW4gJiBzcGxpdCB0byBBcnJheSB0byBwcmUtZmlsbCBpdCBmb3IgSUU4XG4gICAgICAvL1xuICAgICAgLy8gQ3JlZGl0OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMzczNTQyNS8xODQ5NDU4XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25Nb3VzZUVudGVyID0gX3RoaXMkcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VPdmVyID0gX3RoaXMkcHJvcHMub25Nb3VzZU92ZXIsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlID0gX3RoaXMkcHJvcHMub25Nb3VzZUxlYXZlO1xuICAgICAgdmFyIG1vdXNlRXZlbnRzID0ge1xuICAgICAgICBvbk1vdXNlRW50ZXI6IG9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZU92ZXI6IG9uTW91c2VPdmVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZVxuICAgICAgfTtcbiAgICAgIHZhciBkb3RzID0gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoZG90Q291bnQgKyAxKS5qb2luKFwiMFwiKS5zcGxpdChcIlwiKSkubWFwKGZ1bmN0aW9uICh4LCBpKSB7XG4gICAgICAgIHZhciBsZWZ0Qm91bmQgPSBpICogX3RoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIHZhciByaWdodEJvdW5kID0gaSAqIF90aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsICsgKF90aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsIC0gMSk7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKSh7XG4gICAgICAgICAgXCJzbGljay1hY3RpdmVcIjogX3RoaXMucHJvcHMuY3VycmVudFNsaWRlID49IGxlZnRCb3VuZCAmJiBfdGhpcy5wcm9wcy5jdXJyZW50U2xpZGUgPD0gcmlnaHRCb3VuZFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRvdE9wdGlvbnMgPSB7XG4gICAgICAgICAgbWVzc2FnZTogXCJkb3RzXCIsXG4gICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IF90aGlzLnByb3BzLnNsaWRlc1RvU2Nyb2xsLFxuICAgICAgICAgIGN1cnJlbnRTbGlkZTogX3RoaXMucHJvcHMuY3VycmVudFNsaWRlXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG9uQ2xpY2sgPSBfdGhpcy5jbGlja0hhbmRsZXIuYmluZChfdGhpcywgZG90T3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jbG9uZUVsZW1lbnQoX3RoaXMucHJvcHMuY3VzdG9tUGFnaW5nKGkpLCB7XG4gICAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmFwcGVuZERvdHMoZG90cyksIF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuZG90c0NsYXNzXG4gICAgICB9LCBtb3VzZUV2ZW50cykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEb3RzO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQpO1xuXG5leHBvcnRzLkRvdHMgPSBEb3RzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5OZXh0QXJyb3cgPSBleHBvcnRzLlByZXZBcnJvdyA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfaW5uZXJTbGlkZXJVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lubmVyU2xpZGVyVXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIFByZXZBcnJvdyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByZXZBcnJvdywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByZXZBcnJvdygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJldkFycm93KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUHJldkFycm93KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQcmV2QXJyb3csIFt7XG4gICAga2V5OiBcImNsaWNrSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGlja0hhbmRsZXIob3B0aW9ucywgZSkge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BzLmNsaWNrSGFuZGxlcihvcHRpb25zLCBlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBwcmV2Q2xhc3NlcyA9IHtcbiAgICAgICAgXCJzbGljay1hcnJvd1wiOiB0cnVlLFxuICAgICAgICBcInNsaWNrLXByZXZcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHZhciBwcmV2SGFuZGxlciA9IHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcywge1xuICAgICAgICBtZXNzYWdlOiBcInByZXZpb3VzXCJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMuaW5maW5pdGUgJiYgKHRoaXMucHJvcHMuY3VycmVudFNsaWRlID09PSAwIHx8IHRoaXMucHJvcHMuc2xpZGVDb3VudCA8PSB0aGlzLnByb3BzLnNsaWRlc1RvU2hvdykpIHtcbiAgICAgICAgcHJldkNsYXNzZXNbXCJzbGljay1kaXNhYmxlZFwiXSA9IHRydWU7XG4gICAgICAgIHByZXZIYW5kbGVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZBcnJvd1Byb3BzID0ge1xuICAgICAgICBrZXk6IFwiMFwiLFxuICAgICAgICBcImRhdGEtcm9sZVwiOiBcIm5vbmVcIixcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShwcmV2Q2xhc3NlcyksXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6IHByZXZIYW5kbGVyXG4gICAgICB9O1xuICAgICAgdmFyIGN1c3RvbVByb3BzID0ge1xuICAgICAgICBjdXJyZW50U2xpZGU6IHRoaXMucHJvcHMuY3VycmVudFNsaWRlLFxuICAgICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnRcbiAgICAgIH07XG4gICAgICB2YXIgcHJldkFycm93O1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5wcmV2QXJyb3cpIHtcbiAgICAgICAgcHJldkFycm93ID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5wcmV2QXJyb3csIF9vYmplY3RTcHJlYWQoe30sIHByZXZBcnJvd1Byb3BzLCB7fSwgY3VzdG9tUHJvcHMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXZBcnJvdyA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBfZXh0ZW5kcyh7XG4gICAgICAgICAga2V5OiBcIjBcIixcbiAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiXG4gICAgICAgIH0sIHByZXZBcnJvd1Byb3BzKSwgXCIgXCIsIFwiUHJldmlvdXNcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2QXJyb3c7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByZXZBcnJvdztcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50KTtcblxuZXhwb3J0cy5QcmV2QXJyb3cgPSBQcmV2QXJyb3c7XG5cbnZhciBOZXh0QXJyb3cgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoTmV4dEFycm93LCBfUmVhY3QkUHVyZUNvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIE5leHRBcnJvdygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV4dEFycm93KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTmV4dEFycm93KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhOZXh0QXJyb3csIFt7XG4gICAga2V5OiBcImNsaWNrSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGlja0hhbmRsZXIob3B0aW9ucywgZSkge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BzLmNsaWNrSGFuZGxlcihvcHRpb25zLCBlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBuZXh0Q2xhc3NlcyA9IHtcbiAgICAgICAgXCJzbGljay1hcnJvd1wiOiB0cnVlLFxuICAgICAgICBcInNsaWNrLW5leHRcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHZhciBuZXh0SGFuZGxlciA9IHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcywge1xuICAgICAgICBtZXNzYWdlOiBcIm5leHRcIlxuICAgICAgfSk7XG5cbiAgICAgIGlmICghKDAsIF9pbm5lclNsaWRlclV0aWxzLmNhbkdvTmV4dCkodGhpcy5wcm9wcykpIHtcbiAgICAgICAgbmV4dENsYXNzZXNbXCJzbGljay1kaXNhYmxlZFwiXSA9IHRydWU7XG4gICAgICAgIG5leHRIYW5kbGVyID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIG5leHRBcnJvd1Byb3BzID0ge1xuICAgICAgICBrZXk6IFwiMVwiLFxuICAgICAgICBcImRhdGEtcm9sZVwiOiBcIm5vbmVcIixcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShuZXh0Q2xhc3NlcyksXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6IG5leHRIYW5kbGVyXG4gICAgICB9O1xuICAgICAgdmFyIGN1c3RvbVByb3BzID0ge1xuICAgICAgICBjdXJyZW50U2xpZGU6IHRoaXMucHJvcHMuY3VycmVudFNsaWRlLFxuICAgICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnRcbiAgICAgIH07XG4gICAgICB2YXIgbmV4dEFycm93O1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5uZXh0QXJyb3cpIHtcbiAgICAgICAgbmV4dEFycm93ID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5uZXh0QXJyb3csIF9vYmplY3RTcHJlYWQoe30sIG5leHRBcnJvd1Byb3BzLCB7fSwgY3VzdG9tUHJvcHMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRBcnJvdyA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBfZXh0ZW5kcyh7XG4gICAgICAgICAga2V5OiBcIjFcIixcbiAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiXG4gICAgICAgIH0sIG5leHRBcnJvd1Byb3BzKSwgXCIgXCIsIFwiTmV4dFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHRBcnJvdztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTmV4dEFycm93O1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQpO1xuXG5leHBvcnRzLk5leHRBcnJvdyA9IE5leHRBcnJvdzsiLCJ2YXIgY2FtZWwyaHlwaGVuID0gcmVxdWlyZSgnc3RyaW5nLWNvbnZlcnQvY2FtZWwyaHlwaGVuJyk7XG5cbnZhciBpc0RpbWVuc2lvbiA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gIHZhciByZSA9IC9baGVpZ2h0fHdpZHRoXSQvO1xuICByZXR1cm4gcmUudGVzdChmZWF0dXJlKTtcbn07XG5cbnZhciBvYmoybXEgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBtcSA9ICcnO1xuICB2YXIgZmVhdHVyZXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlLCBpbmRleCkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtmZWF0dXJlXTtcbiAgICBmZWF0dXJlID0gY2FtZWwyaHlwaGVuKGZlYXR1cmUpO1xuICAgIC8vIEFkZCBweCB0byBkaW1lbnNpb24gZmVhdHVyZXNcbiAgICBpZiAoaXNEaW1lbnNpb24oZmVhdHVyZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZSArICdweCc7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgbXEgKz0gZmVhdHVyZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgbXEgKz0gJ25vdCAnICsgZmVhdHVyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXEgKz0gJygnICsgZmVhdHVyZSArICc6ICcgKyB2YWx1ZSArICcpJztcbiAgICB9XG4gICAgaWYgKGluZGV4IDwgZmVhdHVyZXMubGVuZ3RoLTEpIHtcbiAgICAgIG1xICs9ICcgYW5kICdcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbXE7XG59O1xuXG52YXIganNvbjJtcSA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB2YXIgbXEgPSAnJztcbiAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cbiAgLy8gSGFuZGxpbmcgYXJyYXkgb2YgbWVkaWEgcXVlcmllc1xuICBpZiAocXVlcnkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHF1ZXJ5LmZvckVhY2goZnVuY3Rpb24gKHEsIGluZGV4KSB7XG4gICAgICBtcSArPSBvYmoybXEocSk7XG4gICAgICBpZiAoaW5kZXggPCBxdWVyeS5sZW5ndGgtMSkge1xuICAgICAgICBtcSArPSAnLCAnXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1xO1xuICB9XG4gIC8vIEhhbmRsaW5nIHNpbmdsZSBtZWRpYSBxdWVyeVxuICByZXR1cm4gb2JqMm1xKHF1ZXJ5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ganNvbjJtcTsiLCJ2YXIgY2FtZWwyaHlwaGVuID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyXG4gICAgICAgICAgLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudG9Mb3dlckNhc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWwyaHlwaGVuOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gIGFmdGVyQ2hhbmdlOiBudWxsLFxuICBhcHBlbmREb3RzOiBmdW5jdGlvbiBhcHBlbmREb3RzKGRvdHMpIHtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICB9XG4gICAgfSwgZG90cyk7XG4gIH0sXG4gIGFycm93czogdHJ1ZSxcbiAgYXV0b3BsYXk6IGZhbHNlLFxuICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICBiZWZvcmVDaGFuZ2U6IG51bGwsXG4gIGNlbnRlck1vZGU6IGZhbHNlLFxuICBjZW50ZXJQYWRkaW5nOiBcIjUwcHhcIixcbiAgY2xhc3NOYW1lOiBcIlwiLFxuICBjc3NFYXNlOiBcImVhc2VcIixcbiAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbiBjdXN0b21QYWdpbmcoaSkge1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgbnVsbCwgaSArIDEpO1xuICB9LFxuICBkb3RzOiBmYWxzZSxcbiAgZG90c0NsYXNzOiBcInNsaWNrLWRvdHNcIixcbiAgZHJhZ2dhYmxlOiB0cnVlLFxuICBlYXNpbmc6IFwibGluZWFyXCIsXG4gIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgZmFkZTogZmFsc2UsXG4gIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICBpbmZpbml0ZTogdHJ1ZSxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBsYXp5TG9hZDogbnVsbCxcbiAgbmV4dEFycm93OiBudWxsLFxuICBvbkVkZ2U6IG51bGwsXG4gIG9uSW5pdDogbnVsbCxcbiAgb25MYXp5TG9hZEVycm9yOiBudWxsLFxuICBvblJlSW5pdDogbnVsbCxcbiAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gIHBhdXNlT25Gb2N1czogZmFsc2UsXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgcHJldkFycm93OiBudWxsLFxuICByZXNwb25zaXZlOiBudWxsLFxuICByb3dzOiAxLFxuICBydGw6IGZhbHNlLFxuICBzbGlkZTogXCJkaXZcIixcbiAgc2xpZGVzUGVyUm93OiAxLFxuICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgc2xpZGVzVG9TaG93OiAxLFxuICBzcGVlZDogNTAwLFxuICBzd2lwZTogdHJ1ZSxcbiAgc3dpcGVFdmVudDogbnVsbCxcbiAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgdG91Y2hNb3ZlOiB0cnVlLFxuICB0b3VjaFRocmVzaG9sZDogNSxcbiAgdXNlQ1NTOiB0cnVlLFxuICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICB2ZXJ0aWNhbDogZmFsc2UsXG4gIHdhaXRGb3JBbmltYXRlOiB0cnVlXG59O1xudmFyIF9kZWZhdWx0ID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCIvKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAocm9vdCwgcGx1cmFsaXplKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlLlxuICAgIG1vZHVsZS5leHBvcnRzID0gcGx1cmFsaXplKCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELCByZWdpc3RlcnMgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHBsdXJhbGl6ZSgpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsLlxuICAgIHJvb3QucGx1cmFsaXplID0gcGx1cmFsaXplKCk7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgLy8gUnVsZSBzdG9yYWdlIC0gcGx1cmFsaXplIGFuZCBzaW5ndWxhcml6ZSBuZWVkIHRvIGJlIHJ1biBzZXF1ZW50aWFsbHksXG4gIC8vIHdoaWxlIG90aGVyIHJ1bGVzIGNhbiBiZSBvcHRpbWl6ZWQgdXNpbmcgYW4gb2JqZWN0IGZvciBpbnN0YW50IGxvb2t1cHMuXG4gIHZhciBwbHVyYWxSdWxlcyA9IFtdO1xuICB2YXIgc2luZ3VsYXJSdWxlcyA9IFtdO1xuICB2YXIgdW5jb3VudGFibGVzID0ge307XG4gIHZhciBpcnJlZ3VsYXJQbHVyYWxzID0ge307XG4gIHZhciBpcnJlZ3VsYXJTaW5nbGVzID0ge307XG5cbiAgLyoqXG4gICAqIFNhbml0aXplIGEgcGx1cmFsaXphdGlvbiBydWxlIHRvIGEgdXNhYmxlIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICpcbiAgICogQHBhcmFtICB7KFJlZ0V4cHxzdHJpbmcpfSBydWxlXG4gICAqIEByZXR1cm4ge1JlZ0V4cH1cbiAgICovXG4gIGZ1bmN0aW9uIHNhbml0aXplUnVsZSAocnVsZSkge1xuICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHJ1bGUgKyAnJCcsICdpJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cblxuICAvKipcbiAgICogUGFzcyBpbiBhIHdvcmQgdG9rZW4gdG8gcHJvZHVjZSBhIGZ1bmN0aW9uIHRoYXQgY2FuIHJlcGxpY2F0ZSB0aGUgY2FzZSBvblxuICAgKiBhbm90aGVyIHdvcmQuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICB3b3JkXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICB0b2tlblxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIHJlc3RvcmVDYXNlICh3b3JkLCB0b2tlbikge1xuICAgIC8vIFRva2VucyBhcmUgYW4gZXhhY3QgbWF0Y2guXG4gICAgaWYgKHdvcmQgPT09IHRva2VuKSByZXR1cm4gdG9rZW47XG5cbiAgICAvLyBMb3dlciBjYXNlZCB3b3Jkcy4gRS5nLiBcImhlbGxvXCIuXG4gICAgaWYgKHdvcmQgPT09IHdvcmQudG9Mb3dlckNhc2UoKSkgcmV0dXJuIHRva2VuLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBVcHBlciBjYXNlZCB3b3Jkcy4gRS5nLiBcIldISVNLWVwiLlxuICAgIGlmICh3b3JkID09PSB3b3JkLnRvVXBwZXJDYXNlKCkpIHJldHVybiB0b2tlbi50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLy8gVGl0bGUgY2FzZWQgd29yZHMuIEUuZy4gXCJUaXRsZVwiLlxuICAgIGlmICh3b3JkWzBdID09PSB3b3JkWzBdLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiB0b2tlbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRva2VuLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8vIExvd2VyIGNhc2VkIHdvcmRzLiBFLmcuIFwidGVzdFwiLlxuICAgIHJldHVybiB0b2tlbi50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVycG9sYXRlIGEgcmVnZXhwIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAgICogQHBhcmFtICB7QXJyYXl9ICBhcmdzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlIChzdHIsIGFyZ3MpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcJChcXGR7MSwyfSkvZywgZnVuY3Rpb24gKG1hdGNoLCBpbmRleCkge1xuICAgICAgcmV0dXJuIGFyZ3NbaW5kZXhdIHx8ICcnO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgYSB3b3JkIHVzaW5nIGEgcnVsZS5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSB3b3JkXG4gICAqIEBwYXJhbSAge0FycmF5fSAgcnVsZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlICh3b3JkLCBydWxlKSB7XG4gICAgcmV0dXJuIHdvcmQucmVwbGFjZShydWxlWzBdLCBmdW5jdGlvbiAobWF0Y2gsIGluZGV4KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGUocnVsZVsxXSwgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKG1hdGNoID09PSAnJykge1xuICAgICAgICByZXR1cm4gcmVzdG9yZUNhc2Uod29yZFtpbmRleCAtIDFdLCByZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdG9yZUNhc2UobWF0Y2gsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2FuaXRpemUgYSB3b3JkIGJ5IHBhc3NpbmcgaW4gdGhlIHdvcmQgYW5kIHNhbml0aXphdGlvbiBydWxlcy5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgIHRva2VuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICB3b3JkXG4gICAqIEBwYXJhbSAge0FycmF5fSAgICBydWxlc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiBzYW5pdGl6ZVdvcmQgKHRva2VuLCB3b3JkLCBydWxlcykge1xuICAgIC8vIEVtcHR5IHN0cmluZyBvciBkb2Vzbid0IG5lZWQgZml4aW5nLlxuICAgIGlmICghdG9rZW4ubGVuZ3RoIHx8IHVuY291bnRhYmxlcy5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcbiAgICAgIHJldHVybiB3b3JkO1xuICAgIH1cblxuICAgIHZhciBsZW4gPSBydWxlcy5sZW5ndGg7XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIHNhbml0aXphdGlvbiBydWxlcyBhbmQgdXNlIHRoZSBmaXJzdCBvbmUgdG8gbWF0Y2guXG4gICAgd2hpbGUgKGxlbi0tKSB7XG4gICAgICB2YXIgcnVsZSA9IHJ1bGVzW2xlbl07XG5cbiAgICAgIGlmIChydWxlWzBdLnRlc3Qod29yZCkpIHJldHVybiByZXBsYWNlKHdvcmQsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiB3b3JkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgYSB3b3JkIHdpdGggdGhlIHVwZGF0ZWQgd29yZC5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgIHJlcGxhY2VNYXBcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgIGtlZXBNYXBcbiAgICogQHBhcmFtICB7QXJyYXl9ICAgIHJ1bGVzXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZVdvcmQgKHJlcGxhY2VNYXAsIGtlZXBNYXAsIHJ1bGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICAvLyBHZXQgdGhlIGNvcnJlY3QgdG9rZW4gYW5kIGNhc2UgcmVzdG9yYXRpb24gZnVuY3Rpb25zLlxuICAgICAgdmFyIHRva2VuID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAvLyBDaGVjayBhZ2FpbnN0IHRoZSBrZWVwIG9iamVjdCBtYXAuXG4gICAgICBpZiAoa2VlcE1hcC5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcbiAgICAgICAgcmV0dXJuIHJlc3RvcmVDYXNlKHdvcmQsIHRva2VuKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgYWdhaW5zdCB0aGUgcmVwbGFjZW1lbnQgbWFwIGZvciBhIGRpcmVjdCB3b3JkIHJlcGxhY2VtZW50LlxuICAgICAgaWYgKHJlcGxhY2VNYXAuaGFzT3duUHJvcGVydHkodG9rZW4pKSB7XG4gICAgICAgIHJldHVybiByZXN0b3JlQ2FzZSh3b3JkLCByZXBsYWNlTWFwW3Rva2VuXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJ1biBhbGwgdGhlIHJ1bGVzIGFnYWluc3QgdGhlIHdvcmQuXG4gICAgICByZXR1cm4gc2FuaXRpemVXb3JkKHRva2VuLCB3b3JkLCBydWxlcyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHdvcmQgaXMgcGFydCBvZiB0aGUgbWFwLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hlY2tXb3JkIChyZXBsYWNlTWFwLCBrZWVwTWFwLCBydWxlcywgYm9vbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAod29yZCkge1xuICAgICAgdmFyIHRva2VuID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAoa2VlcE1hcC5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHJlcGxhY2VNYXAuaGFzT3duUHJvcGVydHkodG9rZW4pKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBzYW5pdGl6ZVdvcmQodG9rZW4sIHRva2VuLCBydWxlcykgPT09IHRva2VuO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUGx1cmFsaXplIG9yIHNpbmd1bGFyaXplIGEgd29yZCBiYXNlZCBvbiB0aGUgcGFzc2VkIGluIGNvdW50LlxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICB3b3JkICAgICAgVGhlIHdvcmQgdG8gcGx1cmFsaXplXG4gICAqIEBwYXJhbSAge251bWJlcn0gIGNvdW50ICAgICBIb3cgbWFueSBvZiB0aGUgd29yZCBleGlzdFxuICAgKiBAcGFyYW0gIHtib29sZWFufSBpbmNsdXNpdmUgV2hldGhlciB0byBwcmVmaXggd2l0aCB0aGUgbnVtYmVyIChlLmcuIDMgZHVja3MpXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHBsdXJhbGl6ZSAod29yZCwgY291bnQsIGluY2x1c2l2ZSkge1xuICAgIHZhciBwbHVyYWxpemVkID0gY291bnQgPT09IDFcbiAgICAgID8gcGx1cmFsaXplLnNpbmd1bGFyKHdvcmQpIDogcGx1cmFsaXplLnBsdXJhbCh3b3JkKTtcblxuICAgIHJldHVybiAoaW5jbHVzaXZlID8gY291bnQgKyAnICcgOiAnJykgKyBwbHVyYWxpemVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFBsdXJhbGl6ZSBhIHdvcmQuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHBsdXJhbGl6ZS5wbHVyYWwgPSByZXBsYWNlV29yZChcbiAgICBpcnJlZ3VsYXJTaW5nbGVzLCBpcnJlZ3VsYXJQbHVyYWxzLCBwbHVyYWxSdWxlc1xuICApO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHdvcmQgaXMgcGx1cmFsLlxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqL1xuICBwbHVyYWxpemUuaXNQbHVyYWwgPSBjaGVja1dvcmQoXG4gICAgaXJyZWd1bGFyU2luZ2xlcywgaXJyZWd1bGFyUGx1cmFscywgcGx1cmFsUnVsZXNcbiAgKTtcblxuICAvKipcbiAgICogU2luZ3VsYXJpemUgYSB3b3JkLlxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqL1xuICBwbHVyYWxpemUuc2luZ3VsYXIgPSByZXBsYWNlV29yZChcbiAgICBpcnJlZ3VsYXJQbHVyYWxzLCBpcnJlZ3VsYXJTaW5nbGVzLCBzaW5ndWxhclJ1bGVzXG4gICk7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgd29yZCBpcyBzaW5ndWxhci5cbiAgICpcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgcGx1cmFsaXplLmlzU2luZ3VsYXIgPSBjaGVja1dvcmQoXG4gICAgaXJyZWd1bGFyUGx1cmFscywgaXJyZWd1bGFyU2luZ2xlcywgc2luZ3VsYXJSdWxlc1xuICApO1xuXG4gIC8qKlxuICAgKiBBZGQgYSBwbHVyYWxpemF0aW9uIHJ1bGUgdG8gdGhlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBydWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgICByZXBsYWNlbWVudFxuICAgKi9cbiAgcGx1cmFsaXplLmFkZFBsdXJhbFJ1bGUgPSBmdW5jdGlvbiAocnVsZSwgcmVwbGFjZW1lbnQpIHtcbiAgICBwbHVyYWxSdWxlcy5wdXNoKFtzYW5pdGl6ZVJ1bGUocnVsZSksIHJlcGxhY2VtZW50XSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhIHNpbmd1bGFyaXphdGlvbiBydWxlIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcnVsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgcmVwbGFjZW1lbnRcbiAgICovXG4gIHBsdXJhbGl6ZS5hZGRTaW5ndWxhclJ1bGUgPSBmdW5jdGlvbiAocnVsZSwgcmVwbGFjZW1lbnQpIHtcbiAgICBzaW5ndWxhclJ1bGVzLnB1c2goW3Nhbml0aXplUnVsZShydWxlKSwgcmVwbGFjZW1lbnRdKTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIGFuIHVuY291bnRhYmxlIHdvcmQgcnVsZS5cbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHdvcmRcbiAgICovXG4gIHBsdXJhbGl6ZS5hZGRVbmNvdW50YWJsZVJ1bGUgPSBmdW5jdGlvbiAod29yZCkge1xuICAgIGlmICh0eXBlb2Ygd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHVuY291bnRhYmxlc1t3b3JkLnRvTG93ZXJDYXNlKCldID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTZXQgc2luZ3VsYXIgYW5kIHBsdXJhbCByZWZlcmVuY2VzIGZvciB0aGUgd29yZC5cbiAgICBwbHVyYWxpemUuYWRkUGx1cmFsUnVsZSh3b3JkLCAnJDAnKTtcbiAgICBwbHVyYWxpemUuYWRkU2luZ3VsYXJSdWxlKHdvcmQsICckMCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYW4gaXJyZWd1bGFyIHdvcmQgZGVmaW5pdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNpbmdsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1cmFsXG4gICAqL1xuICBwbHVyYWxpemUuYWRkSXJyZWd1bGFyUnVsZSA9IGZ1bmN0aW9uIChzaW5nbGUsIHBsdXJhbCkge1xuICAgIHBsdXJhbCA9IHBsdXJhbC50b0xvd2VyQ2FzZSgpO1xuICAgIHNpbmdsZSA9IHNpbmdsZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaXJyZWd1bGFyU2luZ2xlc1tzaW5nbGVdID0gcGx1cmFsO1xuICAgIGlycmVndWxhclBsdXJhbHNbcGx1cmFsXSA9IHNpbmdsZTtcbiAgfTtcblxuICAvKipcbiAgICogSXJyZWd1bGFyIHJ1bGVzLlxuICAgKi9cbiAgW1xuICAgIC8vIFByb25vdW5zLlxuICAgIFsnSScsICd3ZSddLFxuICAgIFsnbWUnLCAndXMnXSxcbiAgICBbJ2hlJywgJ3RoZXknXSxcbiAgICBbJ3NoZScsICd0aGV5J10sXG4gICAgWyd0aGVtJywgJ3RoZW0nXSxcbiAgICBbJ215c2VsZicsICdvdXJzZWx2ZXMnXSxcbiAgICBbJ3lvdXJzZWxmJywgJ3lvdXJzZWx2ZXMnXSxcbiAgICBbJ2l0c2VsZicsICd0aGVtc2VsdmVzJ10sXG4gICAgWydoZXJzZWxmJywgJ3RoZW1zZWx2ZXMnXSxcbiAgICBbJ2hpbXNlbGYnLCAndGhlbXNlbHZlcyddLFxuICAgIFsndGhlbXNlbGYnLCAndGhlbXNlbHZlcyddLFxuICAgIFsnaXMnLCAnYXJlJ10sXG4gICAgWyd3YXMnLCAnd2VyZSddLFxuICAgIFsnaGFzJywgJ2hhdmUnXSxcbiAgICBbJ3RoaXMnLCAndGhlc2UnXSxcbiAgICBbJ3RoYXQnLCAndGhvc2UnXSxcbiAgICAvLyBXb3JkcyBlbmRpbmcgaW4gd2l0aCBhIGNvbnNvbmFudCBhbmQgYG9gLlxuICAgIFsnZWNobycsICdlY2hvZXMnXSxcbiAgICBbJ2RpbmdvJywgJ2RpbmdvZXMnXSxcbiAgICBbJ3ZvbGNhbm8nLCAndm9sY2Fub2VzJ10sXG4gICAgWyd0b3JuYWRvJywgJ3Rvcm5hZG9lcyddLFxuICAgIFsndG9ycGVkbycsICd0b3JwZWRvZXMnXSxcbiAgICAvLyBFbmRzIHdpdGggYHVzYC5cbiAgICBbJ2dlbnVzJywgJ2dlbmVyYSddLFxuICAgIFsndmlzY3VzJywgJ3Zpc2NlcmEnXSxcbiAgICAvLyBFbmRzIHdpdGggYG1hYC5cbiAgICBbJ3N0aWdtYScsICdzdGlnbWF0YSddLFxuICAgIFsnc3RvbWEnLCAnc3RvbWF0YSddLFxuICAgIFsnZG9nbWEnLCAnZG9nbWF0YSddLFxuICAgIFsnbGVtbWEnLCAnbGVtbWF0YSddLFxuICAgIFsnc2NoZW1hJywgJ3NjaGVtYXRhJ10sXG4gICAgWydhbmF0aGVtYScsICdhbmF0aGVtYXRhJ10sXG4gICAgLy8gT3RoZXIgaXJyZWd1bGFyIHJ1bGVzLlxuICAgIFsnb3gnLCAnb3hlbiddLFxuICAgIFsnYXhlJywgJ2F4ZXMnXSxcbiAgICBbJ2RpZScsICdkaWNlJ10sXG4gICAgWyd5ZXMnLCAneWVzZXMnXSxcbiAgICBbJ2Zvb3QnLCAnZmVldCddLFxuICAgIFsnZWF2ZScsICdlYXZlcyddLFxuICAgIFsnZ29vc2UnLCAnZ2Vlc2UnXSxcbiAgICBbJ3Rvb3RoJywgJ3RlZXRoJ10sXG4gICAgWydxdWl6JywgJ3F1aXp6ZXMnXSxcbiAgICBbJ2h1bWFuJywgJ2h1bWFucyddLFxuICAgIFsncHJvb2YnLCAncHJvb2ZzJ10sXG4gICAgWydjYXJ2ZScsICdjYXJ2ZXMnXSxcbiAgICBbJ3ZhbHZlJywgJ3ZhbHZlcyddLFxuICAgIFsnbG9vZXknLCAnbG9vaWVzJ10sXG4gICAgWyd0aGllZicsICd0aGlldmVzJ10sXG4gICAgWydncm9vdmUnLCAnZ3Jvb3ZlcyddLFxuICAgIFsncGlja2F4ZScsICdwaWNrYXhlcyddLFxuICAgIFsncGFzc2VyYnknLCAncGFzc2Vyc2J5J11cbiAgXS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcmV0dXJuIHBsdXJhbGl6ZS5hZGRJcnJlZ3VsYXJSdWxlKHJ1bGVbMF0sIHJ1bGVbMV0pO1xuICB9KTtcblxuICAvKipcbiAgICogUGx1cmFsaXphdGlvbiBydWxlcy5cbiAgICovXG4gIFtcbiAgICBbL3M/JC9pLCAncyddLFxuICAgIFsvW15cXHUwMDAwLVxcdTAwN0ZdJC9pLCAnJDAnXSxcbiAgICBbLyhbXmFlaW91XWVzZSkkL2ksICckMSddLFxuICAgIFsvKGF4fHRlc3QpaXMkL2ksICckMWVzJ10sXG4gICAgWy8oYWxpYXN8W15hb3VddXN8dFtsbV1hc3xnYXN8cmlzKSQvaSwgJyQxZXMnXSxcbiAgICBbLyhlW21uXXUpcz8kL2ksICckMXMnXSxcbiAgICBbLyhbXmxdaWFzfFthZWlvdV1sYXN8W2VqenJdYXN8W2l1XWFtKSQvaSwgJyQxJ10sXG4gICAgWy8oYWx1bW58c3lsbGFifHZpcnxyYWRpfG51Y2xlfGZ1bmd8Y2FjdHxzdGltdWx8dGVybWlufGJhY2lsbHxmb2N8dXRlcnxsb2N8c3RyYXQpKD86dXN8aSkkL2ksICckMWknXSxcbiAgICBbLyhhbHVtbnxhbGd8dmVydGVicikoPzphfGFlKSQvaSwgJyQxYWUnXSxcbiAgICBbLyhzZXJhcGh8Y2hlcnViKSg/OmltKT8kL2ksICckMWltJ10sXG4gICAgWy8oaGVyfGF0fGdyKW8kL2ksICckMW9lcyddLFxuICAgIFsvKGFnZW5kfGFkZGVuZHxtaWxsZW5uaXxkYXR8ZXh0cmVtfGJhY3Rlcml8ZGVzaWRlcmF0fHN0cmF0fGNhbmRlbGFicnxlcnJhdHxvdnxzeW1wb3NpfGN1cnJpY3VsfGF1dG9tYXR8cXVvcikoPzphfHVtKSQvaSwgJyQxYSddLFxuICAgIFsvKGFwaGVsaXxoeXBlcmJhdHxwZXJpaGVsaXxhc3luZGV0fG5vdW1lbnxwaGVub21lbnxjcml0ZXJpfG9yZ2FufHByb2xlZ29tZW58aGVkcnxhdXRvbWF0KSg/OmF8b24pJC9pLCAnJDFhJ10sXG4gICAgWy9zaXMkL2ksICdzZXMnXSxcbiAgICBbLyg/Oihrbml8d2l8bGkpZmV8KGFyfGx8ZWF8ZW98b2F8aG9vKWYpJC9pLCAnJDEkMnZlcyddLFxuICAgIFsvKFteYWVpb3V5XXxxdSl5JC9pLCAnJDFpZXMnXSxcbiAgICBbLyhbXmNoXVtpZW9dW2xuXSlleSQvaSwgJyQxaWVzJ10sXG4gICAgWy8oeHxjaHxzc3xzaHx6eikkL2ksICckMWVzJ10sXG4gICAgWy8obWF0cnxjb2R8bXVyfHNpbHx2ZXJ0fGluZHxhcHBlbmQpKD86aXh8ZXgpJC9pLCAnJDFpY2VzJ10sXG4gICAgWy9cXGIoKD86dGl0KT9tfGwpKD86aWNlfG91c2UpJC9pLCAnJDFpY2UnXSxcbiAgICBbLyhwZSkoPzpyc29ufG9wbGUpJC9pLCAnJDFvcGxlJ10sXG4gICAgWy8oY2hpbGQpKD86cmVuKT8kL2ksICckMXJlbiddLFxuICAgIFsvZWF1eCQvaSwgJyQwJ10sXG4gICAgWy9tW2FlXW4kL2ksICdtZW4nXSxcbiAgICBbJ3Rob3UnLCAneW91J11cbiAgXS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcmV0dXJuIHBsdXJhbGl6ZS5hZGRQbHVyYWxSdWxlKHJ1bGVbMF0sIHJ1bGVbMV0pO1xuICB9KTtcblxuICAvKipcbiAgICogU2luZ3VsYXJpemF0aW9uIHJ1bGVzLlxuICAgKi9cbiAgW1xuICAgIFsvcyQvaSwgJyddLFxuICAgIFsvKHNzKSQvaSwgJyQxJ10sXG4gICAgWy8od2l8a25pfCg/OmFmdGVyfGhhbGZ8aGlnaHxsb3d8bWlkfG5vbnxuaWdodHxbXlxcd118XilsaSl2ZXMkL2ksICckMWZlJ10sXG4gICAgWy8oYXJ8KD86d298W2FlXSlsfFtlb11bYW9dKXZlcyQvaSwgJyQxZiddLFxuICAgIFsvaWVzJC9pLCAneSddLFxuICAgIFsvXFxiKFtwbF18em9tYnwoPzpuZWNrfGNyb3NzKT90fGNvbGx8ZmFlcnxmb29kfGdlbnxnb29ufGdyb3VwfGxhc3N8dGFsa3xnb2FsfGN1dClpZXMkL2ksICckMWllJ10sXG4gICAgWy9cXGIobW9ufHNtaWwpaWVzJC9pLCAnJDFleSddLFxuICAgIFsvXFxiKCg/OnRpdCk/bXxsKWljZSQvaSwgJyQxb3VzZSddLFxuICAgIFsvKHNlcmFwaHxjaGVydWIpaW0kL2ksICckMSddLFxuICAgIFsvKHh8Y2h8c3N8c2h8enp8dHRvfGdvfGNob3xhbGlhc3xbXmFvdV11c3x0W2xtXWFzfGdhc3woPzpoZXJ8YXR8Z3Ipb3xbYWVpb3VdcmlzKSg/OmVzKT8kL2ksICckMSddLFxuICAgIFsvKGFuYWx5fGRpYWdub3xwYXJlbnRoZXxwcm9nbm98c3lub3B8dGhlfGVtcGhhfGNyaXxuZSkoPzpzaXN8c2VzKSQvaSwgJyQxc2lzJ10sXG4gICAgWy8obW92aWV8dHdlbHZlfGFidXNlfGVbbW5ddSlzJC9pLCAnJDEnXSxcbiAgICBbLyh0ZXN0KSg/OmlzfGVzKSQvaSwgJyQxaXMnXSxcbiAgICBbLyhhbHVtbnxzeWxsYWJ8dmlyfHJhZGl8bnVjbGV8ZnVuZ3xjYWN0fHN0aW11bHx0ZXJtaW58YmFjaWxsfGZvY3x1dGVyfGxvY3xzdHJhdCkoPzp1c3xpKSQvaSwgJyQxdXMnXSxcbiAgICBbLyhhZ2VuZHxhZGRlbmR8bWlsbGVubml8ZGF0fGV4dHJlbXxiYWN0ZXJpfGRlc2lkZXJhdHxzdHJhdHxjYW5kZWxhYnJ8ZXJyYXR8b3Z8c3ltcG9zaXxjdXJyaWN1bHxxdW9yKWEkL2ksICckMXVtJ10sXG4gICAgWy8oYXBoZWxpfGh5cGVyYmF0fHBlcmloZWxpfGFzeW5kZXR8bm91bWVufHBoZW5vbWVufGNyaXRlcml8b3JnYW58cHJvbGVnb21lbnxoZWRyfGF1dG9tYXQpYSQvaSwgJyQxb24nXSxcbiAgICBbLyhhbHVtbnxhbGd8dmVydGVicilhZSQvaSwgJyQxYSddLFxuICAgIFsvKGNvZHxtdXJ8c2lsfHZlcnR8aW5kKWljZXMkL2ksICckMWV4J10sXG4gICAgWy8obWF0cnxhcHBlbmQpaWNlcyQvaSwgJyQxaXgnXSxcbiAgICBbLyhwZSkocnNvbnxvcGxlKSQvaSwgJyQxcnNvbiddLFxuICAgIFsvKGNoaWxkKXJlbiQvaSwgJyQxJ10sXG4gICAgWy8oZWF1KXg/JC9pLCAnJDEnXSxcbiAgICBbL21lbiQvaSwgJ21hbiddXG4gIF0uZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgIHJldHVybiBwbHVyYWxpemUuYWRkU2luZ3VsYXJSdWxlKHJ1bGVbMF0sIHJ1bGVbMV0pO1xuICB9KTtcblxuICAvKipcbiAgICogVW5jb3VudGFibGUgcnVsZXMuXG4gICAqL1xuICBbXG4gICAgLy8gU2luZ3VsYXIgd29yZHMgd2l0aCBubyBwbHVyYWxzLlxuICAgICdhZHVsdGhvb2QnLFxuICAgICdhZHZpY2UnLFxuICAgICdhZ2VuZGEnLFxuICAgICdhaWQnLFxuICAgICdhaXJjcmFmdCcsXG4gICAgJ2FsY29ob2wnLFxuICAgICdhbW1vJyxcbiAgICAnYW5hbHl0aWNzJyxcbiAgICAnYW5pbWUnLFxuICAgICdhdGhsZXRpY3MnLFxuICAgICdhdWRpbycsXG4gICAgJ2Jpc29uJyxcbiAgICAnYmxvb2QnLFxuICAgICdicmVhbScsXG4gICAgJ2J1ZmZhbG8nLFxuICAgICdidXR0ZXInLFxuICAgICdjYXJwJyxcbiAgICAnY2FzaCcsXG4gICAgJ2NoYXNzaXMnLFxuICAgICdjaGVzcycsXG4gICAgJ2Nsb3RoaW5nJyxcbiAgICAnY29kJyxcbiAgICAnY29tbWVyY2UnLFxuICAgICdjb29wZXJhdGlvbicsXG4gICAgJ2NvcnBzJyxcbiAgICAnZGVicmlzJyxcbiAgICAnZGlhYmV0ZXMnLFxuICAgICdkaWdlc3Rpb24nLFxuICAgICdlbGsnLFxuICAgICdlbmVyZ3knLFxuICAgICdlcXVpcG1lbnQnLFxuICAgICdleGNyZXRpb24nLFxuICAgICdleHBlcnRpc2UnLFxuICAgICdmaXJtd2FyZScsXG4gICAgJ2Zsb3VuZGVyJyxcbiAgICAnZnVuJyxcbiAgICAnZ2FsbG93cycsXG4gICAgJ2dhcmJhZ2UnLFxuICAgICdncmFmZml0aScsXG4gICAgJ2hhcmR3YXJlJyxcbiAgICAnaGVhZHF1YXJ0ZXJzJyxcbiAgICAnaGVhbHRoJyxcbiAgICAnaGVycGVzJyxcbiAgICAnaGlnaGppbmtzJyxcbiAgICAnaG9tZXdvcmsnLFxuICAgICdob3VzZXdvcmsnLFxuICAgICdpbmZvcm1hdGlvbicsXG4gICAgJ2plYW5zJyxcbiAgICAnanVzdGljZScsXG4gICAgJ2t1ZG9zJyxcbiAgICAnbGFib3VyJyxcbiAgICAnbGl0ZXJhdHVyZScsXG4gICAgJ21hY2hpbmVyeScsXG4gICAgJ21hY2tlcmVsJyxcbiAgICAnbWFpbCcsXG4gICAgJ21lZGlhJyxcbiAgICAnbWV3cycsXG4gICAgJ21vb3NlJyxcbiAgICAnbXVzaWMnLFxuICAgICdtdWQnLFxuICAgICdtYW5nYScsXG4gICAgJ25ld3MnLFxuICAgICdvbmx5JyxcbiAgICAncGVyc29ubmVsJyxcbiAgICAncGlrZScsXG4gICAgJ3BsYW5rdG9uJyxcbiAgICAncGxpZXJzJyxcbiAgICAncG9saWNlJyxcbiAgICAncG9sbHV0aW9uJyxcbiAgICAncHJlbWlzZXMnLFxuICAgICdyYWluJyxcbiAgICAncmVzZWFyY2gnLFxuICAgICdyaWNlJyxcbiAgICAnc2FsbW9uJyxcbiAgICAnc2Npc3NvcnMnLFxuICAgICdzZXJpZXMnLFxuICAgICdzZXdhZ2UnLFxuICAgICdzaGFtYmxlcycsXG4gICAgJ3NocmltcCcsXG4gICAgJ3NvZnR3YXJlJyxcbiAgICAnc3BlY2llcycsXG4gICAgJ3N0YWZmJyxcbiAgICAnc3dpbmUnLFxuICAgICd0ZW5uaXMnLFxuICAgICd0cmFmZmljJyxcbiAgICAndHJhbnNwb3J0YXRpb24nLFxuICAgICd0cm91dCcsXG4gICAgJ3R1bmEnLFxuICAgICd3ZWFsdGgnLFxuICAgICd3ZWxmYXJlJyxcbiAgICAnd2hpdGluZycsXG4gICAgJ3dpbGRlYmVlc3QnLFxuICAgICd3aWxkbGlmZScsXG4gICAgJ3lvdScsXG4gICAgL3Bva1tlw6ldbW9uJC9pLFxuICAgIC8vIFJlZ2V4ZXMuXG4gICAgL1teYWVpb3VdZXNlJC9pLCAvLyBcImNoaW5lc2VcIiwgXCJqYXBhbmVzZVwiXG4gICAgL2RlZXIkL2ksIC8vIFwiZGVlclwiLCBcInJlaW5kZWVyXCJcbiAgICAvZmlzaCQvaSwgLy8gXCJmaXNoXCIsIFwiYmxvd2Zpc2hcIiwgXCJhbmdlbGZpc2hcIlxuICAgIC9tZWFzbGVzJC9pLFxuICAgIC9vW2l1XXMkL2ksIC8vIFwiY2Fybml2b3JvdXNcIlxuICAgIC9wb3gkL2ksIC8vIFwiY2hpY2twb3hcIiwgXCJzbWFsbHBveFwiXG4gICAgL3NoZWVwJC9pXG4gIF0uZm9yRWFjaChwbHVyYWxpemUuYWRkVW5jb3VudGFibGVSdWxlKTtcblxuICByZXR1cm4gcGx1cmFsaXplO1xufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmlsbFJlZiA9IGZpbGxSZWY7XG5leHBvcnRzLmNvbXBvc2VSZWYgPSBjb21wb3NlUmVmO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIGZpbGxSZWYocmVmLCBub2RlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG5vZGUpO1xuICB9IGVsc2UgaWYgKF90eXBlb2YocmVmKSA9PT0gJ29iamVjdCcgJiYgcmVmICYmICdjdXJyZW50JyBpbiByZWYpIHtcbiAgICByZWYuY3VycmVudCA9IG5vZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9zZVJlZigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlZnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVmc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJlZnMuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgICBmaWxsUmVmKHJlZiwgbm9kZSk7XG4gICAgfSk7XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvd2FybmluZ1wiKSk7XG5cbnZhciBfQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQmFzZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG5cbiAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgfVxuXG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuXG52YXIgVGV4dCA9IGZ1bmN0aW9uIFRleHQoX2EpIHtcbiAgdmFyIGVsbGlwc2lzID0gX2EuZWxsaXBzaXMsXG4gICAgICByZXN0UHJvcHMgPSBfX3Jlc3QoX2EsIFtcImVsbGlwc2lzXCJdKTtcblxuICAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKShfdHlwZW9mKGVsbGlwc2lzKSAhPT0gJ29iamVjdCcsICdUeXBvZ3JhcGh5LlRleHQnLCAnYGVsbGlwc2lzYCBvbmx5IHN1cHBvcnRzIGJvb2xlYW4gdmFsdWUuJyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQmFzZVtcImRlZmF1bHRcIl0sIF9leHRlbmRzKHt9LCByZXN0UHJvcHMsIHtcbiAgICBlbGxpcHNpczogISFlbGxpcHNpcyxcbiAgICBjb21wb25lbnQ6IFwic3BhblwiXG4gIH0pKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IFRleHQ7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZGVzZWxlY3RDdXJyZW50ID0gcmVxdWlyZShcInRvZ2dsZS1zZWxlY3Rpb25cIik7XG5cbnZhciBjbGlwYm9hcmRUb0lFMTFGb3JtYXR0aW5nID0ge1xuICBcInRleHQvcGxhaW5cIjogXCJUZXh0XCIsXG4gIFwidGV4dC9odG1sXCI6IFwiVXJsXCIsXG4gIFwiZGVmYXVsdFwiOiBcIlRleHRcIlxufVxuXG52YXIgZGVmYXVsdE1lc3NhZ2UgPSBcIkNvcHkgdG8gY2xpcGJvYXJkOiAje2tleX0sIEVudGVyXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdChtZXNzYWdlKSB7XG4gIHZhciBjb3B5S2V5ID0gKC9tYWMgb3MgeC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPyBcIuKMmFwiIDogXCJDdHJsXCIpICsgXCIrQ1wiO1xuICByZXR1cm4gbWVzc2FnZS5yZXBsYWNlKC8je1xccyprZXlcXHMqfS9nLCBjb3B5S2V5KTtcbn1cblxuZnVuY3Rpb24gY29weSh0ZXh0LCBvcHRpb25zKSB7XG4gIHZhciBkZWJ1ZyxcbiAgICBtZXNzYWdlLFxuICAgIHJlc2VsZWN0UHJldmlvdXMsXG4gICAgcmFuZ2UsXG4gICAgc2VsZWN0aW9uLFxuICAgIG1hcmssXG4gICAgc3VjY2VzcyA9IGZhbHNlO1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZGVidWcgPSBvcHRpb25zLmRlYnVnIHx8IGZhbHNlO1xuICB0cnkge1xuICAgIHJlc2VsZWN0UHJldmlvdXMgPSBkZXNlbGVjdEN1cnJlbnQoKTtcblxuICAgIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcblxuICAgIG1hcmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBtYXJrLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAvLyByZXNldCB1c2VyIHN0eWxlcyBmb3Igc3BhbiBlbGVtZW50XG4gICAgbWFyay5zdHlsZS5hbGwgPSBcInVuc2V0XCI7XG4gICAgLy8gcHJldmVudHMgc2Nyb2xsaW5nIHRvIHRoZSBlbmQgb2YgdGhlIHBhZ2VcbiAgICBtYXJrLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIG1hcmsuc3R5bGUudG9wID0gMDtcbiAgICBtYXJrLnN0eWxlLmNsaXAgPSBcInJlY3QoMCwgMCwgMCwgMClcIjtcbiAgICAvLyB1c2VkIHRvIHByZXNlcnZlIHNwYWNlcyBhbmQgbGluZSBicmVha3NcbiAgICBtYXJrLnN0eWxlLndoaXRlU3BhY2UgPSBcInByZVwiO1xuICAgIC8vIGRvIG5vdCBpbmhlcml0IHVzZXItc2VsZWN0IChpdCBtYXkgYmUgYG5vbmVgKVxuICAgIG1hcmsuc3R5bGUud2Via2l0VXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUuTW96VXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUubXNVc2VyU2VsZWN0ID0gXCJ0ZXh0XCI7XG4gICAgbWFyay5zdHlsZS51c2VyU2VsZWN0ID0gXCJ0ZXh0XCI7XG4gICAgbWFyay5hZGRFdmVudExpc3RlbmVyKFwiY29weVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBlLmNsaXBib2FyZERhdGEgPT09IFwidW5kZWZpbmVkXCIpIHsgLy8gSUUgMTFcbiAgICAgICAgICBkZWJ1ZyAmJiBjb25zb2xlLndhcm4oXCJ1bmFibGUgdG8gdXNlIGUuY2xpcGJvYXJkRGF0YVwiKTtcbiAgICAgICAgICBkZWJ1ZyAmJiBjb25zb2xlLndhcm4oXCJ0cnlpbmcgSUUgc3BlY2lmaWMgc3R1ZmZcIik7XG4gICAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuY2xlYXJEYXRhKCk7XG4gICAgICAgICAgdmFyIGZvcm1hdCA9IGNsaXBib2FyZFRvSUUxMUZvcm1hdHRpbmdbb3B0aW9ucy5mb3JtYXRdIHx8IGNsaXBib2FyZFRvSUUxMUZvcm1hdHRpbmdbXCJkZWZhdWx0XCJdXG4gICAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YShmb3JtYXQsIHRleHQpO1xuICAgICAgICB9IGVsc2UgeyAvLyBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgICBlLmNsaXBib2FyZERhdGEuY2xlYXJEYXRhKCk7XG4gICAgICAgICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEob3B0aW9ucy5mb3JtYXQsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5vbkNvcHkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBvcHRpb25zLm9uQ29weShlLmNsaXBib2FyZERhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtYXJrKTtcblxuICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhtYXJrKTtcbiAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuXG4gICAgdmFyIHN1Y2Nlc3NmdWwgPSBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgaWYgKCFzdWNjZXNzZnVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3B5IGNvbW1hbmQgd2FzIHVuc3VjY2Vzc2Z1bFwiKTtcbiAgICB9XG4gICAgc3VjY2VzcyA9IHRydWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJ1bmFibGUgdG8gY29weSB1c2luZyBleGVjQ29tbWFuZDogXCIsIGVycik7XG4gICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidHJ5aW5nIElFIHNwZWNpZmljIHN0dWZmXCIpO1xuICAgIHRyeSB7XG4gICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YS5zZXREYXRhKG9wdGlvbnMuZm9ybWF0IHx8IFwidGV4dFwiLCB0ZXh0KTtcbiAgICAgIG9wdGlvbnMub25Db3B5ICYmIG9wdGlvbnMub25Db3B5KHdpbmRvdy5jbGlwYm9hcmREYXRhKTtcbiAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZGVidWcgJiYgY29uc29sZS5lcnJvcihcInVuYWJsZSB0byBjb3B5IHVzaW5nIGNsaXBib2FyZERhdGE6IFwiLCBlcnIpO1xuICAgICAgZGVidWcgJiYgY29uc29sZS5lcnJvcihcImZhbGxpbmcgYmFjayB0byBwcm9tcHRcIik7XG4gICAgICBtZXNzYWdlID0gZm9ybWF0KFwibWVzc2FnZVwiIGluIG9wdGlvbnMgPyBvcHRpb25zLm1lc3NhZ2UgOiBkZWZhdWx0TWVzc2FnZSk7XG4gICAgICB3aW5kb3cucHJvbXB0KG1lc3NhZ2UsIHRleHQpO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdGlvbi5yZW1vdmVSYW5nZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZVJhbmdlKHJhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWFyaykge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChtYXJrKTtcbiAgICB9XG4gICAgcmVzZWxlY3RQcmV2aW91cygpO1xuICB9XG5cbiAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weTtcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuICB2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICB2YXIgcmFuZ2VzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0aW9uLnJhbmdlQ291bnQ7IGkrKykge1xuICAgIHJhbmdlcy5wdXNoKHNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0aXZlLnRhZ05hbWUudG9VcHBlckNhc2UoKSkgeyAvLyAudG9VcHBlckNhc2UgaGFuZGxlcyBYSFRNTFxuICAgIGNhc2UgJ0lOUFVUJzpcbiAgICBjYXNlICdURVhUQVJFQSc6XG4gICAgICBhY3RpdmUuYmx1cigpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHNlbGVjdGlvbi50eXBlID09PSAnQ2FyZXQnICYmXG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGFjdGl2ZSAmJlxuICAgIGFjdGl2ZS5mb2N1cygpO1xuICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfS2V5Q29kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXV0aWwvbGliL0tleUNvZGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG4vKipcbiAqIFdyYXAgb2Ygc3ViIGNvbXBvbmVudCB3aGljaCBuZWVkIHVzZSBhcyBCdXR0b24gY2FwYWNpdHkgKGxpa2UgSWNvbiBjb21wb25lbnQpLlxuICogVGhpcyBoZWxwcyBhY2Nlc3NpYmlsaXR5IHJlYWRlciB0byB0cmVhZCBhcyBhIGludGVyYWN0aXZlIGJ1dHRvbiB0byBvcGVyYXRpb24uXG4gKi9cblxuXG52YXIgaW5saW5lU3R5bGUgPSB7XG4gIGJvcmRlcjogMCxcbiAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgcGFkZGluZzogMCxcbiAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xufTtcblxudmFyIFRyYW5zQnV0dG9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc0J1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUcmFuc0J1dHRvbik7XG5cbiAgZnVuY3Rpb24gVHJhbnNCdXR0b24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zQnV0dG9uKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBfdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcblxuICAgICAgaWYgKGtleUNvZGUgPT09IF9LZXlDb2RlW1wiZGVmYXVsdFwiXS5FTlRFUikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbktleVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgICB2YXIgb25DbGljayA9IF90aGlzLnByb3BzLm9uQ2xpY2s7XG5cbiAgICAgIGlmIChrZXlDb2RlID09PSBfS2V5Q29kZVtcImRlZmF1bHRcIl0uRU5URVIgJiYgb25DbGljaykge1xuICAgICAgICBvbkNsaWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNldFJlZiA9IGZ1bmN0aW9uIChidG4pIHtcbiAgICAgIF90aGlzLmRpdiA9IGJ0bjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRyYW5zQnV0dG9uLCBbe1xuICAgIGtleTogXCJmb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgIGlmICh0aGlzLmRpdikge1xuICAgICAgICB0aGlzLmRpdi5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJibHVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgICBpZiAodGhpcy5kaXYpIHtcbiAgICAgICAgdGhpcy5kaXYuYmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBzdHlsZSA9IF9hLnN0eWxlLFxuICAgICAgICAgIG5vU3R5bGUgPSBfYS5ub1N0eWxlLFxuICAgICAgICAgIHJlc3RQcm9wcyA9IF9fcmVzdChfYSwgW1wic3R5bGVcIiwgXCJub1N0eWxlXCJdKTtcblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgICAgcm9sZTogXCJidXR0b25cIixcbiAgICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAgIHJlZjogdGhpcy5zZXRSZWZcbiAgICAgIH0sIHJlc3RQcm9wcywge1xuICAgICAgICBvbktleURvd246IHRoaXMub25LZXlEb3duLFxuICAgICAgICBvbktleVVwOiB0aGlzLm9uS2V5VXAsXG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgIW5vU3R5bGUgPyBpbmxpbmVTdHlsZSA6IG51bGwpLCBzdHlsZSlcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHJhbnNCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnZhciBfZGVmYXVsdCA9IFRyYW5zQnV0dG9uO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX0tleUNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9LZXlDb2RlXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX2ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9pY29uXCIpKTtcblxudmFyIF9UZXh0QXJlYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2lucHV0L1RleHRBcmVhXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbnZhciBFZGl0YWJsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRWRpdGFibGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRWRpdGFibGUpO1xuXG4gIGZ1bmN0aW9uIEVkaXRhYmxlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0YWJsZSk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIF90aGlzLmluQ29tcG9zaXRpb24gPSBmYWxzZTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnQ6ICcnXG4gICAgfTtcblxuICAgIF90aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9yZWYudGFyZ2V0LnZhbHVlO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGN1cnJlbnQ6IHZhbHVlLnJlcGxhY2UoL1tcXHJcXG5dL2csICcnKVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLm9uQ29tcG9zaXRpb25TdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmluQ29tcG9zaXRpb24gPSB0cnVlO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkNvbXBvc2l0aW9uRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaW5Db21wb3NpdGlvbiA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbktleURvd24gPSBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciBrZXlDb2RlID0gX3JlZjIua2V5Q29kZTtcbiAgICAgIC8vIFdlIGRvbid0IHJlY29yZCBrZXlDb2RlIHdoZW4gSU1FIGlzIHVzaW5nXG4gICAgICBpZiAoX3RoaXMuaW5Db21wb3NpdGlvbikgcmV0dXJuO1xuICAgICAgX3RoaXMubGFzdEtleUNvZGUgPSBrZXlDb2RlO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbktleVVwID0gZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIga2V5Q29kZSA9IF9yZWYzLmtleUNvZGUsXG4gICAgICAgICAgY3RybEtleSA9IF9yZWYzLmN0cmxLZXksXG4gICAgICAgICAgYWx0S2V5ID0gX3JlZjMuYWx0S2V5LFxuICAgICAgICAgIG1ldGFLZXkgPSBfcmVmMy5tZXRhS2V5LFxuICAgICAgICAgIHNoaWZ0S2V5ID0gX3JlZjMuc2hpZnRLZXk7XG4gICAgICB2YXIgb25DYW5jZWwgPSBfdGhpcy5wcm9wcy5vbkNhbmNlbDsgLy8gQ2hlY2sgaWYgaXQncyBhIHJlYWwga2V5XG5cbiAgICAgIGlmIChfdGhpcy5sYXN0S2V5Q29kZSA9PT0ga2V5Q29kZSAmJiAhX3RoaXMuaW5Db21wb3NpdGlvbiAmJiAhY3RybEtleSAmJiAhYWx0S2V5ICYmICFtZXRhS2V5ICYmICFzaGlmdEtleSkge1xuICAgICAgICBpZiAoa2V5Q29kZSA9PT0gX0tleUNvZGVbXCJkZWZhdWx0XCJdLkVOVEVSKSB7XG4gICAgICAgICAgX3RoaXMuY29uZmlybUNoYW5nZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IF9LZXlDb2RlW1wiZGVmYXVsdFwiXS5FU0MpIHtcbiAgICAgICAgICBvbkNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNvbmZpcm1DaGFuZ2UoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY29uZmlybUNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gX3RoaXMuc3RhdGUuY3VycmVudDtcbiAgICAgIHZhciBvblNhdmUgPSBfdGhpcy5wcm9wcy5vblNhdmU7XG4gICAgICBvblNhdmUoY3VycmVudC50cmltKCkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRUZXh0YXJlYSA9IGZ1bmN0aW9uICh0ZXh0YXJlYSkge1xuICAgICAgX3RoaXMudGV4dGFyZWEgPSB0ZXh0YXJlYTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVkaXRhYmxlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnRleHRhcmVhICYmIHRoaXMudGV4dGFyZWEucmVzaXphYmxlVGV4dEFyZWEpIHtcbiAgICAgICAgdmFyIHRleHRBcmVhID0gdGhpcy50ZXh0YXJlYS5yZXNpemFibGVUZXh0QXJlYS50ZXh0QXJlYTtcbiAgICAgICAgdGV4dEFyZWEuZm9jdXMoKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRleHRBcmVhLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgdGV4dEFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UobGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLnN0YXRlLmN1cnJlbnQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBhcmlhTGFiZWwgPSBfdGhpcyRwcm9wc1snYXJpYS1sYWJlbCddLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShwcmVmaXhDbHMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZWRpdC1jb250ZW50XCIpLCBjbGFzc05hbWUpLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9UZXh0QXJlYVtcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgcmVmOiB0aGlzLnNldFRleHRhcmVhLFxuICAgICAgICB2YWx1ZTogY3VycmVudCxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd24sXG4gICAgICAgIG9uS2V5VXA6IHRoaXMub25LZXlVcCxcbiAgICAgICAgb25Db21wb3NpdGlvblN0YXJ0OiB0aGlzLm9uQ29tcG9zaXRpb25TdGFydCxcbiAgICAgICAgb25Db21wb3NpdGlvbkVuZDogdGhpcy5vbkNvbXBvc2l0aW9uRW5kLFxuICAgICAgICBvbkJsdXI6IHRoaXMub25CbHVyLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgICBhdXRvU2l6ZTogdHJ1ZVxuICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9pY29uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICB0eXBlOiBcImVudGVyXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1lZGl0LWNvbnRlbnQtY29uZmlybVwiKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIHZhciBwcmV2VmFsdWUgPSBwcmV2U3RhdGUucHJldlZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgdmFyIG5ld1N0YXRlID0ge1xuICAgICAgICBwcmV2VmFsdWU6IHZhbHVlXG4gICAgICB9O1xuXG4gICAgICBpZiAocHJldlZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICBuZXdTdGF0ZS5jdXJyZW50ID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRWRpdGFibGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbigwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShFZGl0YWJsZSk7XG52YXIgX2RlZmF1bHQgPSBFZGl0YWJsZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF90b0FycmF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdXRpbC9saWIvQ2hpbGRyZW4vdG9BcnJheVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vLyBXZSBvbmx5IGhhbmRsZSBlbGVtZW50ICYgdGV4dCBub2RlLlxudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgVEVYVF9OT0RFID0gMztcbnZhciBDT01NRU5UX05PREUgPSA4O1xudmFyIGVsbGlwc2lzQ29udGFpbmVyO1xudmFyIHdyYXBwZXJTdHlsZSA9IHtcbiAgcGFkZGluZzogMCxcbiAgbWFyZ2luOiAwLFxuICBkaXNwbGF5OiAnaW5saW5lJyxcbiAgbGluZUhlaWdodDogJ2luaGVyaXQnXG59O1xuXG5mdW5jdGlvbiBweFRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiAwO1xuICB2YXIgbWF0Y2ggPSB2YWx1ZS5tYXRjaCgvXlxcZCooXFwuXFxkKik/Lyk7XG4gIHJldHVybiBtYXRjaCA/IE51bWJlcihtYXRjaFswXSkgOiAwO1xufVxuXG5mdW5jdGlvbiBzdHlsZVRvU3RyaW5nKHN0eWxlKSB7XG4gIC8vIFRoZXJlIGFyZSBzb21lIGRpZmZlcmVudCBiZWhhdmlvciBiZXR3ZWVuIEZpcmVmb3ggJiBDaHJvbWUuXG4gIC8vIFdlIGhhdmUgdG8gaGFuZGxlIHRoaXMgb3Vyc2VsZi5cbiAgdmFyIHN0eWxlTmFtZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoc3R5bGUpO1xuICByZXR1cm4gc3R5bGVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQobmFtZSwgXCI6IFwiKS5jb25jYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSwgXCI7XCIpO1xuICB9KS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VDaGlsZHJlbihjaGlsZHJlbikge1xuICB2YXIgY2hpbGRMaXN0ID0gW107XG4gIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIHByZXZDaGlsZCA9IGNoaWxkTGlzdFtjaGlsZExpc3QubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgcHJldkNoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgY2hpbGRMaXN0W2NoaWxkTGlzdC5sZW5ndGggLSAxXSArPSBjaGlsZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRMaXN0LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZExpc3Q7XG59XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KG9yaWdpbkVsZSwgcm93cywgY29udGVudCwgZml4ZWRDb250ZW50LCBlbGxpcHNpc1N0cikge1xuICBpZiAoIWVsbGlwc2lzQ29udGFpbmVyKSB7XG4gICAgZWxsaXBzaXNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGxpcHNpc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsbGlwc2lzQ29udGFpbmVyKTtcbiAgfSAvLyBHZXQgb3JpZ2luIHN0eWxlXG5cblxuICB2YXIgb3JpZ2luU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvcmlnaW5FbGUpO1xuICB2YXIgb3JpZ2luQ1NTID0gc3R5bGVUb1N0cmluZyhvcmlnaW5TdHlsZSk7XG4gIHZhciBsaW5lSGVpZ2h0ID0gcHhUb051bWJlcihvcmlnaW5TdHlsZS5saW5lSGVpZ2h0KTtcbiAgdmFyIG1heEhlaWdodCA9IGxpbmVIZWlnaHQgKiAocm93cyArIDEpICsgcHhUb051bWJlcihvcmlnaW5TdHlsZS5wYWRkaW5nVG9wKSArIHB4VG9OdW1iZXIob3JpZ2luU3R5bGUucGFkZGluZ0JvdHRvbSk7IC8vIFNldCBzaGFkb3dcblxuICBlbGxpcHNpc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgb3JpZ2luQ1NTKTtcbiAgZWxsaXBzaXNDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICBlbGxpcHNpc0NvbnRhaW5lci5zdHlsZS5sZWZ0ID0gJzAnO1xuICBlbGxpcHNpc0NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gIGVsbGlwc2lzQ29udGFpbmVyLnN0eWxlLm1pbkhlaWdodCA9ICdhdXRvJztcbiAgZWxsaXBzaXNDb250YWluZXIuc3R5bGUubWF4SGVpZ2h0ID0gJ2F1dG8nO1xuICBlbGxpcHNpc0NvbnRhaW5lci5zdHlsZS50b3AgPSAnLTk5OTk5OXB4JztcbiAgZWxsaXBzaXNDb250YWluZXIuc3R5bGUuekluZGV4ID0gJy0xMDAwJzsgLy8gY2xlYW4gdXAgY3NzIG92ZXJmbG93XG5cbiAgZWxsaXBzaXNDb250YWluZXIuc3R5bGUudGV4dE92ZXJmbG93ID0gJ2NsaXAnO1xuICBlbGxpcHNpc0NvbnRhaW5lci5zdHlsZS53aGl0ZVNwYWNlID0gJ25vcm1hbCc7XG4gIGVsbGlwc2lzQ29udGFpbmVyLnN0eWxlLndlYmtpdExpbmVDbGFtcCA9ICdub25lJzsgLy8gUmVuZGVyIGluIHRoZSBmYWtlIGNvbnRhaW5lclxuXG4gIHZhciBjb250ZW50TGlzdCA9IG1lcmdlQ2hpbGRyZW4oKDAsIF90b0FycmF5W1wiZGVmYXVsdFwiXSkoY29udGVudCkpO1xuICAoMCwgX3JlYWN0RG9tLnJlbmRlcikoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBzdHlsZTogd3JhcHBlclN0eWxlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgc3R5bGU6IHdyYXBwZXJTdHlsZVxuICB9LCBjb250ZW50TGlzdCksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgc3R5bGU6IHdyYXBwZXJTdHlsZVxuICB9LCBmaXhlZENvbnRlbnQpKSwgZWxsaXBzaXNDb250YWluZXIpOyAvLyB3cmFwIGluIGFuIGRpdiBmb3Igb2xkIHZlcnNpb24gcmVhY3RcbiAgLy8gQ2hlY2sgaWYgZWxsaXBzaXMgaW4gbWVhc3VyZSBkaXYgaXMgaGVpZ2h0IGVub3VnaCBmb3IgY29udGVudFxuXG4gIGZ1bmN0aW9uIGluUmFuZ2UoKSB7XG4gICAgcmV0dXJuIGVsbGlwc2lzQ29udGFpbmVyLm9mZnNldEhlaWdodCA8IG1heEhlaWdodDtcbiAgfSAvLyBTa2lwIGVsbGlwc2lzIGlmIGFscmVhZHkgbWF0Y2hcblxuXG4gIGlmIChpblJhbmdlKCkpIHtcbiAgICAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKGVsbGlwc2lzQ29udGFpbmVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgIHRleHQ6IGVsbGlwc2lzQ29udGFpbmVyLmlubmVySFRNTCxcbiAgICAgIGVsbGlwc2lzOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gV2Ugc2hvdWxkIGNsb25lIHRoZSBjaGlsZE5vZGUgc2luY2UgdGhleSdyZSBjb250cm9sbGVkIGJ5IFJlYWN0IGFuZCB3ZSBjYW4ndCByZXVzZSBpdCB3aXRob3V0IHdhcm5pbmdcblxuXG4gIHZhciBjaGlsZE5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGVsbGlwc2lzQ29udGFpbmVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1swXS5jbG9uZU5vZGUodHJ1ZSkuY2hpbGROb2RlcykuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5vZGVUeXBlID0gX3JlZi5ub2RlVHlwZTtcbiAgICByZXR1cm4gbm9kZVR5cGUgIT09IENPTU1FTlRfTk9ERTtcbiAgfSk7XG4gIHZhciBmaXhlZE5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGVsbGlwc2lzQ29udGFpbmVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1sxXS5jbG9uZU5vZGUodHJ1ZSkuY2hpbGROb2Rlcyk7XG4gICgwLCBfcmVhY3REb20udW5tb3VudENvbXBvbmVudEF0Tm9kZSkoZWxsaXBzaXNDb250YWluZXIpOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09IEZpbmQgbWF0Y2ggZWxsaXBzaXMgY29udGVudCA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGVsbGlwc2lzQ2hpbGRyZW4gPSBbXTtcbiAgZWxsaXBzaXNDb250YWluZXIuaW5uZXJIVE1MID0gJyc7IC8vIENyZWF0ZSBvcmlnaW4gY29udGVudCBob2xkZXJcblxuICB2YXIgZWxsaXBzaXNDb250ZW50SG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBlbGxpcHNpc0NvbnRhaW5lci5hcHBlbmRDaGlsZChlbGxpcHNpc0NvbnRlbnRIb2xkZXIpO1xuICB2YXIgZWxsaXBzaXNUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVsbGlwc2lzU3RyKTtcbiAgZWxsaXBzaXNDb250ZW50SG9sZGVyLmFwcGVuZENoaWxkKGVsbGlwc2lzVGV4dE5vZGUpO1xuICBmaXhlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkTm9kZSkge1xuICAgIGVsbGlwc2lzQ29udGFpbmVyLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XG4gIH0pOyAvLyBBcHBlbmQgYmVmb3JlIGZpeGVkIG5vZGVzXG5cbiAgZnVuY3Rpb24gYXBwZW5kQ2hpbGROb2RlKG5vZGUpIHtcbiAgICBlbGxpcHNpc0NvbnRlbnRIb2xkZXIuaW5zZXJ0QmVmb3JlKG5vZGUsIGVsbGlwc2lzVGV4dE5vZGUpO1xuICB9IC8vIEdldCBtYXhpbXVtIHRleHRcblxuXG4gIGZ1bmN0aW9uIG1lYXN1cmVUZXh0KHRleHROb2RlLCBmdWxsVGV4dCkge1xuICAgIHZhciBzdGFydExvYyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgICB2YXIgZW5kTG9jID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmdWxsVGV4dC5sZW5ndGg7XG4gICAgdmFyIGxhc3RTdWNjZXNzTG9jID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAwO1xuICAgIHZhciBtaWRMb2MgPSBNYXRoLmZsb29yKChzdGFydExvYyArIGVuZExvYykgLyAyKTtcbiAgICB2YXIgY3VycmVudFRleHQgPSBmdWxsVGV4dC5zbGljZSgwLCBtaWRMb2MpO1xuICAgIHRleHROb2RlLnRleHRDb250ZW50ID0gY3VycmVudFRleHQ7XG5cbiAgICBpZiAoc3RhcnRMb2MgPj0gZW5kTG9jIC0gMSkge1xuICAgICAgLy8gTG9vcCB3aGVuIHN0ZXAgaXMgc21hbGxcbiAgICAgIGZvciAodmFyIHN0ZXAgPSBlbmRMb2M7IHN0ZXAgPj0gc3RhcnRMb2M7IHN0ZXAgLT0gMSkge1xuICAgICAgICB2YXIgY3VycmVudFN0ZXBUZXh0ID0gZnVsbFRleHQuc2xpY2UoMCwgc3RlcCk7XG4gICAgICAgIHRleHROb2RlLnRleHRDb250ZW50ID0gY3VycmVudFN0ZXBUZXh0O1xuXG4gICAgICAgIGlmIChpblJhbmdlKCkpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcCA9PT0gZnVsbFRleHQubGVuZ3RoID8ge1xuICAgICAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVhY3ROb2RlOiBmdWxsVGV4dFxuICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICBmaW5pc2hlZDogdHJ1ZSxcbiAgICAgICAgICAgIHJlYWN0Tm9kZTogY3VycmVudFN0ZXBUZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpblJhbmdlKCkpIHtcbiAgICAgIHJldHVybiBtZWFzdXJlVGV4dCh0ZXh0Tm9kZSwgZnVsbFRleHQsIG1pZExvYywgZW5kTG9jLCBtaWRMb2MpO1xuICAgIH1cblxuICAgIHJldHVybiBtZWFzdXJlVGV4dCh0ZXh0Tm9kZSwgZnVsbFRleHQsIHN0YXJ0TG9jLCBtaWRMb2MsIGxhc3RTdWNjZXNzTG9jKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lYXN1cmVOb2RlKGNoaWxkTm9kZSwgaW5kZXgpIHtcbiAgICB2YXIgdHlwZSA9IGNoaWxkTm9kZS5ub2RlVHlwZTtcblxuICAgIGlmICh0eXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIC8vIFdlIGRvbid0IHNwbGl0IGVsZW1lbnQsIGl0IHdpbGwga2VlcCBpZiB3aG9sZSBlbGVtZW50IGNhbiBiZSBkaXNwbGF5ZWQuXG4gICAgICBhcHBlbmRDaGlsZE5vZGUoY2hpbGROb2RlKTtcblxuICAgICAgaWYgKGluUmFuZ2UoKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgICByZWFjdE5vZGU6IGNvbnRlbnRMaXN0W2luZGV4XVxuICAgICAgICB9O1xuICAgICAgfSAvLyBDbGVhbiB1cCBpZiBjYW4gbm90IHB1bGwgaW5cblxuXG4gICAgICBlbGxpcHNpc0NvbnRlbnRIb2xkZXIucmVtb3ZlQ2hpbGQoY2hpbGROb2RlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbmlzaGVkOiB0cnVlLFxuICAgICAgICByZWFjdE5vZGU6IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgdmFyIGZ1bGxUZXh0ID0gY2hpbGROb2RlLnRleHRDb250ZW50IHx8ICcnO1xuICAgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZnVsbFRleHQpO1xuICAgICAgYXBwZW5kQ2hpbGROb2RlKHRleHROb2RlKTtcbiAgICAgIHJldHVybiBtZWFzdXJlVGV4dCh0ZXh0Tm9kZSwgZnVsbFRleHQpO1xuICAgIH0gLy8gTm90IGhhbmRsZSBvdGhlciB0eXBlIG9mIGNvbnRlbnRcbiAgICAvLyBQUzogVGhpcyBjb2RlIHNob3VsZCBub3QgYmUgYXR0YWNoZWQgYWZ0ZXIgcmVhY3QgMTZcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgIHJlYWN0Tm9kZTogbnVsbFxuICAgIH07XG4gIH1cblxuICBjaGlsZE5vZGVzLnNvbWUoZnVuY3Rpb24gKGNoaWxkTm9kZSwgaW5kZXgpIHtcbiAgICB2YXIgX21lYXN1cmVOb2RlID0gbWVhc3VyZU5vZGUoY2hpbGROb2RlLCBpbmRleCksXG4gICAgICAgIGZpbmlzaGVkID0gX21lYXN1cmVOb2RlLmZpbmlzaGVkLFxuICAgICAgICByZWFjdE5vZGUgPSBfbWVhc3VyZU5vZGUucmVhY3ROb2RlO1xuXG4gICAgaWYgKHJlYWN0Tm9kZSkge1xuICAgICAgZWxsaXBzaXNDaGlsZHJlbi5wdXNoKHJlYWN0Tm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmlzaGVkO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBlbGxpcHNpc0NoaWxkcmVuLFxuICAgIHRleHQ6IGVsbGlwc2lzQ29udGFpbmVyLmlubmVySFRNTCxcbiAgICBlbGxpcHNpczogdHJ1ZVxuICB9O1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX0Jhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VcIikpO1xuXG52YXIgX3R5cGUgPSByZXF1aXJlKFwiLi4vX3V0aWwvdHlwZVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG5cbiAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgfVxuXG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuXG52YXIgVElUTEVfRUxFX0xJU1QgPSAoMCwgX3R5cGUudHVwbGVOdW0pKDEsIDIsIDMsIDQpO1xuXG52YXIgVGl0bGUgPSBmdW5jdGlvbiBUaXRsZShwcm9wcykge1xuICB2YXIgX3Byb3BzJGxldmVsID0gcHJvcHMubGV2ZWwsXG4gICAgICBsZXZlbCA9IF9wcm9wcyRsZXZlbCA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRsZXZlbCxcbiAgICAgIHJlc3RQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wibGV2ZWxcIl0pO1xuXG4gIHZhciBjb21wb25lbnQ7XG5cbiAgaWYgKFRJVExFX0VMRV9MSVNULmluZGV4T2YobGV2ZWwpICE9PSAtMSkge1xuICAgIGNvbXBvbmVudCA9IFwiaFwiLmNvbmNhdChsZXZlbCk7XG4gIH0gZWxzZSB7XG4gICAgKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoZmFsc2UsICdUaXRsZSBvbmx5IGFjY2VwdCBgMSB8IDIgfCAzIHwgNGAgYXMgYGxldmVsYCB2YWx1ZS4nKTtcbiAgICBjb21wb25lbnQgPSAnaDEnO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9CYXNlW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgIGNvbXBvbmVudDogY29tcG9uZW50XG4gIH0pKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IFRpdGxlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQmFzZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgUGFyYWdyYXBoID0gZnVuY3Rpb24gUGFyYWdyYXBoKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfQmFzZVtcImRlZmF1bHRcIl0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudDogXCJkaXZcIlxuICB9KSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBQYXJhZ3JhcGg7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX29taXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJvbWl0LmpzXCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfaWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ljb25cIikpO1xuXG52YXIgX0NoZWNrYWJsZVRhZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2hlY2thYmxlVGFnXCIpKTtcblxudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG5cbnZhciBfY29sb3JzID0gcmVxdWlyZShcIi4uL191dGlsL2NvbG9yc1wiKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvd2FybmluZ1wiKSk7XG5cbnZhciBfd2F2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL191dGlsL3dhdmVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBQcmVzZXRDb2xvclJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oXCIuY29uY2F0KF9jb2xvcnMuUHJlc2V0Q29sb3JUeXBlcy5qb2luKCd8JyksIFwiKSgtaW52ZXJzZSk/JFwiKSk7XG5cbnZhciBUYWcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRhZywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUYWcpO1xuXG4gIGZ1bmN0aW9uIFRhZyhwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWcpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB2aXNpYmxlOiB0cnVlXG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUljb25DbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBfdGhpcy5zZXRWaXNpYmxlKGZhbHNlLCBlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyVGFnID0gZnVuY3Rpb24gKGNvbmZpZ1Byb3BzKSB7XG4gICAgICB2YXIgX2EgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLFxuICAgICAgICAgIG90aGVyUHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCJdKTtcblxuICAgICAgdmFyIGlzTmVlZFdhdmUgPSAnb25DbGljaycgaW4gb3RoZXJQcm9wcyB8fCBjaGlsZHJlbiAmJiBjaGlsZHJlbi50eXBlID09PSAnYSc7XG4gICAgICB2YXIgdGFnUHJvcHMgPSAoMCwgX29taXRbXCJkZWZhdWx0XCJdKShvdGhlclByb3BzLCBbJ29uQ2xvc2UnLCAnYWZ0ZXJDbG9zZScsICdjb2xvcicsICd2aXNpYmxlJywgJ2Nsb3NhYmxlJywgJ3ByZWZpeENscyddKTtcbiAgICAgIHJldHVybiBpc05lZWRXYXZlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX3dhdmVbXCJkZWZhdWx0XCJdLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIHRhZ1Byb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogX3RoaXMuZ2V0VGFnQ2xhc3NOYW1lKGNvbmZpZ1Byb3BzKSxcbiAgICAgICAgc3R5bGU6IF90aGlzLmdldFRhZ1N0eWxlKClcbiAgICAgIH0pLCBjaGlsZHJlbiwgX3RoaXMucmVuZGVyQ2xvc2VJY29uKCkpKSA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7fSwgdGFnUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy5nZXRUYWdDbGFzc05hbWUoY29uZmlnUHJvcHMpLFxuICAgICAgICBzdHlsZTogX3RoaXMuZ2V0VGFnU3R5bGUoKVxuICAgICAgfSksIGNoaWxkcmVuLCBfdGhpcy5yZW5kZXJDbG9zZUljb24oKSk7XG4gICAgfTtcblxuICAgICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCEoJ2FmdGVyQ2xvc2UnIGluIHByb3BzKSwgJ1RhZycsIFwiJ2FmdGVyQ2xvc2UnIHdpbGwgYmUgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSAnb25DbG9zZScsIHdlIHdpbGwgcmVtb3ZlIHRoaXMgaW4gdGhlIG5leHQgdmVyc2lvbi5cIik7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhZywgW3tcbiAgICBrZXk6IFwiZ2V0VGFnU3R5bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFnU3R5bGUoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZTtcbiAgICAgIHZhciBpc1ByZXNldENvbG9yID0gdGhpcy5pc1ByZXNldENvbG9yKCk7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yICYmICFpc1ByZXNldENvbG9yID8gY29sb3IgOiB1bmRlZmluZWRcbiAgICAgIH0sIHN0eWxlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VGFnQ2xhc3NOYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhZ0NsYXNzTmFtZShfcmVmKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscztcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF90aGlzJHByb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzMi5jb2xvcjtcbiAgICAgIHZhciB2aXNpYmxlID0gdGhpcy5zdGF0ZS52aXNpYmxlO1xuICAgICAgdmFyIGlzUHJlc2V0Q29sb3IgPSB0aGlzLmlzUHJlc2V0Q29sb3IoKTtcbiAgICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3RhZycsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoY29sb3IpLCBpc1ByZXNldENvbG9yKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhhcy1jb2xvclwiKSwgY29sb3IgJiYgIWlzUHJlc2V0Q29sb3IpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaGlkZGVuXCIpLCAhdmlzaWJsZSksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0VmlzaWJsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWaXNpYmxlKHZpc2libGUsIGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczMub25DbG9zZSxcbiAgICAgICAgICBhZnRlckNsb3NlID0gX3RoaXMkcHJvcHMzLmFmdGVyQ2xvc2U7XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZnRlckNsb3NlICYmICFvbkNsb3NlKSB7XG4gICAgICAgIC8vIG5leHQgdmVyc2lvbiByZW1vdmUuXG4gICAgICAgIGFmdGVyQ2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghKCd2aXNpYmxlJyBpbiB0aGlzLnByb3BzKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1ByZXNldENvbG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzUHJlc2V0Q29sb3IoKSB7XG4gICAgICB2YXIgY29sb3IgPSB0aGlzLnByb3BzLmNvbG9yO1xuXG4gICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByZXNldENvbG9yUmVnZXgudGVzdChjb2xvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckNsb3NlSWNvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDbG9zZUljb24oKSB7XG4gICAgICB2YXIgY2xvc2FibGUgPSB0aGlzLnByb3BzLmNsb3NhYmxlO1xuICAgICAgcmV0dXJuIGNsb3NhYmxlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHR5cGU6IFwiY2xvc2VcIixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVJY29uQ2xpY2tcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIHRoaXMucmVuZGVyVGFnKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKCd2aXNpYmxlJyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2aXNpYmxlOiBuZXh0UHJvcHMudmlzaWJsZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGFnO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UYWcuQ2hlY2thYmxlVGFnID0gX0NoZWNrYWJsZVRhZ1tcImRlZmF1bHRcIl07XG5UYWcuZGVmYXVsdFByb3BzID0ge1xuICBjbG9zYWJsZTogZmFsc2Vcbn07XG4oMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVGFnKTtcbnZhciBfZGVmYXVsdCA9IFRhZztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBDaGVja2FibGVUYWcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENoZWNrYWJsZVRhZywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDaGVja2FibGVUYWcpO1xuXG4gIGZ1bmN0aW9uIENoZWNrYWJsZVRhZygpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hlY2thYmxlVGFnKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoZWNrZWQgPSBfdGhpcyRwcm9wcy5jaGVja2VkLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2U7XG5cbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICBvbkNoYW5nZSghY2hlY2tlZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckNoZWNrYWJsZVRhZyA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscztcblxuICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY3VzdG9taXplUHJlZml4Q2xzID0gX2EucHJlZml4Q2xzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSxcbiAgICAgICAgICBjaGVja2VkID0gX2EuY2hlY2tlZCxcbiAgICAgICAgICByZXN0UHJvcHMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcImNoZWNrZWRcIl0pO1xuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0YWcnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgICAgdmFyIGNscyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHByZWZpeENscywgKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jaGVja2FibGVcIiksIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2hlY2thYmxlLWNoZWNrZWRcIiksIGNoZWNrZWQpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gICAgICBkZWxldGUgcmVzdFByb3BzLm9uQ2hhbmdlOyAvLyBUeXBlU2NyaXB0IGNhbm5vdCBjaGVjayBkZWxldGUgbm93LlxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHt9LCByZXN0UHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHMsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDaGVja2FibGVUYWcsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlckNoZWNrYWJsZVRhZyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENoZWNrYWJsZVRhZztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBDaGVja2FibGVUYWc7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlByZXNldENvbG9yVHlwZXMgPSB2b2lkIDA7XG5cbnZhciBfdHlwZSA9IHJlcXVpcmUoXCIuL3R5cGVcIik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG52YXIgUHJlc2V0Q29sb3JUeXBlcyA9ICgwLCBfdHlwZS50dXBsZSkoJ3BpbmsnLCAncmVkJywgJ3llbGxvdycsICdvcmFuZ2UnLCAnY3lhbicsICdncmVlbicsICdibHVlJywgJ3B1cnBsZScsICdnZWVrYmx1ZScsICdtYWdlbnRhJywgJ3ZvbGNhbm8nLCAnZ29sZCcsICdsaW1lJyk7XG5leHBvcnRzLlByZXNldENvbG9yVHlwZXMgPSBQcmVzZXRDb2xvclR5cGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXREYXRhT3JBcmlhUHJvcHM7XG5cbmZ1bmN0aW9uIGdldERhdGFPckFyaWFQcm9wcyhwcm9wcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAocHJldiwga2V5KSB7XG4gICAgaWYgKChrZXkuc3Vic3RyKDAsIDUpID09PSAnZGF0YS0nIHx8IGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5ID09PSAncm9sZScpICYmIGtleS5zdWJzdHIoMCwgNykgIT09ICdkYXRhLV9fJykge1xuICAgICAgcHJldltrZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJldjtcbiAgfSwge30pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=