(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{789:function(t,n,e){"use strict";e.d(n,"a",(function(){return l}));var r=e(128),o=e.n(r),i=e(39);function a(t,n,e,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void e(t)}c.done?n(u):Promise.resolve(u).then(r,o)}function c(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u="Can't upload image",s=function(t){return"".concat(i.a,"/words/").concat(t)},l=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r,l,f;return n=t,e=null,r=[{key:"update",value:function(t){var n=t.wordId,e=t.body;fetch(s(n),{body:e,method:"PUT"}).then((function(t){return t.json()})).then((function(t){return t.id&&o.a.success("Image updated successfully"),t})).catch((function(){o.a.error(u)}))}},{key:"undraft",value:function(t){fetch("".concat(i.a,"/words/undraft/").concat(t),{method:"GET"}).then((function(t){return t.json()})).then((function(t){return t.id&&o.a.success("Moved to the words list"),t})).catch((function(){o.a.error("Cannot move to the words list")}))}},{key:"updateJSON",value:function(t){var n=t.wordId,e=t.wordProps,r=JSON.stringify(e);return fetch(s(n),{body:r,method:"PUT",headers:{"Content-Type":"application/json"}}).then((function(t){return t.json()})).then((function(t){return t})).catch((function(){o.a.error(u)}))}},{key:"delete",value:(l=regeneratorRuntime.mark((function t(n){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(s(n),{method:"DELETE"});case 2:return e=t.sent,t.abrupt("return",e.json());case 4:case"end":return t.stop()}}),t)})),f=function(){var t=this,n=arguments;return new Promise((function(e,r){var o=l.apply(t,n);function i(t){a(o,e,r,i,c,"next",t)}function c(t){a(o,e,r,i,c,"throw",t)}i(void 0)}))},function(t){return f.apply(this,arguments)})}],e&&c(n.prototype,e),r&&c(n,r),t}()},790:function(t,n,e){"use strict";e.d(n,"b",(function(){return r})),e.d(n,"a",(function(){return o}));var r="0 3px 6px 0 rgba(0,0,0,0.12), 0 0 1px 0 rgba(0,0,0,0.12)",o="4px"},795:function(t,n,e){var r=e(229),o=e(802);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},796:function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(0),o=e.n(r),i=e(24),a=e.n(i),c=e(13),u=Object(c.a)(a.a).withConfig({displayName:"styles__Icon",componentId:"sc-1ins3vw-0"})(["margin:0 10px;"]),s=function(t){var n=t.word;return o.a.createElement(u,{theme:"twoTone",type:"sound",onClick:function(){window.responsiveVoice.speak(n)}})}},802:function(t,n,e){(n=e(230)(!1)).push([t.i,".item-enter {\n    opacity: 0;\n}\n.item-enter-active {\n    opacity: 1;\n    transition: opacity 400ms ease-in;\n}\n.item-exit {\n    opacity: 1;\n}\n.item-exit-active {\n    opacity: 0;\n    transition: opacity 400ms ease-in;\n}\n",""]),t.exports=n},873:function(t,n,e){"use strict";e.r(n),e.d(n,"Training",(function(){return A}));var r=e(0),o=e.n(r),i=e(875),a=e(874),c=e(29),u=e(277);function s(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return l(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return l(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}var f=function(){var t,n=(t=Object(c.b)(),{fetchWords:function(){t(Object(u.b)())},words:Object(c.c)((function(t){return t.words}))}),e=n.words,o=n.fetchWords,i=s(Object(r.useState)([]),2),a=i[0],l=i[1];return Object(r.useEffect)((function(){o();var t=e.filter((function(t){return!t.learned}));l(t)}),[e.length]),{trainingWords:a,setTrainingWords:l}},d=e(69),p=e.n(d),y=e(24),m=e.n(y),h=e(789),v=e(796),w=e(13),b=e(790),g=w.a.div.withConfig({displayName:"styles__Wrapper",componentId:"bw4qdk-0"})(["text-align:center;background:#fff;padding:33px 15px;border-radius:",";box-shadow:0 0 0 1px rgba(63,63,68,0.05),0 1px 3px 0 rgba(63,63,68,0.15);display:inline-block;margin:0 auto;font-size:21px;width:500px;@media (max-width:480px){max-width:500px;margin:15px;}"],b.a),x=w.a.div.withConfig({displayName:"styles__Container",componentId:"bw4qdk-1"})(["display:flex !important;align-items:center;height:94vh;"]),j=w.a.div.withConfig({displayName:"styles__ButtonsWrapper",componentId:"bw4qdk-2"})(["display:flex;justify-content:space-between;width:175px;margin:0 auto;margin-top:20px;"]),E=w.a.div.withConfig({displayName:"styles__Word",componentId:"bw4qdk-3"})(["color:#000;margin-right:10px;"]),k=w.a.div.withConfig({displayName:"styles__Description",componentId:"bw4qdk-4"})(["color:#909090;"]),O=w.a.div.withConfig({displayName:"styles__IconWordLayout",componentId:"bw4qdk-5"})(["display:flex;justify-content:center;align-items:center;"]);function I(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return C(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return C(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}var S=function(t){var n=t.id,e=t.word,i=t.translate,a=t.context,c=t.deleteTrainingWord,u=I(Object(r.useState)(!1),2),s=u[0],l=u[1];Object(r.useEffect)((function(){window.responsiveVoice.speak(e)}),[]);var f=function(){h.a.updateJSON({wordId:n,wordProps:{learned:!0}}),c(n)};!function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:window,o=Object(r.useRef)();Object(r.useEffect)((function(){o.current=n}),[n]),Object(r.useEffect)((function(){if(e&&e.addEventListener){var n=function(t){return o.current(t)};return e.addEventListener(t,n),function(){e.removeEventListener(t,n)}}}),[t,e])}("keydown",(function(t){var e=t.key;"ArrowRight"===e&&c(n),"ArrowLeft"===e&&f()}));return o.a.createElement(x,null,o.a.createElement(g,null,o.a.createElement(O,null,o.a.createElement(E,null,e),o.a.createElement(v.a,{word:e}),o.a.createElement(m.a,{theme:"twoTone",type:"question-circle",onClick:function(){l((function(t){return!t}))}})),s&&o.a.createElement(k,null,i),o.a.createElement(k,null,a),o.a.createElement(j,null,o.a.createElement(p.a,{onClick:f,size:"large",type:"primary"},"Know"),o.a.createElement(p.a,{onClick:function(){return c(n)},size:"large",type:"danger"},"Missed"))))};e(795);function _(){return(_=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t}).apply(this,arguments)}var T=function(t,n){return 0===n},A=function(){var t=f(),n=t.trainingWords,e=t.setTrainingWords,r=function(t){e(n.filter((function(n){return n.id!==t})))};return n?o.a.createElement(i.a,null,n.filter(T).map((function(t){return o.a.createElement(a.a,{key:t.id,timeout:500,classNames:"item"},o.a.createElement(S,_({},t,{deleteTrainingWord:r})))}))):null};n.default=A}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,