!function(e){function t(t){for(var r,i,c=t[0],u=t[1],s=t[2],f=0,d=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&d.push(a[i][0]),a[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);d.length;)d.shift()();return o.push.apply(o,s||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,c=1;c<n.length;c++){var u=n[c];0!==a[u]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={2:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.e=function(e){var t=[],n=a[e];if(0!==n)if(n)t.push(n[2]);else{var r=new Promise((function(t,r){n=a[e]=[t,r]}));t.push(n[2]=r);var o,c=document.createElement("script");c.charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.src=function(e){return i.p+""+e+".bundle.js"}(e);var u=new Error;o=function(t){c.onerror=c.onload=null,clearTimeout(s);var n=a[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\n("+r+": "+o+")",u.name="ChunkLoadError",u.type=r,u.request=o,n[1](u)}a[e]=void 0}};var s=setTimeout((function(){o({type:"timeout",target:c})}),12e4);c.onerror=c.onload=o,document.head.appendChild(c)}return Promise.all(t)},i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i.oe=function(e){throw console.error(e),e};var c=window.webpackJsonp=window.webpackJsonp||[],u=c.push.bind(c);c.push=t,c=c.slice();for(var s=0;s<c.length;s++)t(c[s]);var l=u;o.push([353,3]),n()}({108:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return p}));var r=n(0);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=function(){var e=a(Object(r.useState)(!1),2),t=e[0],n=e[1];return{visible:t,openModal:function(){return n(!0)},closeModal:function(){return n(!1)},toggleVisible:n}},c=n(327),u=n.n(c),s=n(221),l=n(321),f="Voice reader successfully downloaded!",d="Cannot download voice reader",p=function(){var e=Object(l.a)().checkVoiceReader;Object(r.useEffect)((function(){var t=u()("https://code.responsivevoice.org/responsivevoice.js?key=8me9wqCF",{returnPromise:!0});window.responsiveVoice||t.then((function(t){return s.a.success(f),e({isVoiceReaderAvailable:!0}),t})).catch((function(){s.a.error(d),e({isVoiceReaderAvailable:!1})}))}),[])}},110:function(e,t,n){"use strict";n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return c}));var r=n(53),a=function(e){return{type:r.c,words:e}},o=function(e){var t=e.offset,n=e.order;return{type:r.d,offset:t,order:n}},i=function(e){return{type:r.b,id:e}},c=function(e){return{type:r.a,word:e}}},111:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"d",(function(){return c})),n.d(t,"a",(function(){return u})),n.d(t,"c",(function(){return s}));var r=n(60),a=n.n(r),o=n(13),i=o.a.div.withConfig({displayName:"styles__Container",componentId:"sc-1ydw8ru-0"})(["display:flex;padding:10px;align-items:center;cursor:pointer;z-index:1;bottom:15px;right:15px;border-radius:50%;background:#008dff;font-size:35px;width:50px;height:50px;justify-content:center;color:#fff;box-shadow:0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12);transition:0.5s;&:hover{transform:scale(1.1);background:#0481e6;}"]),c=o.a.div.withConfig({displayName:"styles__InputWrapper",componentId:"sc-1ydw8ru-1"})(["margin-bottom:1rem;"]),u=o.a.div.withConfig({displayName:"styles__ButtonWrapper",componentId:"sc-1ydw8ru-2"})(["display:flex;justify-content:flex-end;"]),s=Object(o.a)(a.a).withConfig({displayName:"styles__FormModal",componentId:"sc-1ydw8ru-3"})(["& .ant-modal-body form:nth-child(2){margin-top:15px;}& .ant-modal-body > button{margin:0 auto;display:block;}"])},157:function(e,t,n){"use strict";function r(e,t,n,r,a,o,i){try{var c=e[o](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,a)}n.d(t,"a",(function(){return a}));var a=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(t);case 2:return n=e.sent,e.abrupt("return",n.json());case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(a,o){var i=e.apply(t,n);function c(e){r(i,a,o,c,u,"next",e)}function u(e){r(i,a,o,c,u,"throw",e)}c(void 0)}))});return function(e){return t.apply(this,arguments)}}()},161:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r="".concat("SETTINGS:"," IS_VOICE_READER_AVAILABLE")},162:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r="TOGGLE_WORDS_INFO"},220:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}));var r="".concat("WORD:","TOGGLE_EDIT_MODE"),a="".concat("WORD:","DISABLE_EDIT_MODE")},221:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r={success:function(e){console.info(e)},error:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){console.error(e)}))}},231:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(29),a=n(110),o=function(){var e=Object(r.b)();return{wordsOffset:Object(r.c)((function(e){return e.wordsOffset})),fetchWordsOffset:function(t,n){e(Object(a.d)({offset:t,order:n}))},deleteWordsOffset:function(t){e(Object(a.b)(t))},appendWordToList:function(t){console.log("appendWordToList"),e(Object(a.a)(t))}}}},239:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(29),a=n(79),o=function(){var e=Object(r.b)();return{categories:Object(r.c)((function(e){return e.categories})),deleteCategory:function(t){e(Object(a.b)(t))},linkCategories:function(t,n){e(Object(a.d)({id:t,categoryId:n}))},createCategory:function(t){e(Object(a.a)(t))},fetchCategories:function(){e(Object(a.e)())},unlinkCategories:function(t,n){e(Object(a.f)({id:t,categoryId:n}))}}}},240:function(e,t,n){"use strict";n.d(t,"a",(function(){return H}));var r=n(159),a=n.n(r),o=n(69),i=n.n(o),c=n(128),u=n.n(c),s=n(109),l=n.n(s),f=n(60),d=n.n(f),p=n(0),m=n.n(p),y=n(160),b=n(39),v=n(292),h=n(231),g=n(320);function w(e){return function(e){if(Array.isArray(e))return E(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||O(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||O(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function O(e,t){if(e){if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,t):void 0}}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var j=n(324),S=n(24),A=n.n(S),k=n(13),I=k.a.input.withConfig({displayName:"styles__Input",componentId:"dxzk82-0"})(["&{border:0;clip:rect(0,0,0,0);height:1px;overflow:hidden;padding:0;position:absolute !important;white-space:nowrap;width:1px;}& + label{position:relative;font-weight:400;white-space:nowrap;text-align:center;box-shadow:0 2px 0 rgba(0,0,0,0.015);cursor:pointer;transition:all 0.3s cubic-bezier(0.645,0.045,0.355,1);user-select:none;touch-action:manipulation;padding:8px 15px;font-size:14px;border-radius:4px;color:rgba(0,0,0,0.65);height:105px;width:100%;align-items:center;background-color:#fafafa;border:1px dashed #d9d9d9;margin-bottom:15px;display:flex;justify-content:center;align-items:center;flex-direction:column;color:#868181;}"]),C=Object(k.a)(A.a).withConfig({displayName:"styles__PlusIcon",componentId:"dxzk82-1"})(["font-size:40px;"]);function R(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return _(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var T=function(e){var t=e.setFieldValue;return m.a.createElement(m.a.Fragment,null,m.a.createElement(I,{type:"file",id:"imageSrc",name:"imageSrc",onChange:function(e){var n;if(null===(n=e.target)||void 0===n?void 0:n.files){var r=R(e.target.files,1)[0];t("imageSrc",r)}}}),m.a.createElement("label",{htmlFor:"imageSrc"},m.a.createElement(C,{type:"plus"}),m.a.createElement("span",null,"Upload an image")))};function W(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return P(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return P(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function P(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var N=function(e){var t=new FormData;return Object.entries(e).forEach((function(e){var n=W(e,2),r=n[0],a=n[1];a&&t.append(r,a)})),t},D=n(111);function M(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return F(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function L(e,t,n,r,a,o,i){try{var c=e[o](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,a)}function V(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){L(o,r,a,i,c,"next",e)}function c(e){L(o,r,a,i,c,"throw",e)}i(void 0)}))}}function U(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var z=[{name:"word",type:"input"},{name:"translate",type:"input"},{name:"definition",type:"textarea"},{name:"context",type:"textarea"},{name:"example",type:"textarea"},{name:"synonym",type:"input"}],G=d.a.confirm,q=function(e){var t=e.type,n=U(e,["type"]),r=l.a.TextArea;return{input:m.a.createElement(l.a,n),textarea:m.a.createElement(r,n)}[t]||m.a.createElement(l.a,n)},$=function(){var e=V(regeneratorRuntime.mark((function e(t,n){var r,a,o,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=N(t),a=u.a.loading("Action in progress..",0),e.next=4,fetch("".concat(b.a,"/words"),{method:"POST",body:r});case 4:return o=e.sent,e.next=7,o.json();case 7:i=e.sent,n(i),o.ok?(u.a.success(o.statusText),a()):u.a.error(o.statusText);case 10:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),H=function(e){var t=e.visible,n=e.closeModal,r=M(function(){var e=x(Object(p.useState)([1]),2),t=e[0],n=e[1];return[t,function(){n((function(e){return[].concat(w(e),[e[e.length-1]+1])}))}]}(),2),o=r[0],c=r[1],u=Object(h.a)().appendWordToList,s=Object(y.a)(function(e,t){return{initialValues:{id:"",word:"",translate:"",definition:"",context:"",example:"",synonym:"",imageSrc:""},onSubmit:(n=V(regeneratorRuntime.mark((function n(r){var a,o,i,c,u,s;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Object(g.a)(r.word);case 2:return a=n.sent,n.next=5,Object(j.a)(r.word);case 5:if(o=n.sent,!a.length){n.next=11;break}i=M(a,1),c=i[0],G({title:"This word is already exists - ".concat(c.word),content:"Are you sure that you want to add it?",onOk:function(){e(),$(r,t)}}),n.next=19;break;case 11:if(!o.length){n.next=16;break}u=M(o,1),s=u[0],G({title:"You have similar word - ".concat(s.word),content:"Are you sure that you want to add it?",onOk:function(){e(),$(r,t)}}),n.next=19;break;case 16:return e(),n.next=19,$(r,t);case 19:case"end":return n.stop()}}),n)}))),function(e){return n.apply(this,arguments)})};var n}(n,u)),l=s.handleSubmit,f=s.handleChange,d=s.setFieldValue;return m.a.createElement(m.a.Fragment,null,m.a.createElement(D.c,{centered:!0,title:"New word",footer:null,destroyOnClose:!0,visible:t,onCancel:n},o.map((function(e){return m.a.createElement(a.a,{key:e,onSubmit:l},z.map((function(e){var t=e.name,n=e.type;return m.a.createElement(D.d,{key:t},m.a.createElement(q,{key:t,name:t,type:n,placeholder:Object(v.a)(t),onChange:f}))})),m.a.createElement(T,{setFieldValue:d}),m.a.createElement(D.a,null,m.a.createElement(i.a,{type:"primary",htmlType:"submit"},"Add word")))})),m.a.createElement(i.a,{onClick:function(){return c}},"Append new word")))}},277:function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return o}));var r=n(96),a=function(e){return{type:r.a,words:e}},o=function(){return{type:r.b}}},292:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(e){var t=e.toLowerCase();return t.charAt(0).toUpperCase()+t.slice(1)}},31:function(e,t,n){"use strict";n.d(t,"c",(function(){return r})),n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return o})),n.d(t,"d",(function(){return i})),n.d(t,"f",(function(){return c})),n.d(t,"e",(function(){return u}));var r="".concat("CATEGORIES:","GET"),a="".concat("CATEGORIES:","DELETE"),o="".concat("CATEGORIES:","CREATE"),i="".concat("CATEGORIES:","LINK"),c="".concat("CATEGORIES:","UNLINK"),u="".concat("CATEGORIES:","REQUEST")},320:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(60),a=n.n(r),o=n(0),i=n.n(o),c=n(39),u=n(13).a.a.withConfig({displayName:"styles__Link",componentId:"w97l0y-0"})(["display:block;"]);function s(e,t,n,r,a,o,i){try{var c=e[o](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,a)}function l(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){s(o,r,a,i,c,"next",e)}function c(e){s(o,r,a,i,c,"throw",e)}i(void 0)}))}}var f=a.a.confirm,d=function(){var e=l(regeneratorRuntime.mark((function e(t){var n,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="".concat(c.a,"/word/find/").concat(t),e.next=3,fetch(n);case 3:return r=e.sent,e.abrupt("return",r.json());case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),p=function(e){var t=e.sameWords,n=e.history;return i.a.createElement(i.a.Fragment,null,i.a.createElement("p",null,"These words already exist:"),t.map((function(e){var t=e.word;return i.a.createElement(u,{key:t,onClick:function(){return n.push("/word/".concat(t))}},t)})))},m=function(){var e=l(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:f({title:i.a.createElement(p,{history:n,sameWords:t})});case 1:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()},321:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(29),a=n(161),o=function(){var e=Object(r.b)();return{checkVoiceReader:function(t){var n=t.isVoiceReaderAvailable;e(function(e){var t=e.isVoiceReaderAvailable;return{type:a.a,isVoiceReaderAvailable:t}}({isVoiceReaderAvailable:n}))},isVoiceReaderAvailable:Object(r.c)((function(e){return e.isVoiceReaderAvailable}))}}},322:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(29),a=n(162),o=function(){var e=Object(r.b)();return{toggleWordsInfo:function(){e({type:a.a})},showWordsInfo:Object(r.c)((function(e){return e.showWordsInfo}))}}},324:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(60),a=n.n(r),o=n(0),i=n.n(o),c=n(39),u=n(157),s=n(13).a.a.withConfig({displayName:"styles__Link",componentId:"sc-1egup00-0"})(["display:block;"]);function l(e,t,n,r,a,o,i){try{var c=e[o](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,a)}var f=a.a.confirm,d=function(e){var t="".concat(c.a,"/word/similar/").concat(e);return Object(u.a)(t)},p=function(e){var t=e.similarWords,n=e.history;return i.a.createElement(i.a.Fragment,null,i.a.createElement("p",null,"You have a similar words:"),t.map((function(e){var t=e.word;return i.a.createElement(s,{key:t,onClick:function(){return n.push("/word/".concat(t))}},t)})))},m=function(){var e,t=(e=regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.length?f({centered:!0,title:i.a.createElement(p,{history:n,similarWords:t})}):f({centered:!0,title:"You have a similar word - ".concat(t[0]),onOk:function(){n.push("/word/".concat(similarWord.word))}});case 1:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){l(o,r,a,i,c,"next",e)}function c(e){l(o,r,a,i,c,"throw",e)}i(void 0)}))});return function(e,n){return t.apply(this,arguments)}}()},353:function(e,t,n){n(354),n(357),e.exports=n(785)},39:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r="http://3.120.210.76:8081"},53:function(e,t,n){"use strict";n.d(t,"c",(function(){return r})),n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return o})),n.d(t,"d",(function(){return i}));var r="".concat("WORDS:","FETCH_WITH_OFFSET"),a="".concat("WORDS:","APPEND_WORD_TO_LIST"),o="".concat("WORDS:","DELETE_WORDS_OFFSET"),i="".concat("WORDS:","FETCH_WITH_OFFSET_REQUEST")},564:function(e,t,n){var r=n(229),a=n(565);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},565:function(e,t,n){(t=n(230)(!1)).push([e.i,".ant-popover-message-title {\n  padding-left: 0;\n}\n\n.ant-popover-buttons {\n  display: none;\n}\n\n.ant-popover-message-title div {\n  margin-bottom: 15px;\n}\n\n.ant-popover-message-title div:last-child {\n  margin-bottom: 0;\n}\n\nbody {\n  background-color: #c5eaff;\n}\n\n#root {\n  min-height: 100%;\n}\n\n\n\n\n",""]),e.exports=t},708:function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=708},785:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(12),i=n.n(o),c=(n(562),n(564),n(29)),u=n(334),s=n(78),l={words:[],categories:[],wordsOffset:[],editMode:!1,showWordsInfo:!0,isVoiceReaderAvailable:!1},f=n(220),d=function(e,t){var n=t.type,r=t.isEditMode;switch(n){case f.b:return!e;case f.a:return r;default:return e}},p=n(31),m=function(e,t){var n=t.type,r=t.categories;switch(n){case p.c:return r;default:return e}},y=n(161),b=function(e,t){var n=t.type,r=t.isVoiceReaderAvailable;switch(n){case y.a:return r;default:return e}},v=n(162),h=function(e,t){switch(t.type){case v.a:return!e;default:return e}},g=n(16),w=n(39),x=n(277),O=n(96),E=regeneratorRuntime.mark(S),j=regeneratorRuntime.mark(A);function S(){var e,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Object(g.b)((function(){return fetch("".concat(w.a,"/words"))}));case 2:return e=n.sent,n.next=5,e.json();case 5:return t=n.sent,n.next=8,Object(g.c)(Object(x.a)(t));case 8:case"end":return n.stop()}}),E)}function A(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(g.d)(O.b,S);case 2:case"end":return e.stop()}}),j)}function k(e){return function(e){if(Array.isArray(e))return I(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return I(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return I(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var C=[],R=function(e,t){var n=t.type,r=t.words;switch(n){case O.a:return[].concat(C,k(r));default:return e}},_=n(110),T=n(53),W=regeneratorRuntime.mark(N),P=regeneratorRuntime.mark(D);function N(e){var t,n,r,a,o,i;return regeneratorRuntime.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:return t=e.offset,n=e.order,r="".concat(w.a,"/words/offset/").concat(t,"/").concat(n),c.next=4,Object(g.b)((function(){return fetch(r)}));case 4:return a=c.sent,c.next=7,a.json();case 7:return o=c.sent,i=o.data,c.next=11,Object(g.c)(Object(_.c)(i));case 11:case"end":return c.stop()}}),W)}function D(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(g.d)(T.d,N);case 2:case"end":return e.stop()}}),P)}var M=n(326),F=n.n(M);function L(e){return function(e){if(Array.isArray(e))return V(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return V(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return V(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var U=function(e,t){var n=t.type,r=t.words,a=t.id,o=t.word;switch(n){case T.c:return F()([].concat(L(e),L(r)),(function(e){return e.id}));case T.a:return[o].concat(L(e));case T.b:return e.filter((function(e){return e.id!==a}));default:return e}},z="".concat("WORDS:","ADD_NEW"),G=regeneratorRuntime.mark($),q=regeneratorRuntime.mark(H);function $(e){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,!1;case 2:case"end":return e.stop()}}),G)}function H(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(g.d)(z,$);case 2:case"end":return e.stop()}}),q)}var J=n(157);function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){Y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var X="".concat(w.a,"/categories"),Z=function(e){return"".concat(w.a,"/words/category/").concat(e)},ee={method:"post",headers:{"Content-Type":"application/json;charset=utf-8"}},te=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"fetch",value:function(){return Object(J.a)(X)}},{key:"create",value:function(e){return fetch(X,Q(Q({},ee),{},{body:JSON.stringify({name:e})}))}},{key:"delete",value:function(e){return fetch("".concat(X,"/").concat(e),{method:"delete"})}},{key:"linkWordToCategory",value:function(e,t){return fetch(Z(t),Q(Q({},ee),{},{body:JSON.stringify({id:e})}))}},{key:"unlinkWordFromCategory",value:function(e,t){return fetch(Z(t),Q(Q({},ee),{},{method:"delete",body:JSON.stringify({id:e})}))}}],(n=null)&&K(t.prototype,n),r&&K(t,r),e}(),ne=n(79),re=regeneratorRuntime.mark(se),ae=regeneratorRuntime.mark(le),oe=regeneratorRuntime.mark(fe),ie=regeneratorRuntime.mark(de),ce=regeneratorRuntime.mark(pe),ue=regeneratorRuntime.mark(me);function se(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Object(g.b)((function(){return te.fetch()}));case 2:return e=t.sent,t.next=5,Object(g.c)(Object(ne.c)(e));case 5:case"end":return t.stop()}}),re)}function le(e){var t,n,r;return regeneratorRuntime.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return t=e.payload,n=t.id,r=t.categoryId,a.next=3,Object(g.b)((function(){return te.unlinkWordFromCategory(n,r)}));case 3:return a.next=5,se();case 5:case"end":return a.stop()}}),ae)}function fe(e){var t,n,r;return regeneratorRuntime.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return t=e.payload,n=t.id,r=t.categoryId,a.next=3,Object(g.b)((function(){return te.linkWordToCategory(n,r)}));case 3:return a.next=5,se();case 5:case"end":return a.stop()}}),oe)}function de(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.name,n.next=3,Object(g.b)((function(){return te.create(t)}));case 3:return n.next=5,se();case 5:case"end":return n.stop()}}),ie)}function pe(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.id,n.next=3,Object(g.b)((function(){return te.delete(t)}));case 3:return n.next=5,se();case 5:case"end":return n.stop()}}),ce)}function me(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(g.d)(p.d,fe);case 2:return e.next=4,Object(g.d)(p.a,de);case 4:return e.next=6,Object(g.d)(p.b,pe);case 6:return e.next=8,Object(g.d)(p.e,se);case 8:return e.next=10,Object(g.d)(p.f,le);case 10:case"end":return e.stop()}}),ue)}var ye=regeneratorRuntime.mark(be);function be(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object(g.a)([A(),D(),H(),me()]);case 2:case"end":return e.stop()}}),ye)}n(649).default();var ve=Object(u.a)(),he=[ve],ge=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||s.c,we=Object(s.d)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:l,t=e.words,n=e.wordsOffset,r=e.editMode,a=e.categories,o=e.showWordsInfo,i=e.isVoiceReaderAvailable,c=arguments.length>1?arguments[1]:void 0;return{words:R(t,c),editMode:d(r,c),showWordsInfo:h(o,c),categories:m(a,c),wordsOffset:U(n,c),isVoiceReaderAvailable:b(i,c)}}),l,ge(s.a.apply(void 0,he)));ve.run(be);var xe=we,Oe=n(125),Ee=n(19),je=n(24),Se=n.n(je),Ae=n(108),ke=n(240),Ie=n(111),Ce=function(){var e=Object(Ae.a)(),t=e.openModal,n=e.visible,r=e.closeModal;return a.a.createElement(a.a.Fragment,null,a.a.createElement(Ie.b,{onClick:t},a.a.createElement(Se.a,{type:"plus"})),a.a.createElement(ke.a,{visible:n,closeModal:r}))},Re=n(322),_e=n(13),Te=_e.a.div.withConfig({displayName:"styles__ToggleTranslate",componentId:"sc-1bbroxh-0"})(["font-size:34px;right:26px;cursor:pointer;@media (max-width:480px){font-size:34px;right:-20px;cursor:pointer;position:relative;}"]),We=function(){var e=Object(Re.a)().toggleWordsInfo;return a.a.createElement(Te,{onClick:e},a.a.createElement(Se.a,{theme:"twoTone",type:"file-unknown"}))},Pe=n(60),Ne=n.n(Pe),De=n(159),Me=n.n(De),Fe=n(69),Le=n.n(Fe),Ve=n(109),Ue=n.n(Ve),ze=n(160),Ge=n(239),qe=_e.a.div.withConfig({displayName:"styles__CreateCategoriesWrapper",componentId:"sc-2o2qak-0"})(["font-size:34px;cursor:pointer;@media (max-width:480px){display:none;}"]),$e=_e.a.div.withConfig({displayName:"styles__InputLayout",componentId:"sc-2o2qak-1"})(["margin-bottom:15px;"]),He=function(){var e=Object(Ge.a)().createCategory,t=Object(ze.a)({initialValues:{name:""},onSubmit:function(t){e(t.name)}}),n=t.handleSubmit,r=t.handleChange,o=Object(Ae.a)(),i=o.visible,c=o.openModal,u=o.closeModal;return a.a.createElement(a.a.Fragment,null,a.a.createElement(qe,{onClick:c},a.a.createElement(Se.a,{theme:"twoTone",type:"folder-add"})),a.a.createElement(Ne.a,{centered:!0,title:"New category",footer:null,destroyOnClose:!0,visible:i,onCancel:u},a.a.createElement(Me.a,{onSubmit:n},a.a.createElement($e,null,a.a.createElement(Ue.a,{name:"name",onChange:r})),a.a.createElement(Le.a,{type:"primary",htmlType:"submit",onClick:u},"Add category"))))},Je=_e.a.div.withConfig({displayName:"styles__MenuWrapper",componentId:"sc-1blaqrw-0"})(["background:#001529;width:100px;align-items:center;@media (max-width:480px){width:100%;bottom:0;position:fixed;display:flex;justify-content:space-between;height:60px;}"]),Be=_e.a.div.withConfig({displayName:"styles__MenuItem",componentId:"sc-1blaqrw-1"})(["width:100%;@media (max-width:480px){width:auto;height:100%;}& a{color:#ffffff;display:block;padding:10px;text-align:center;@media (max-width:480px){padding:10px 20px;text-align:center;height:100%;display:flex;align-items:center;}}"]),Qe=_e.a.div.withConfig({displayName:"styles__MenuLayout",componentId:"sc-1blaqrw-2"})(["display:flex;min-height:100vh;"]),Ye=_e.a.div.withConfig({displayName:"styles__Content",componentId:"sc-1blaqrw-3"})(["width:calc(100% - 100px);@media (max-width:480px){width:100%;padding-bottom:50px;}"]),Ke=_e.a.div.withConfig({displayName:"styles__Links",componentId:"sc-1blaqrw-4"})(["@media (max-width:480px){display:flex;height:100%;}"]),Xe=_e.a.div.withConfig({displayName:"styles__Actions",componentId:"sc-1blaqrw-5"})(["position:fixed;bottom:0;width:100px;display:flex;flex-direction:column;justify-content:center;align-items:center;@media (max-width:480px){position:static;flex-direction:row;height:1px;}"]),Ze=_e.a.div.withConfig({displayName:"styles__AddWordLayout",componentId:"sc-1blaqrw-6"})(["margin:10px 0 20px 0;@media (max-width:480px){display:none;}"]),et={backgroundColor:"#1890ff"},tt=function(e){var t=e.children;return a.a.createElement(Qe,null,a.a.createElement(Ye,null,t),a.a.createElement(Je,null,a.a.createElement(Ke,null,a.a.createElement(Be,null,a.a.createElement(Oe.c,{activeStyle:et,to:"/words"},"Words")),a.a.createElement(Be,null,a.a.createElement(Oe.c,{activeStyle:et,to:"/training"},"Training"))),a.a.createElement(Xe,null,a.a.createElement(He,null),a.a.createElement(We,null),a.a.createElement(Ze,null,a.a.createElement(Ce,null)))))},nt=a.a.lazy((function(){return Promise.all([n.e(0),n.e(4),n.e(8)]).then(n.bind(null,871))})),rt=a.a.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(5),n.e(7)]).then(n.bind(null,872))})),at=a.a.lazy((function(){return Promise.all([n.e(1),n.e(6)]).then(n.bind(null,873))})),ot=function(){return Object(Ae.b)(),a.a.createElement(Oe.a,null,a.a.createElement(tt,null,a.a.createElement(Ee.d,null,a.a.createElement(Ee.b,{path:"/words"},a.a.createElement(r.Suspense,{fallback:a.a.createElement("div",null,"Loading...")},a.a.createElement(rt,null))),a.a.createElement(Ee.b,{path:"/word/:wordName"},a.a.createElement(r.Suspense,{fallback:a.a.createElement("div",null,"Loading...")},a.a.createElement(nt,null))),a.a.createElement(Ee.b,{path:"/training"},a.a.createElement(r.Suspense,{fallback:a.a.createElement("div",null,"Loading...")},a.a.createElement(at,null))),a.a.createElement(Ee.b,{path:"/"},a.a.createElement(Ee.a,{to:"/words"})))))},it=function(){return a.a.createElement(c.a,{store:xe},a.a.createElement(ot,null))},ct=it;i.a.render(a.a.createElement(ct,null),document.getElementById("root"))},79:function(e,t,n){"use strict";n.d(t,"c",(function(){return a})),n.d(t,"f",(function(){return o})),n.d(t,"d",(function(){return i})),n.d(t,"e",(function(){return c})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return s}));var r=n(31),a=function(e){return{type:r.c,categories:e}},o=function(e){return{type:r.f,payload:e}},i=function(e){return{type:r.d,payload:e}},c=function(){return{type:r.e}},u=function(e){return{type:r.a,name:e}},s=function(e){return{type:r.b,id:e}}},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return a}));var r="".concat("WORDS:","FETCH"),a="".concat("WORDS:","FETCH_REQUEST")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
