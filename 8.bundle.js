(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{789:function(t,e,n){"use strict";n.d(e,"a",(function(){return d}));var r=n(128),o=n.n(r),a=n(39);function i(t,e,n,r,o,a,i){try{var c=t[a](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,o)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l="Can't upload image",u=function(t){return"".concat(a.a,"/words/").concat(t)},d=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r,d,f;return e=t,n=null,r=[{key:"update",value:function(t){var e=t.wordId,n=t.body;fetch(u(e),{body:n,method:"PUT"}).then((function(t){return t.json()})).then((function(t){return t.id&&o.a.success("Image updated successfully"),t})).catch((function(){o.a.error(l)}))}},{key:"undraft",value:function(t){fetch("".concat(a.a,"/words/undraft/").concat(t),{method:"GET"}).then((function(t){return t.json()})).then((function(t){return t.id&&o.a.success("Moved to the words list"),t})).catch((function(){o.a.error("Cannot move to the words list")}))}},{key:"updateJSON",value:function(t){var e=t.wordId,n=t.wordProps,r=JSON.stringify(n);return fetch(u(e),{body:r,method:"PUT",headers:{"Content-Type":"application/json"}}).then((function(t){return t.json()})).then((function(t){return t})).catch((function(){o.a.error(l)}))}},{key:"delete",value:(d=regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(u(e),{method:"DELETE"});case 2:return n=t.sent,t.abrupt("return",n.json());case 4:case"end":return t.stop()}}),t)})),f=function(){var t=this,e=arguments;return new Promise((function(n,r){var o=d.apply(t,e);function a(t){i(o,n,r,a,c,"next",t)}function c(t){i(o,n,r,a,c,"throw",t)}a(void 0)}))},function(t){return f.apply(this,arguments)})}],n&&c(e.prototype,n),r&&c(e,r),t}()},790:function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return o}));var r="0 3px 6px 0 rgba(0,0,0,0.12), 0 0 1px 0 rgba(0,0,0,0.12)",o="4px"},796:function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n(0),o=n.n(r),a=n(24),i=n.n(a),c=n(13),l=Object(c.a)(i.a).withConfig({displayName:"styles__Icon",componentId:"sc-1ins3vw-0"})(["margin:0 10px;"]),u=function(t){var e=t.word;return o.a.createElement(l,{theme:"twoTone",type:"sound",onClick:function(){window.responsiveVoice.speak(e)}})}},871:function(t,e,n){"use strict";n.r(e),n.d(e,"Word",(function(){return ge}));var r=n(0),o=n.n(r),a=n(815),i=n.n(a);function c(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return l(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var u=n(24),d=n.n(u),f=n(13),s=Object(f.a)(d.a).withConfig({displayName:"styles__Arrow",componentId:"z7mpun-0"})(["font-size:35px;color:",";z-index:1;position:fixed;top:48%;"],(function(t){return t.disabled?"#d6d6d6":"grey"})),p=Object(f.a)(s).withConfig({displayName:"styles__ArrowLeft",componentId:"z7mpun-1"})(["left:1rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"})),m=Object(f.a)(s).withConfig({displayName:"styles__ArrowRight",componentId:"z7mpun-2"})(["right:7rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"}));function y(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return v(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var h=function(t){var e=t.children,n=t.dots,a=Object(r.useRef)(),l=y(function(t){var e=c(Object(r.useState)(0),2),n=e[0],o=e[1],a=n>0,i=n<t.length-1;return[n,function(){a&&o(n-1)},function(){i&&o(n+1)},a,i]}(e),5),u=(l[0],l[1]),d=l[2],f=l[3],s=l[4],v=(null==e?void 0:e.length)>1;return o.a.createElement(o.a.Fragment,null,v&&o.a.createElement(p,{disabled:!f,type:"left",onClick:function(){var t;null==a||null===(t=a.current)||void 0===t||t.prev(),u()}}),o.a.createElement(i.a,{dots:n,infinite:!1,ref:a},e),v&&o.a.createElement(m,{disabled:!s,type:"right",onClick:function(){var t;null==a||null===(t=a.current)||void 0===t||t.next(),d()}}))},b=n(794),g=n.n(b),w=n(39);function E(t,e,n,r,o,a,i){try{var c=t[a](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,o)}var x=function(){var t,e=(t=regeneratorRuntime.mark((function t(e,n){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("".concat(w.a,"/words-proxy/").concat(e,"/").concat(n));case 3:return r=t.sent,t.abrupt("return",r.json());case 7:return t.prev=7,t.t0=t.catch(0),t.abrupt("return",t.t0);case 10:case"end":return t.stop()}}),t,null,[[0,7]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(t){E(a,r,o,i,c,"next",t)}function c(t){E(a,r,o,i,c,"throw",t)}i(void 0)}))});return function(t,n){return e.apply(this,arguments)}}(),j=n(235),S=n.n(j);function I(t,e,n,r,o,a,i){try{var c=t[a](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,o)}function O(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return A(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return A(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var C=function(t){var e=O(Object(r.useState)(null),2),n=e[0],o=e[1];return Object(r.useEffect)((function(){var e;(e=regeneratorRuntime.mark((function e(){var n,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x("frequency",t);case 2:n=e.sent,r=S()(n,"frequency.zipf",null),i=r,a=[{color:"#880000",title:"very rare"},{color:"#ff0202",title:"rare"},{color:"#f97777",title:"seldom"},{color:"#abc0f3",title:"sometimes"},{color:"#6693ff",title:"regular"},{color:"#054eff",title:"often"},{color:"#002b94",title:"frequently"}][Math.ceil(i)-1],o(a);case 6:case"end":return e.stop()}var i}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(t){I(a,r,o,i,c,"next",t)}function c(t){I(a,r,o,i,c,"throw",t)}i(void 0)}))})()}),[]),[n]},_=f.a.span.withConfig({displayName:"styles__Color",componentId:"zf12ky-0"})(["width:20px;height:20px;background:",";display:inline-block;border-radius:50%;"],(function(t){return t.color}));function k(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return N(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return N(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function N(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var M=function(t){var e=t.word,n=t.showTitle,r=k(C(e),1)[0];if(!r)return null;var a=n?o.a.createElement("span",null,r.title):null;return o.a.createElement(g.a,{title:a},o.a.createElement(_,{color:r.color}))},P=n(19);function T(t,e,n,r,o,a,i){try{var c=t[a](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,o)}function q(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(t){T(a,r,o,i,c,"next",t)}function c(t){T(a,r,o,i,c,"throw",t)}i(void 0)}))}}function W(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return z(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return z(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function z(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var R=n(29),U=n(220),J=function(){var t=Object(R.b)();return{toggleEditMode:function(){t({type:U.b})},disableEditMode:function(){t({type:U.a,editMode:!1})},isEditMode:Object(R.c)((function(t){return t.editMode}))}},$=n(321),F=n(841),L=n.n(F),B=n(805),D=n.n(B),V=n(789),H=n(108),G=n(292),K=n(831),Q=n.n(K),X=n(221);function Y(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Z(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Z(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var tt="Can't fetch a word from Rapid API",et=n(69),nt=n.n(et),rt=n(797),ot=n.n(rt),at=ot.a.Paragraph,it=Object(f.a)(nt.a).withConfig({displayName:"styles__MoreSynonymsButton",componentId:"pvlrks-0"})(["margin:10px 0;display:block;"]),ct=f.a.div.withConfig({displayName:"styles__WordLabel",componentId:"pvlrks-1"})(["position:relative;margin-top:20px;font-style:italic;padding:10px;&:before{content:'",": ';font-size:13px;position:absolute;top:-20px;color:#335fff;}"],(function(t){return t.title})),lt=Object(f.a)(at).withConfig({displayName:"styles__Text",componentId:"pvlrks-2"})(["margin-bottom:0 !important;display:inline-block;"]);function ut(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return dt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return dt(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ft=L.a.CheckableTag,st=function(t){var e=t.words;return D()(e)?null:o.a.createElement("div",null,e.map((function(t){return o.a.createElement(ft,{checked:!0,key:t},t)})))},pt=function(t){var e=t.id,n=t.word,r=t.type;return o.a.createElement(ct,{title:Object(G.a)(r)},o.a.createElement(lt,{contentEditable:!0,onInput:function(t){var n={synonym:t.target.textContent};V.a.updateJSON({wordId:e,wordProps:n})}},n))},mt=function(t){var e=t.word,n=t.type;return e?o.a.createElement(ct,{title:Object(G.a)(n)},o.a.createElement("span",null,e)):null},yt=function(t){var e=t.id,n=t.type,a=t.word,i=t.originalWord,c=t.isEditMode,l=Object(H.a)(),u=l.visible,d=l.toggleVisible,f=ut(function(t){var e=t.word,n=t.type,o=t.originalWord,a=Y(Object(r.useState)([]),2),i=a[0],c=a[1];return Object(r.useEffect)((function(){var t=Q()(n);x(t,e||o).then((function(t){return t.synonyms&&c(t.synonyms),t})).catch((function(t){X.a.error("".concat(tt,": ").concat(t))}))}),[]),[i]}({type:n,word:a,originalWord:i}),1)[0],s=Boolean(null==f?void 0:f.length);return o.a.createElement("div",null,c?o.a.createElement(pt,{id:e,word:a,type:n}):o.a.createElement(mt,{word:a,type:n}),s&&o.a.createElement(it,{type:"primary",onClick:function(){return d((function(t){return!t}))}},"See more"),u&&s&&o.a.createElement(st,{words:f}))},vt=n(790),ht=(ot.a.Paragraph,f.a.div.withConfig({displayName:"styles__WordWrapper",componentId:"sc-1v5etqc-0"})(["margin:0 auto;margin-bottom:5rem;max-width:550px;width:100%;background:#fff;padding:20px;border-radius:",";box-shadow:",";"],vt.a,vt.b)),bt=f.a.div.withConfig({displayName:"styles__Image",componentId:"sc-1v5etqc-1"})(["width:100%;background:url(",") center no-repeat;max-width:300px;height:200px;border-radius:5px;margin:0 auto;display:block;margin-bottom:10px;background-size:contain;"],(function(t){return t.src})),gt=f.a.div.withConfig({displayName:"styles__WordProperty",componentId:"sc-1v5etqc-2"})(["font-size:17px;background:#f5f5f5;"]),wt=f.a.div.withConfig({displayName:"styles__WordPropertySpacer",componentId:"sc-1v5etqc-3"})(["margin-bottom:35px;"]),Et=f.a.div.withConfig({displayName:"styles__WordLabel",componentId:"sc-1v5etqc-4"})(["position:relative;margin-top:20px;font-style:italic;padding:10px;&:before{content:'",": ';font-size:12px;position:absolute;top:-20px;color:#335fff;}"],(function(t){return t.title})),xt=Object(f.a)(gt).withConfig({displayName:"styles__MainWordProperty",componentId:"sc-1v5etqc-5"})(["display:flex;justify-content:center;align-items:center;text-transform:capitalize;font-weight:500;font-size:25px;margin-bottom:0;background:#fff;"]),jt=Object(f.a)(gt).withConfig({displayName:"styles__TranslateProperty",componentId:"sc-1v5etqc-6"})(["display:flex;justify-content:center;text-transform:capitalize;font-size:20px;color:grey;background:#fff;"]),St=f.a.div.withConfig({displayName:"styles__WordPage",componentId:"sc-1v5etqc-7"})(["display:flex;"]),It=f.a.div.withConfig({displayName:"styles__ImageWithFrequency",componentId:"sc-1v5etqc-8"})(["position:relative;margin:0 auto;max-width:300px;"]),Ot=f.a.div.withConfig({displayName:"styles__FrequencyWrapper",componentId:"sc-1v5etqc-9"})(["width:20px;height:20px;background:#abc0f3;display:inline-block;border-radius:50%;position:absolute;top:5px;right:5px;"]),At=f.a.div.withConfig({displayName:"styles__MoreExamplesWrapper",componentId:"sc-1v5etqc-10"})(["margin-top:5px;"]),Ct=f.a.div.withConfig({displayName:"styles__Text",componentId:"sc-1v5etqc-11"})(["margin-bottom:0 !important;display:inline-block;"]),_t=f.a.div.withConfig({displayName:"styles__WordPronunciationWrapper",componentId:"sc-1v5etqc-12"})(["position:absolute;bottom:2px;padding:5px;padding-bottom:2px;border-bottom-left-radius:0;border-bottom-right-radius:3px;border-top-right-radius:0;right:2px;font-size:17px;"]),kt=f.a.label.withConfig({displayName:"styles__ImageUpdate",componentId:"sc-1v5etqc-13"})(["position:absolute;top:0;background:#00000080;width:300px;height:200px;display:flex;align-items:center;justify-content:center;color:#fff;cursor:pointer;"]),Nt=f.a.input.withConfig({displayName:"styles__Input",componentId:"sc-1v5etqc-14"})(["display:none;"]),Mt=Object(f.a)(d.a).withConfig({displayName:"styles__Arrow",componentId:"sc-1v5etqc-15"})(["font-size:35px;color:",";z-index:1;position:fixed;top:48%;"],(function(t){return t.disabled?"#d6d6d6":"grey"})),Pt=(Object(f.a)(Mt).withConfig({displayName:"styles__ArrowLeft",componentId:"sc-1v5etqc-16"})(["left:1rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"})),Object(f.a)(Mt).withConfig({displayName:"styles__ArrowRight",componentId:"sc-1v5etqc-17"})(["right:7rem;color:",";"],(function(t){return t.disabled?"#d6d6d6":"grey"})),function(t){var e=t.id,n=t.word,r=t.synonym,a=J().isEditMode;return o.a.createElement(gt,null,o.a.createElement(yt,{id:e,word:r,type:"synonym",originalWord:n,isEditMode:a}))}),Tt=ot.a.Paragraph,qt=f.a.div.withConfig({displayName:"styles__HighlightedPhrase",componentId:"sc-1isfhnk-0"})(["font-size:18px;font-style:italic;& span{background:#edff00;padding:2px 5px;line-height:1;border-radius:2px;}"]),Wt=(Object(f.a)(Tt).withConfig({displayName:"styles__Text",componentId:"sc-1isfhnk-1"})(["margin-bottom:0 !important;display:inline-block;"]),function(t){var e=t.word,n=t.phrase;return o.a.createElement(qt,{dangerouslySetInnerHTML:{__html:null==n?void 0:n.replace(e,"<span>".concat(e,"</span>"))}})}),zt=function(t){var e=t.id,n=t.context;return o.a.createElement(gt,null,o.a.createElement(Et,{title:"Context"},o.a.createElement(Ct,{contentEditable:!0,onInput:function(t){var n={context:t.target.textContent};V.a.updateJSON({wordId:e,wordProps:n})}},n)))},Rt=function(t){var e=t.word,n=t.context;return n?o.a.createElement(gt,null,o.a.createElement(Et,{title:"Context"},o.a.createElement(Wt,{phrase:n,word:e}))):null},Ut=function(t){var e=t.id,n=t.context,r=t.word;return J().isEditMode?o.a.createElement(zt,{id:e,context:n}):o.a.createElement(Rt,{word:r,context:n})},Jt=n(810),$t=n.n(Jt),Ft=function(t,e,n){return t?e:n},Lt=n(809),Bt=n.n(Lt),Dt=Object(f.a)(Bt.a).withConfig({displayName:"styles__Alert",componentId:"sc-1ntum59-0"})(["margin-bottom:15px;"]);function Vt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Ht(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ht(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ht(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Gt=function(t){var e=t.examples;return r.Children.toArray(e.filter((function(t,e){return e<5})).map((function(t){return o.a.createElement(Dt,{type:"info",message:o.a.createElement("div",null,t)})})))},Kt=function(t){var e=t.word,n=Vt(Object(r.useState)(null),2),a=n[0],i=n[1];return Object(r.useEffect)((function(){x("examples",e).then((function(t){return t.examples&&i(t.examples),t})).catch((function(t){return t}))}),[]),Ft(Boolean(null==a?void 0:a.length),o.a.createElement($t.a,{icon:null,placement:"bottom",title:o.a.createElement(Gt,{examples:a})},o.a.createElement(nt.a,{type:"primary"},"Show more examples")),null)},Qt=function(t){var e=t.id,n=t.example;return o.a.createElement(Et,{title:"Example"},o.a.createElement(Ct,{contentEditable:!0,onInput:function(t){var n={example:t.target.textContent};V.a.updateJSON({wordId:e,wordProps:n})}},n))},Xt=function(t){var e=t.word,n=t.example;return n?o.a.createElement(Et,{title:"Example"},o.a.createElement(Wt,{phrase:n,word:e})):null},Yt=function(t){var e=t.id,n=t.word,r=t.example,a=J().isEditMode;return o.a.createElement(gt,null,a?o.a.createElement(Qt,{id:e,example:r}):o.a.createElement(Xt,{word:n,example:r}),o.a.createElement(At,null,o.a.createElement(Kt,{word:n})))},Zt=function(t){var e=t.id,n=t.translate,r=J().isEditMode;return o.a.createElement(jt,null,Ft(r,o.a.createElement(Ct,{contentEditable:!0,onInput:function(t){var n={translate:t.target.textContent};V.a.updateJSON({wordId:e,wordProps:n})}},n),o.a.createElement("span",null,n)))},te=f.a.div.withConfig({displayName:"styles__ButtonWrapper",componentId:"sc-6zz5q1-0"})(["position:fixed;right:120px;bottom:20px;@media (max-width:480px){display:none;}"]),ee=function(t){var e=t.updateWord,n=J().toggleEditMode;return o.a.createElement(te,{type:"button",onClick:n},o.a.createElement(nt.a,{type:"primary",onClick:e},"Edit"))},ne=function(t,e){return e<5},re=function(t){var e=t.definitions;return r.Children.toArray(e.filter(ne).map((function(t){var e=t.definition;return o.a.createElement(Bt.a,{type:"info",message:o.a.createElement("div",null,e)})})))};function oe(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return ae(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ae(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ae(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ie=function(t){var e=function(t){var e=oe(Object(r.useState)(null),2),n=e[0],o=e[1];return Object(r.useEffect)((function(){x("definitions",t).then((function(t){return t.definitions&&o(t.definitions),t})).catch((function(t){return t}))}),[]),{definitions:n}}(t.word).definitions;return Ft(Boolean(null==e?void 0:e.length),o.a.createElement($t.a,{icon:null,placement:"bottom",title:o.a.createElement(re,{definitions:e})},o.a.createElement(nt.a,{type:"primary"},"Show more definitions")),null)},ce=function(t){var e=t.id,n=t.definition;return o.a.createElement(Et,{title:"Definition"},o.a.createElement(Ct,{contentEditable:!0,onInput:function(t){var n={definition:t.target.textContent};V.a.updateJSON({wordId:e,wordProps:n})}},n))},le=function(t){var e=t.definition;return e?o.a.createElement(Et,{title:"Definition"},o.a.createElement("span",null,e)):null},ue=function(t){var e=t.id,n=t.word,r=t.definition,a=J().isEditMode;return o.a.createElement(wt,null,o.a.createElement(gt,null,a?o.a.createElement(ce,{id:e,definition:r}):o.a.createElement(le,{definition:r})),o.a.createElement(At,null,o.a.createElement(ie,{word:n})))},de=function(t){var e=t.id,n=t.word,r=J().isEditMode;return o.a.createElement(xt,null,Ft(r,o.a.createElement(Ct,{contentEditable:!0,onInput:function(t){var n={word:t.target.textContent};V.a.updateJSON({wordId:e,wordProps:n})}},n),o.a.createElement("span",null,n)))},fe=n(128),se=n.n(fe);function pe(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=t[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(t){o=!0,a=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return me(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return me(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function me(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ye="Can't upload file",ve=function(t){var e=t.id;return o.a.createElement(o.a.Fragment,null,o.a.createElement(Nt,{type:"file",id:"imageSrc ".concat(e),name:"imageSrc",onChange:function(t){var n,r=new FormData,o=null==t||null===(n=t.target)||void 0===n?void 0:n.files;if(o&&o.length){var a=pe(o,1)[0];r.append("imageSrc",a),V.a.update({wordId:e,body:r})}else se.a.error(ye)}}),o.a.createElement(kt,{htmlFor:"imageSrc ".concat(e)},o.a.createElement("span",null,"Update image")))},he=function(t){var e=t.id;return o.a.createElement(nt.a,{type:"primary",onClick:function(){V.a.undraft(e)}},"Undraft")},be=n(796),ge=function(){var t;t=J().disableEditMode,Object(r.useEffect)((function(){return function(){t()}}),[]);var e=J().isEditMode,n=Object($.a)().isVoiceReaderAvailable,a=function(){var t=Object(P.h)().wordName,e=W(Object(r.useState)(null),2),n=e[0],o=e[1];Object(r.useEffect)((function(){q(regeneratorRuntime.mark((function e(){var n,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=9;break}return n="".concat(w.a,"/word/find/").concat(t),e.next=4,fetch(n);case 4:return r=e.sent,e.next=7,r.json();case 7:a=e.sent,o(a);case 9:case"end":return e.stop()}}),e)})))()}),[t]);var a=function(){var e=q(regeneratorRuntime.mark((function e(){var n,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="".concat(w.a,"/word/find/").concat(t),e.next=3,fetch(n);case 3:return r=e.sent,e.next=6,r.json();case 6:a=e.sent,o(a);case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return{word:n,updateWord:a}}(),i=a.word,c=a.updateWord;return i?o.a.createElement(o.a.Fragment,null,o.a.createElement(h,{dots:!1},i.map((function(t){var r=t.id,a=t.word,i=t.translate,c=t.definition,l=t.context,u=t.example,d=t.synonym,f=t.imageSrc;return o.a.createElement("div",{key:r},o.a.createElement(St,null,o.a.createElement(ht,null,o.a.createElement(It,null,o.a.createElement(bt,{src:f,alt:a}),e&&o.a.createElement(ve,{id:r}),o.a.createElement(Ot,null,o.a.createElement(M,{showTitle:!0,word:a})),o.a.createElement(_t,null,n&&o.a.createElement(be.a,{word:a}))),o.a.createElement(de,{id:r,word:a}),o.a.createElement(Zt,{id:r,translate:i}),o.a.createElement(ue,{id:r,definition:c,word:a}),o.a.createElement(Ut,{id:r,word:a,context:l}),o.a.createElement(Yt,{id:r,example:u,word:a}),o.a.createElement(Pt,{id:r,word:a,synonym:d}),o.a.createElement("br",null),e&&o.a.createElement(he,{id:r}))))}))),o.a.createElement(ee,{updateWord:c})):null};e.default=ge}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,